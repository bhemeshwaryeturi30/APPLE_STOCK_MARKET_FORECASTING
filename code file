
Telepharmacy Code is run in 2 parts. 
First the python file is run to create base tables.(See attached python file)
then below snowflake code is run to create 2 final tables for the dashboard.

ExecutiveSummary.sql code:
-- snowflake source
CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_EXECUTIVE_SUMMARY AS (
WITH STORE_MODEL AS (
    SELECT DISTINCT STORE AS STORE_NBR
        ,MODEL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE
),

STR_FW AS (
SELECT SW.STORE_NBR
    ,STR.MODEL
    ,SW.FISCAL_WEEK_NBR
    ,RX_BLENDED_NPS AS NPS_FW
    ,lag(RX_BLENDED_NPS) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS NPS_FW_PREV
    ,WECARE_SCORE AS WECARE_SCORE_FW
    ,LAG(WECARE_SCORE) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS WECARE_FW_PREV
    ,NULL AS OPI_FW
    ,NULL AS OPI_FW_PREV
    ,NULL AS MPC_FW
    ,NULL AS MPC_FW_PREV
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS TECH_AVD_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_TECH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS RPH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_RPH_AVD_FW
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK SW
INNER JOIN STORE_MODEL AS STR
    ON STR.STORE_NBR=SW.STORE_NBR
),

AVD_MONTH AS (
SELECT SW.STORE_NBR
    ,FW.FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) AS TECH_HRS_DEMAND_ADJ
FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK AS SW
    ON SW.FISCAL_WEEK_NBR=FW.FISCAL_WEEK_NBR AND (RPH_HRS_ACT_ADJ IS NOT NULL OR TECH_HRS_ACT_ADJ IS NOT NULL)
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FM.FISCAL_MONTH_NBR=FW.FISCAL_MONTH_NBR    
GROUP BY 1,2
ORDER BY 1,2
),
AVD_YTD AS (
SELECT STORE_NBR
    ,FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ
FROM AVD_MONTH   
),
AVD_CHAIN AS (
SELECT 'CHAIN' AS CHAIN
    ,FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_CHAIN
    ,SUM(RPH_HRS_DEMAND_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_CHAIN
    ,SUM(TECH_HRS_ACT_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_CHAIN
    ,SUM(TECH_HRS_DEMAND_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_CHAIN
FROM AVD_MONTH
),
MPC_CHAIN AS (
SELECT  'CHAIN' AS CHAIN,
        MPC.FISCAL_MONTH_NBR,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'IMZ_SUCCESS_RATE' THEN MPC_SCORE END) AS IMZ_SUCCESS_RATE_MPC,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PCAP_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PCAP_TOTAL_SUCCESS_RATE_MPC,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PTO_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PTO_TOTAL_SUCCESS_RATE_MPC,
        ROUND(100*((zeroifnull(IMZ_SUCCESS_RATE_MPC) + zeroifnull(PCAP_TOTAL_SUCCESS_RATE_MPC) + zeroifnull(PTO_TOTAL_SUCCESS_RATE_MPC))/ ((CASE WHEN IMZ_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END) + (CASE WHEN PCAP_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 30 END)+ (CASE WHEN PTO_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END))),0) AS MPC_CHAIN
FROM    APP_RTL_RONBA.SOPS_MPC_RPT.RPT_MPC_CHAIN_WEEK_MTD AS MPC
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  MPC.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=MPC.FISCAL_WEEK_NBR
WHERE MPC.FISCAL_YEAR_NBR >= 2024
    AND COMPONENT_METRIC_NAME IN ('IMZ_SUCCESS_RATE', 'PCAP_TOTAL_SUCCESS_RATE','PTO_TOTAL_SUCCESS_RATE')
    AND CHAIN = 'ALL'
GROUP BY 1,2
),
OPI_CHAIN AS (
SELECT  'CHAIN' AS chain,
         a.month_year AS FISCAL_MONTH_NBR,
         AVG(c.aggr_score_w_deduction) AS OPI_CHAIN
FROM   (SELECT * FROM   app_socs.cl_socs.rx_scoring_detail_atmtn
        WHERE  excl_ind = 'N'
                ) a
join (SELECT * FROM app_socs.cl_socs.rx_store_level_atmtn) c
        ON a.store_id = c.store_id
        AND a.month_year = c.month_year
left join app_socs.sl_socs_rpt.store_dim_rhody DIM
        ON a.store_id = dim.store_nbr
GROUP BY ALL
order by 1,2
),
WECARE_CHAIN AS (
SELECT  'CHAIN' AS CHAIN,
        V2.FISCAL_MONTH_NBR,
        MTD_POINTS AS WECARE_SCORE_CHAIN
FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_METRIC_PDF_V2 AS V2
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  V2.FSCL_WK = FW.FISCAL_WEEK_NBR
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=V2.FSCL_WK
WHERE   METRIC_ID = 100
    AND STORE_NO = 0 
),
NPS_CHAIN AS (
SELECT 'CHAIN' AS CHAIN
    ,CAL.FISCAL_MONTH_NBR
    
    ,SUM(NPS.RX_LTR_DETRACTORS) AS RX_LTR_DETRACTORS_S
    ,SUM(NPS.RX_LTR_PROMOTERS) AS RX_LTR_PROMOTERS_S
    ,SUM(NPS.RX_LTR_SURVEYS) AS RX_LTR_SURVEYS_S
    
    ,SUM(NPS.RX_VACC_LTR_DETRACTORS) AS RX_VACC_LTR_DETRACTORS_S
    ,SUM(NPS.RX_VACC_LTR_PROMOTERS) AS RX_VACC_LTR_PROMOTERS_S
    ,SUM(NPS.RX_VACC_LTR_SURVEYS) AS RX_VACC_LTR_SURVEYS_S
    
    ,CASE WHEN RX_LTR_SURVEYS_S>0 THEN (RX_LTR_PROMOTERS_S-RX_LTR_DETRACTORS_S)/RX_LTR_SURVEYS_S END AS RX_LTR_NPS
    ,CASE WHEN RX_VACC_LTR_SURVEYS_S>0 THEN (RX_VACC_LTR_PROMOTERS_S-RX_VACC_LTR_DETRACTORS_S)/RX_VACC_LTR_SURVEYS_S END AS RX_LTR_VACC_NPS
    
    ,CASE 
        WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS 
        WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS
        ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS NPS_CHAIN
FROM APP_SOCS.SL_WCR_RPT.VW_MSH_CUR_NPS_60D_DLY AS NPS
INNER JOIN CORE_FSSC.CURATED_CALENDAR.DAY AS CAL
    ON NPS.DATE_DT=CAL.DATE_DT
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON CAL.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR
WHERE CAL.FISCAL_YEAR_NBR>=2024
    AND FM.END_DT<=CURRENT_DATE-5
GROUP BY 1,2
),
STR_FM AS (
    SELECT STR.MODEL
        , FM.STORE_NBR
        , FM.FISCAL_MONTH_NBR
        , FM.RX_BLENDED_NPS AS NPS_MTH
        , LAG(FM.RX_BLENDED_NPS) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS NPS_MTH_PREV
        , FM.WECARE_SCORE AS WECARE_SCORE_MTH
        , LAG(WECARE_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS WECARE_SCORE_MTH_PREV
        , FM.OPI_SCORE AS OPI_MTH
        , LAG(OPI_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS OPI_MTH_PREV
        , FM.MPNTH_MPC_SCORE AS MPC_MTH
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS MPC_MTH_PREV
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_MTH
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_MTH_PREV
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_MTH
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_MTH_PREV
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_MTH
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_MTH_PREV
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_MTH
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_MTH_PREV
        , NPS_GOAL.INTEGER_BLENDED_GOAL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_MONTH AS FM
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FM.STORE_NBR
    LEFT JOIN AVD_MONTH AS AVD
        ON FM.STORE_NBR=AVD.STORE_NBR AND FM.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.NPS_GOALS_2024 AS NPS_GOAL
        ON FM.STORE_NBR = NPS_GOAL.STORE_NBR
    WHERE STR.MODEL IS NOT NULL
),
STR_FY AS (
    SELECT STR.MODEL
        , FY.STORE_NBR
        , FY.FISCAL_MONTH_NBR
        , FY.RX_BLENDED_NPS AS NPS_YTD
        , LAG(FY.RX_BLENDED_NPS) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS NPS_YTD_PREV
        , FY.WECARE_SCORE AS WECARE_SCORE_YTD
        , LAG(WECARE_SCORE) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS WECARE_SCORE_YTD_PREV
        , FY.OPI_SCORE_YTD AS OPI_YTD
        , LAG(OPI_SCORE_YTD) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS OPI_YTD_PREV
        , FY.MPNTH_MPC_SCORE AS MPC_YTD
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS MPC_YTD_PREV
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_YTD
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_YTD_PREV
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_YTD
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_YTD_PREV
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_YTD
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_YTD_PREV
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_YTD
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_YTD_PREV
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_YEAR AS FY
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FY.STORE_NBR
    LEFT JOIN AVD_YTD AS AVD
        ON FY.STORE_NBR=AVD.STORE_NBR AND FY.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    WHERE STR.MODEL IS NOT NULL
),
FINAL_DF AS (
    SELECT  DISTINCT STR.*
        ,WK.FISCAL_WEEK_NBR
        ,NPS_FW
        ,NPS_FW_PREV
        ,WECARE_SCORE_FW
        ,WECARE_FW_PREV
        ,NULL AS OPI_FW
        ,NULL AS OPI_FW_PREV
        ,NULL AS MPC_FW
        ,NULL AS MPC_FW_PREV
        ,TECH_AVD_FW
        ,PREV_TECH_AVD_FW
        ,RPH_AVD_FW
        ,PREV_RPH_AVD_FW
        
        ,MTH.FISCAL_MONTH_NBR
        ,NPS_MTH
        ,NPS_MTH_PREV
        ,WECARE_SCORE_MTH
        ,WECARE_SCORE_MTH_PREV
        ,OPI_MTH
        ,OPI_MTH_PREV
        ,MPC_MTH
        ,MPC_MTH_PREV
        ,RPH_HRS_ACT_ADJ_MTH
        ,RPH_HRS_ACT_ADJ_MTH_PREV
        ,RPH_HRS_DEMAND_ADJ_MTH
        ,RPH_HRS_DEMAND_ADJ_MTH_PREV
        ,TECH_HRS_ACT_ADJ_MTH
        ,TECH_HRS_ACT_ADJ_MTH_PREV
        ,TECH_HRS_DEMAND_ADJ_MTH
        ,TECH_HRS_DEMAND_ADJ_MTH_PREV
        ,CASE WHEN INTEGER_BLENDED_GOAL IS NULL OR NPS_MTH IS NULL THEN NULL WHEN NPS_MTH>=(INTEGER_BLENDED_GOAL/100.) THEN 1 ELSE 0 END AS NPS_GOAL_STR_PCT
        ,CASE WHEN WECARE_SCORE_MTH IS NULL THEN NULL WHEN WECARE_SCORE_MTH>=70 THEN 1 ELSE 0 END AS WECARE_GOAL_STR_PCT
        ,CASE WHEN OPI_MTH IS NULL THEN NULL WHEN OPI_MTH>=80 THEN 1 ELSE 0 END AS OPI_GOAL_STR_PCT
        ,CASE WHEN MPC_MTH IS NULL THEN NULL WHEN MPC_MTH>=81 THEN 1 ELSE 0 END AS MPC_GOAL_STR_PCT
       -- ,SUM(1) AS STORE_CNT 

        ,NPS_YTD
        ,NPS_YTD_PREV
        ,WECARE_SCORE_YTD
        ,WECARE_SCORE_YTD_PREV
        ,OPI_YTD
        ,OPI_YTD_PREV
        ,MPC_YTD
        ,MPC_YTD_PREV
        ,RPH_HRS_ACT_ADJ_YTD
        ,RPH_HRS_ACT_ADJ_YTD_PREV
        ,RPH_HRS_DEMAND_ADJ_YTD
        ,RPH_HRS_DEMAND_ADJ_YTD_PREV
        ,TECH_HRS_ACT_ADJ_YTD
        ,TECH_HRS_ACT_ADJ_YTD_PREV
        ,TECH_HRS_DEMAND_ADJ_YTD
        ,TECH_HRS_DEMAND_ADJ_YTD_PREV

        ,WECARE_SCORE_CHAIN
        ,NPS.NPS_CHAIN AS NPS_CHAIN
        ,OPI_CHAIN
        ,MPC_CHAIN
        ,RPH_HRS_ACT_ADJ_CHAIN
        ,RPH_HRS_DEMAND_ADJ_CHAIN
        ,TECH_HRS_ACT_ADJ_CHAIN
        ,TECH_HRS_DEMAND_ADJ_CHAIN
        
    FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    LEFT JOIN  STR_FW AS WK
        ON  STORE = STORE_NBR
    LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
        ON  WK.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
    LEFT JOIN STR_FM AS MTH
        ON  WK.STORE_NBR = MTH.STORE_NBR
        AND (FW.FISCAL_MONTH_NBR-1) = MTH.FISCAL_MONTH_NBR
    LEFT JOIN STR_FY AS YTD
        ON  WK.STORE_NBR = YTD.STORE_NBR
        AND (FW.FISCAL_MONTH_NBR-1) = YTD.FISCAL_MONTH_NBR
    LEFT JOIN WECARE_CHAIN AS WC
        ON  (FW.FISCAL_MONTH_NBR-1) = WC.FISCAL_MONTH_NBR
    LEFT JOIN NPS_CHAIN AS NPS
        ON  (FW.FISCAL_MONTH_NBR-1) = NPS.FISCAL_MONTH_NBR
    LEFT JOIN OPI_CHAIN AS OPI
        ON  (FW.FISCAL_MONTH_NBR-1) = OPI.FISCAL_MONTH_NBR
    LEFT JOIN MPC_CHAIN AS MPC
        ON  (FW.FISCAL_MONTH_NBR-1) = MPC.FISCAL_MONTH_NBR
    LEFT JOIN AVD_CHAIN AS AVD
        ON  (FW.FISCAL_MONTH_NBR-1) = AVD.FISCAL_MONTH_NBR
    --WHERE   STATUS IN ('Converted', 'Steady State')
)
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'NPS' AS METRIC_NAME,
        NPS_FW AS FW_VALUE,
        1 AS FW_DEN,
        NPS_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        NPS_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        NPS_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        NPS_GOAL_STR_PCT AS GOAL,
        NPS_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        NPS_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        NPS_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'WECARE' AS METRIC_NAME,
        WECARE_SCORE_FW AS FW_VALUE,
        1 AS FW_DEN,
        WECARE_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        WECARE_SCORE_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        WECARE_SCORE_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        WECARE_GOAL_STR_PCT AS GOAL,
        WECARE_SCORE_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        WECARE_SCORE_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        WECARE_SCORE_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'OPI' AS METRIC_NAME,
        OPI_FW AS FW_VALUE,
        1 AS FW_DEN,
        OPI_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        OPI_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        OPI_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        OPI_GOAL_STR_PCT AS GOAL,
        OPI_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        OPI_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        OPI_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'MPC' AS METRIC_NAME,
        MPC_FW AS FW_VALUE,
         1 AS FW_DEN,
        MPC_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        MPC_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        MPC_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        MPC_GOAL_STR_PCT AS GOAL,
        MPC_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        MPC_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        MPC_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'TECH AVD' AS METRIC_NAME,
        TECH_AVD_FW AS FW_VALUE,
        1 AS FW_DEN,
        PREV_TECH_AVD_FW AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        TECH_HRS_ACT_ADJ_MTH AS MTH_VALUE,
        TECH_HRS_DEMAND_ADJ_MTH AS MTH_DEN,
        TECH_HRS_ACT_ADJ_MTH_PREV AS PREV_MTH_VALUE,
        TECH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_MTH_DEN,
        NULL AS GOAL,
        TECH_HRS_ACT_ADJ_YTD AS YTD_VALUE,
        TECH_HRS_DEMAND_ADJ_YTD AS YTD_DEN,
        TECH_HRS_ACT_ADJ_YTD_PREV AS PREV_YTD_VALUE,
        TECH_HRS_DEMAND_ADJ_YTD_PREV AS PREV_YTD_DEN,
        TECH_HRS_ACT_ADJ_CHAIN AS CHAIN_NUM,
        TECH_HRS_DEMAND_ADJ_CHAIN AS CHAIN_DEN
        
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'RPH AVD' AS METRIC_NAME,
        RPH_AVD_FW AS FW_VALUE,
        1 AS FW_DEN,
        PREV_RPH_AVD_FW AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        
        RPH_HRS_ACT_ADJ_MTH AS MTH_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH AS MTH_DEN,
        RPH_HRS_ACT_ADJ_MTH_PREV AS PREV_MTH_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_MTH_DEN,
        NULL AS GOAL,
        
        RPH_HRS_ACT_ADJ_MTH AS YTD_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH AS YTD_DEN,
        RPH_HRS_ACT_ADJ_MTH_PREV AS PREV_YTD_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_YTD_DEN,
        
        RPH_HRS_ACT_ADJ_CHAIN AS CHAIN_NUM,
        RPH_HRS_DEMAND_ADJ_CHAIN AS CHAIN_DEN
        
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
);

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_VIEW AS (
WITH STORE_MODEL AS (
    SELECT DISTINCT STORE AS STORE_NBR
        ,MODEL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE
    --WHERE STATUS IN ('Steady State', 'Converted')
),

STR_FW AS (
SELECT SW.STORE_NBR
    ,STR.MODEL
    ,SW.FISCAL_WEEK_NBR
    ,RX_BLENDED_NPS AS NPS_FW
    ,lag(RX_BLENDED_NPS) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_NPS_FW
    ,WECARE_SCORE AS WECARE_SCORE_FW
    ,LAG(WECARE_SCORE) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_WECARE_FW
    ,NULL AS OPI_FW
    ,NULL AS PREV_OPI_FW
    ,NULL AS MPC_FW
    ,NULL AS PREV_MPC_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS TECH_AVD_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_TECH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS RPH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_RPH_AVD_FW
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK SW
INNER JOIN STORE_MODEL AS STR
    ON STR.STORE_NBR=SW.STORE_NBR
--WHERE SW.FISCAL_WEEK_NBR>$MAX_WEEK_NBR-5
),

AVD_MONTH AS (
SELECT SW.STORE_NBR
    ,FW.FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) AS TECH_HRS_DEMAND_ADJ
FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK AS SW
    ON SW.FISCAL_WEEK_NBR=FW.FISCAL_WEEK_NBR AND (RPH_HRS_ACT_ADJ IS NOT NULL OR TECH_HRS_ACT_ADJ IS NOT NULL)
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FM.FISCAL_MONTH_NBR=FW.FISCAL_MONTH_NBR    
GROUP BY 1,2
--HAVING MAX(SW.FISCAL_WEEK_NBR)=AVG(FM.END_WEEK_NBR)
ORDER BY 1,2
),

STR_FM AS (
    SELECT STR.MODEL
        , FM.STORE_NBR
        , FM.FISCAL_MONTH_NBR
        , FM.RX_BLENDED_NPS AS NPS_MTH
        , LAG(FM.RX_BLENDED_NPS) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_NPS_MTH
        , FM.WECARE_SCORE AS WECARE_SCORE_MTH
        , LAG(WECARE_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_WECARE_SCORE_MTH
        , FM.OPI_SCORE AS OPI_MTH
        , LAG(OPI_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_OPI_MTH
        , FM.MPNTH_MPC_SCORE AS MPC_MTH
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_MPC_MTH
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_MTH
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_RPH_HRS_ACT_ADJ_MTH
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_MTH
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_RPH_HRS_DEMAND_ADJ_MTH
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_MTH
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_TECH_HRS_ACT_ADJ_MTH
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_MTH
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_TECH_HRS_DEMAND_ADJ_MTH
        , NPS_GOAL.INTEGER_BLENDED_GOAL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_MONTH AS FM
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FM.STORE_NBR
    LEFT JOIN AVD_MONTH AS AVD
        ON FM.STORE_NBR=AVD.STORE_NBR AND FM.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.NPS_GOALS_2024 AS NPS_GOAL
        ON FM.STORE_NBR = NPS_GOAL.STORE_NBR
    WHERE STR.MODEL IS NOT NULL
)

SELECT  DISTINCT STR.*
    ,WK.FISCAL_WEEK_NBR
    ,NPS_FW
    ,PREV_NPS_FW
    ,WECARE_SCORE_FW
    ,PREV_WECARE_FW
    ,NULL AS OPI_FW
    ,NULL AS PREV_OPI_FW
    ,NULL AS MPC_FW
    ,NULL AS PREV_MPC_FW
    ,TECH_AVD_FW
    ,PREV_TECH_AVD_FW
    ,RPH_AVD_FW
    ,PREV_RPH_AVD_FW
    
    ,MTH.FISCAL_MONTH_NBR
    ,NPS_MTH
    ,PREV_NPS_MTH
    ,WECARE_SCORE_MTH
    ,PREV_WECARE_SCORE_MTH
    ,OPI_MTH
    ,PREV_OPI_MTH
    ,MPC_MTH
    ,PREV_MPC_MTH
    ,RPH_HRS_ACT_ADJ_MTH
    ,PREV_RPH_HRS_ACT_ADJ_MTH
    ,RPH_HRS_DEMAND_ADJ_MTH
    ,PREV_RPH_HRS_DEMAND_ADJ_MTH
    ,TECH_HRS_ACT_ADJ_MTH
    ,PREV_TECH_HRS_ACT_ADJ_MTH
    ,TECH_HRS_DEMAND_ADJ_MTH
    ,PREV_TECH_HRS_DEMAND_ADJ_MTH
    ,CASE WHEN INTEGER_BLENDED_GOAL IS NULL OR NPS_MTH IS NULL THEN NULL WHEN NPS_MTH>=(INTEGER_BLENDED_GOAL/100.) THEN 1 ELSE 0 END AS NPS_GOAL_STR_PCT
    ,CASE WHEN WECARE_SCORE_MTH IS NULL THEN NULL WHEN WECARE_SCORE_MTH>=70 THEN 1 ELSE 0 END AS WECARE_GOAL_STR_PCT
    ,CASE WHEN OPI_MTH IS NULL THEN NULL WHEN OPI_MTH>=80 THEN 1 ELSE 0 END AS OPI_GOAL_STR_PCT
    ,CASE WHEN MPC_MTH IS NULL THEN NULL WHEN MPC_MTH>=81 THEN 1 ELSE 0 END AS MPC_GOAL_STR_PCT
   -- ,SUM(1) AS STORE_CNT   
FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
LEFT JOIN  STR_FW AS WK
    ON  STORE = STORE_NBR
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  WK.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
LEFT JOIN STR_FM AS MTH
    ON  WK.STORE_NBR = MTH.STORE_NBR
    AND (FW.FISCAL_MONTH_NBR-1) = MTH.FISCAL_MONTH_NBR
--WHERE   STATUS IN ('Steady State', 'Converted')
);

Telepharmacy Base Code.ipynb :

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf615b79",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import teradatasql\n",
    "import teradata \n",
    "import snowflake.connector\n",
    "from snowflake.connector.pandas_tools import write_pandas\n",
    "import os\n",
    "import numpy as np\n",
    "import shutil\n",
    "import datetime as dt\n",
    "import requests\n",
    "import numpy as np\n",
    "import pyodbc\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e3119559",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Setup Userid and read password\n",
    "userName = 'pooja.sankharva@cvshealth.com'\n",
    "user_id = os.getlogin()\n",
    "pw = '' ## your teradata password"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6089e975",
   "metadata": {},
   "outputs": [],
   "source": [
    "import base64\n",
    "\n",
    "trigger_url = \"https://prod-125.westus.logic.azure.com:443/workflows/7928d1358e2f43fea03ac4d79d4240d9/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EHFl4ffi3b0_hfwx050ypBa7jG6tSELxOCnp_AdhKrA\"\n",
    "# folderpath = 'CF KPI Input Excel Library' #Folder path from root of the site example 'Documents/Shared Folder/Required Folder'\n",
    "# folderpath_formated = folderpath.replace(' ','%2b').replace('/','%252f')#has to have %2b for space and %252f for /, so formating it \n",
    "filename = \"Telepharmacy Store Status - Group 0 - 2a.xlsx\" #Just the name of the file in the folder you want\n",
    "#filename_formated = filename.replace(' ','%2b')\n",
    "\n",
    "#response  = requests.post(trigger_url,json={'folderpath':folderpath_formated,'filename':filename_formated})\n",
    "response  = requests.post(trigger_url)\n",
    "with open(filename, 'wb') as f:\n",
    "    f.write(base64.b64decode(response.content))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "723bce28",
   "metadata": {},
   "outputs": [],
   "source": [
    "store_df = pd.read_excel('Telepharmacy Store Status - Group 0 - 2a.xlsx')\n",
    "store_df = store_df[~store_df['Status'].isin(['Descoped', 'Closed'])].copy()\n",
    "store_df = store_df.rename(columns={'2024 Div': 'DIV', '2024 Reg': 'REG', '2024 Dist': 'DIST',})\n",
    "store_df = store_df.reset_index(drop=True)\n",
    "store_df = store_df.astype({'Last Status Change':'datetime64[ns]'}, errors='ignore')\n",
    "store_df['Last Status Change'] = store_df['Last Status Change'].astype(str).replace({'NaT':None})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d193256",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Pair Code</th>\n",
       "      <th>2025 Div</th>\n",
       "      <th>2025 Reg</th>\n",
       "      <th>2025 Dist</th>\n",
       "      <th>Store</th>\n",
       "      <th>Store Type</th>\n",
       "      <th>Model</th>\n",
       "      <th>Model (Detailed)</th>\n",
       "      <th>Order</th>\n",
       "      <th>Status</th>\n",
       "      <th>Tech Demand Type to Use</th>\n",
       "      <th>RPh Demand Type to Use</th>\n",
       "      <th>Last Status Change</th>\n",
       "      <th>FW</th>\n",
       "      <th>Operating Model</th>\n",
       "      <th>Notes</th>\n",
       "      <th>Master Switch On?</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18013</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18091</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>6450</td>\n",
       "      <td>Core</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>10656</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-004</td>\n",
       "      <td>12</td>\n",
       "      <td>61</td>\n",
       "      <td>22</td>\n",
       "      <td>3742</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Converted</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>See RPh labor tab</td>\n",
       "      <td>2025-03-24</td>\n",
       "      <td>13</td>\n",
       "      <td>Full</td>\n",
       "      <td>RD discussion 8/1/25 - will work w/ DL for ful...</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-033</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>25</td>\n",
       "      <td>16362</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-09-18</td>\n",
       "      <td>38</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>16308</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>17656</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16167</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Wkd</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16203</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>82 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   State     Group Pair Code  2025 Div  2025 Reg  2025 Dist  Store Store Type  \\\n",
       "0     IL   Group 0   GP0-001        12        62         24  18013   Schnucks   \n",
       "1     IL   Group 0   GP0-001        12        62         24  18091   Schnucks   \n",
       "2     IL   Group 0   GP0-002        12        62         21   6450       Core   \n",
       "3     IL   Group 0   GP0-002        12        62         21  10656       Core   \n",
       "4     IL   Group 0   GP0-004        12        61         22   3742       Core   \n",
       "..   ...       ...       ...       ...       ...        ...    ...        ...   \n",
       "77    IL  Group 2a   GP2-033        12        62         25  16362     Target   \n",
       "78    IL  Group 2a   GP2-034        12        62         21  16308     Target   \n",
       "79    IL  Group 2a   GP2-034        12        62         21  17656     Target   \n",
       "80    WA  Group 2a   GP2-051         8        85         24  16167     Target   \n",
       "81    WA  Group 2a   GP2-051         8        85         24  16203     Target   \n",
       "\n",
       "   Model Model (Detailed)  Order        Status Tech Demand Type to Use  \\\n",
       "0     SP               SP    3.0  Steady State                  TeleRx   \n",
       "1    RDP             Full    1.0  Steady State                  TeleRx   \n",
       "2     SP               SP    3.0  Steady State                  TeleRx   \n",
       "3    RDP             Full    1.0  Steady State                  TeleRx   \n",
       "4    RDP             Full    1.0     Converted                  TeleRx   \n",
       "..   ...              ...    ...           ...                     ...   \n",
       "77   RDP             Full    1.0  Steady State                  TeleRx   \n",
       "78    SP               SP    3.0  Steady State                  TeleRx   \n",
       "79   RDP             Full    1.0  Steady State                  TeleRx   \n",
       "80   RDP              Wkd    2.0        Paused                  TeleRx   \n",
       "81    SP               SP    NaN        Paused                  TeleRx   \n",
       "\n",
       "   RPh Demand Type to Use Last Status Change  FW Operating Model  \\\n",
       "0                  TeleRx         2024-01-01   1            Full   \n",
       "1                  TeleRx         2024-01-01   1            Full   \n",
       "2                  TeleRx         2024-01-01   1            Full   \n",
       "3                  TeleRx         2024-01-01   1            Full   \n",
       "4       See RPh labor tab         2025-03-24  13            Full   \n",
       "..                    ...                ...  ..             ...   \n",
       "77                 TeleRx         2024-09-18  38            Full   \n",
       "78                 TeleRx         2024-08-14  33            Full   \n",
       "79                 TeleRx         2024-08-14  33            Full   \n",
       "80                 TeleRx         2025-08-04  32         Weekend   \n",
       "81                 TeleRx         2025-08-04  32         Weekend   \n",
       "\n",
       "                                                Notes Master Switch On?   \n",
       "0                                                 NaN                  Y  \n",
       "1                                                 NaN                  Y  \n",
       "2                                                 NaN                  Y  \n",
       "3                                                 NaN                  Y  \n",
       "4   RD discussion 8/1/25 - will work w/ DL for ful...                  Y  \n",
       "..                                                ...                ...  \n",
       "77                                                NaN                  Y  \n",
       "78                                                NaN                  Y  \n",
       "79                                                NaN                  Y  \n",
       "80  *Was steady-state, on pause to support Rite Ai...                  N  \n",
       "81  *Was steady-state, on pause to support Rite Ai...                  N  \n",
       "\n",
       "[82 rows x 19 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7a15c7c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'18013, 18091, 6450, 10656, 3742, 4781, 10942, 11376, 6539, 6543, 6504, 6508, 10028, 17171, 9328, 16768, 7862, 16355, 10627, 10599, 2663, 10680, 16348, 8634, 8802, 9309, 9266, 10425, 8420, 16295, 10307, 16296, 8366, 17714, 16141, 10007, 9217, 16272, 16699, 17304, 10616, 16174, 3967, 16959, 3500, 16366, 16675, 7, 8914, 9347, 193, 17615, 1719, 16564, 17223, 10184, 5029, 16725, 16700, 17231, 16292, 16593, 9270, 9340, 17437, 17591, 17761, 141, 16529, 16528, 16369, 16412, 16283, 16664, 18089, 16362, 16308, 17656, 16167, 16203'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_nbr_txt = ''\n",
    "for store_nbr in store_df['Store'].unique():\n",
    "    store_nbr_txt = store_nbr_txt+str(store_nbr)+\", \"\n",
    "store_nbr_txt = store_nbr_txt[:-2]\n",
    "store_nbr_txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60939a52",
   "metadata": {},
   "outputs": [],
   "source": [
    "cnxn = teradatasql.connect(host=\"teredwpd.cvs.com\",\n",
    "                             user=user_id,\n",
    "                             password=pw)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5361159b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\c391102\\AppData\\Local\\Temp\\ipykernel_21220\\2253019559.py:14: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  avd_df = pd.read_sql(avd_sql,cnxn)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>rph_hrs_demand_adj</th>\n",
       "      <th>rph_hrs_act_adj</th>\n",
       "      <th>tech_hrs_demand_adj</th>\n",
       "      <th>tech_hrs_act_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>17761</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>140.00</td>\n",
       "      <td>131.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>17714</td>\n",
       "      <td>52.0</td>\n",
       "      <td>52.300000</td>\n",
       "      <td>107.00</td>\n",
       "      <td>38.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18091</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>126.75</td>\n",
       "      <td>106.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18013</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>156.25</td>\n",
       "      <td>132.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18089</td>\n",
       "      <td>64.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>208.16</td>\n",
       "      <td>84.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7195</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17615</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.300003</td>\n",
       "      <td>43.00</td>\n",
       "      <td>39.599998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7196</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17714</td>\n",
       "      <td>66.0</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>42.00</td>\n",
       "      <td>31.700001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7197</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17437</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>71.00</td>\n",
       "      <td>90.300003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7198</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>18091</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>95.00</td>\n",
       "      <td>76.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7199</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>18089</td>\n",
       "      <td>60.0</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>45.50</td>\n",
       "      <td>167.300003</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7200 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      FISCAL_WEEK_NBR  FISCAL_YEAR_NBR  STORE_NBR  rph_hrs_demand_adj  \\\n",
       "0              202538             2025      17761                67.0   \n",
       "1              202538             2025      17714                52.0   \n",
       "2              202538             2025      18091                 7.0   \n",
       "3              202538             2025      18013                75.0   \n",
       "4              202538             2025      18089                64.0   \n",
       "...               ...              ...        ...                 ...   \n",
       "7195           202401             2024      17615                70.0   \n",
       "7196           202401             2024      17714                66.0   \n",
       "7197           202401             2024      17437                71.0   \n",
       "7198           202401             2024      18091                 4.0   \n",
       "7199           202401             2024      18089                60.0   \n",
       "\n",
       "      rph_hrs_act_adj  tech_hrs_demand_adj  tech_hrs_act_adj  \n",
       "0            0.000000               140.00        131.900000  \n",
       "1           52.300000               107.00         38.300000  \n",
       "2            4.000000               126.75        106.700000  \n",
       "3           75.000000               156.25        132.300000  \n",
       "4           64.000000               208.16         84.200000  \n",
       "...               ...                  ...               ...  \n",
       "7195        70.300003                43.00         39.599998  \n",
       "7196        66.000000                42.00         31.700001  \n",
       "7197        71.000000                71.00         90.300003  \n",
       "7198         4.000000                95.00         76.500000  \n",
       "7199        69.000000                45.50        167.300003  \n",
       "\n",
       "[7200 rows x 7 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avd_sql = f'''\n",
    "SELECT DIM_YEAR*100+DIM_WEEK AS FISCAL_WEEK_NBR\n",
    "\t,DIM_YEAR AS FISCAL_YEAR_NBR\n",
    "\t,DIM_STORE AS STORE_NBR\n",
    "\t,RPH_HRS_DEMAND_ADJ\n",
    "\t,RPH_HRS_ACT_ADJ\n",
    "\t,TECH_HRS_DEMAND_ADJ\n",
    "\t,TECH_HRS_ACT_ADJ\n",
    "FROM RXCOE_WFM.AVD_RX_FS AS AVD\n",
    "WHERE dim_year>=2024\n",
    "and DIM_STORE IN ({store_nbr_txt})\n",
    "ORDER BY FISCAL_WEEK_NBR DESC;\n",
    "'''\n",
    "avd_df = pd.read_sql(avd_sql,cnxn)\n",
    "avd_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bf87add5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\snowflake\\connector\\config_manager.py:351: UserWarning: Bad owner or permissions on C:\\Users\\c391102\\.snowflake\\connections.toml\n",
      "  warn(f\"Bad owner or permissions on {str(filep)}{chmod_message}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initiating login request with your identity provider. A browser window should have opened for you to complete the login. If you can't see it, check existing browser windows, or your OS settings. Press CTRL+C to abort and try again...\n",
      "Going to open: https://login.microsoftonline.com/fabb61b8-3afe-4e75-b934-a47f782b8cd7/saml2?SAMLRequest=pZNdb5swFIb%2FCvKuAUPShFohVdaoW7Z0i%2FKlaHcGDokVsImPgba%2FfiYfUnfR3uzCEjLv8fOe89qjh5eycBrQKJSMSeBR4oBMVSbkPiab9ZMbEQcNlxkvlISYvAKSh%2FEIeVlUbFKbg1zCqQY0jj1IIut%2BxKTWkimOApnkJSAzKVtNnucs9CjjiKCNxZFrSYbCsg7GVMz327b12p6n9N4PKaU%2BvfetqpN8Ie8Q1eeMSiujUlXcSl5sTx8gAp%2F2O4RVWMLiWvhVyMsIPqMkFxGy7%2Bv1wl38Xq2JM7l196gk1iXoFehGpLBZzi8G0DpIG3Tt0mC4KKzXzKu0aLiBQsijh1K1ecGPkKqyqo0lePbLzyHzC7UXdm6zaUyqo8hO82esfua75f7HllffpqdDr9ot3laTnRHpBrfNttHLXbSBmqbE2d5SDruUZ4g1zGSXrbFbNLxzA%2BrSYB2GjA4YjbxBL%2FpDnKnNVkhuzpW3Bs4%2BvFKkWqHKjZLWOFxc8iQZBEnk9ngObh%2BGd25y3%2Bu7vD%2FMh1GYRGk29LsEQ3K5RexsRI%2F%2FZzYj%2F%2F1J18v5y%2BY1my5UIdJX50npkpuP4wy84LwjMjc%2FSxmUlj%2FJMg2INtaiUO2jBusjJkbXQPzxhfrvKxj%2FBQ%3D%3D&RelayState=ver%3A1-hint%3A209977584545810-ETMsDgAAAZmhz7b%2BABRBRVMvQ0JDL1BLQ1M1UGFkZGluZwEAABAAEIj2PWn4NSxMtx1MKjtGGbsAAACw5mSjtuSbuweipEW6E3Gn3O84b891qPNZkUl9KzsK%2FplbCDG4%2FPl9HYiLo4nHey9AzXccU0ClQpe9gBGc4%2BqHq2%2FrBpL9k4tuY56MbajirzqwqVNN0mzxuI0JM%2FY9PkNz92USooXiihMRTQ2GSw35RUWhshEcZSQagPvsqTJf3DVL03Elbkin462yHChHRjdYfh8Wmwk%2FUkMcPTFFqKZQUqtkgahDu%2FwlLrH2%2F%2Bn%2FCwoAFEMZkrLAJYMG6dJRGlKB1%2BqLbquU to authenticate...\n"
     ]
    }
   ],
   "source": [
    "database = 'DL_RX_OPERATION'\n",
    "schema = 'RX_OPS_SANDBOX'\n",
    "role = 'GRP-CN-SNOWFLK-PROD-RX-ANALYTICS-BI-SE'\n",
    "table_name = 'TELEPHARMACY_STORE'\n",
    "\n",
    "ctx = snowflake.connector.connect(\n",
    "    authenticator = 'externalbrowser',\n",
    "    user=userName, #youremailgoeshere\n",
    "    password='', #yourpasswordgoeshere\n",
    "    account='cvs-cvsretailprod.privatelink',\n",
    "    warehouse='WH_RX_QUERY_RXANALYTICS_01',\n",
    "    database=database,\n",
    "    schema=schema,\n",
    "    role = role\n",
    "    )\n",
    "cs = ctx.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06564faa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>WECARE_SCORE</th>\n",
       "      <th>WECARE_R4W</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17231</td>\n",
       "      <td>202522</td>\n",
       "      <td>100.0</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>09266</td>\n",
       "      <td>202519</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16355</td>\n",
       "      <td>202535</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>09328</td>\n",
       "      <td>202517</td>\n",
       "      <td>98.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10680</td>\n",
       "      <td>202423</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7275</th>\n",
       "      <td>09217</td>\n",
       "      <td>202441</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7276</th>\n",
       "      <td>17714</td>\n",
       "      <td>202434</td>\n",
       "      <td>96.0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7277</th>\n",
       "      <td>16412</td>\n",
       "      <td>202426</td>\n",
       "      <td>81.0</td>\n",
       "      <td>93.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7278</th>\n",
       "      <td>08802</td>\n",
       "      <td>202414</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7279</th>\n",
       "      <td>17656</td>\n",
       "      <td>202414</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7280 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     STORE_NBR  FISCAL_WEEK_NBR  WECARE_SCORE  WECARE_R4W\n",
       "0        17231           202522         100.0        97.0\n",
       "1        09266           202519         100.0       100.0\n",
       "2        16355           202535         100.0       100.0\n",
       "3        09328           202517          98.0        99.0\n",
       "4        10680           202423         100.0       100.0\n",
       "...        ...              ...           ...         ...\n",
       "7275     09217           202441         100.0       100.0\n",
       "7276     17714           202434          96.0        94.0\n",
       "7277     16412           202426          81.0        93.0\n",
       "7278     08802           202414         100.0       100.0\n",
       "7279     17656           202414         100.0       100.0\n",
       "\n",
       "[7280 rows x 4 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wecare_sql = f'''\n",
    "SELECT STORE_NBR\n",
    "    ,FISCAL_WEEK_NBR\n",
    "    ,WECARE_SCORE\n",
    "    ,WECARE_R4W\n",
    "FROM DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_EXCLUSIONS\n",
    "WHERE STORE_NBR IN ({store_nbr_txt})\n",
    "'''\n",
    "\n",
    "cs.execute(wecare_sql)\n",
    "wecare_df = cs.fetch_pandas_all()\n",
    "wecare_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "21e5d1ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>MTD_POINTS</th>\n",
       "      <th>YTD_POINTS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16528</td>\n",
       "      <td>202402</td>\n",
       "      <td>84</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9217</td>\n",
       "      <td>202401</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8366</td>\n",
       "      <td>202506</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8634</td>\n",
       "      <td>202404</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16292</td>\n",
       "      <td>202408</td>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1675</th>\n",
       "      <td>6450</td>\n",
       "      <td>202503</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1676</th>\n",
       "      <td>9266</td>\n",
       "      <td>202501</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1677</th>\n",
       "      <td>193</td>\n",
       "      <td>202412</td>\n",
       "      <td>84</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1678</th>\n",
       "      <td>16366</td>\n",
       "      <td>202412</td>\n",
       "      <td>100</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>8914</td>\n",
       "      <td>202502</td>\n",
       "      <td>81</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1680 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     STORE_NBR  FISCAL_MONTH_NBR  MTD_POINTS  YTD_POINTS\n",
       "0        16528            202402          84          85\n",
       "1         9217            202401         100         100\n",
       "2         8366            202506         100         100\n",
       "3         8634            202404         100         100\n",
       "4        16292            202408          94          95\n",
       "...        ...               ...         ...         ...\n",
       "1675      6450            202503         100         100\n",
       "1676      9266            202501         100         100\n",
       "1677       193            202412          84          89\n",
       "1678     16366            202412         100          98\n",
       "1679      8914            202502          81          79\n",
       "\n",
       "[1680 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "main_sql_text = f'''\n",
    "SELECT TO_NUMBER(PDF.STORE_NBR) AS STORE_NBR\n",
    "    ,FM.FISCAL_MONTH_NBR\n",
    "    ,WECARE_MTD AS MTD_POINTS\n",
    "    ,WECARE_YTD AS YTD_POINTS\n",
    "FROM DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_EXCLUSIONS AS PDF\n",
    "LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW\n",
    "    ON  PDF.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM\n",
    "    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=PDF.FISCAL_WEEK_NBR\n",
    "WHERE STORE_NBR IN ({store_nbr_txt})\n",
    "'''\n",
    "cs.execute(main_sql_text)\n",
    "wecare_month_df = cs.fetch_pandas_all()\n",
    "wecare_month_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9c77c4dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202601</td>\n",
       "      <td>202601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202602</td>\n",
       "      <td>202601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202603</td>\n",
       "      <td>202601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202604</td>\n",
       "      <td>202601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202605</td>\n",
       "      <td>202602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>202448</td>\n",
       "      <td>202412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>202449</td>\n",
       "      <td>202412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>202450</td>\n",
       "      <td>202412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>202451</td>\n",
       "      <td>202412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>202452</td>\n",
       "      <td>202412</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>208 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     FISCAL_WEEK_NBR  FISCAL_MONTH_NBR\n",
       "0             202601            202601\n",
       "1             202602            202601\n",
       "2             202603            202601\n",
       "3             202604            202601\n",
       "4             202605            202602\n",
       "..               ...               ...\n",
       "203           202448            202412\n",
       "204           202449            202412\n",
       "205           202450            202412\n",
       "206           202451            202412\n",
       "207           202452            202412\n",
       "\n",
       "[208 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_sql = f'''\n",
    "SELECT CAL.FISCAL_WEEK_NBR\n",
    "    ,CAL.FISCAL_MONTH_NBR\n",
    "FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS CAL\n",
    "WHERE CAL.FISCAL_YEAR_NBR>=2024\n",
    "'''\n",
    "\n",
    "cs.execute(cal_sql)\n",
    "cal_df = cs.fetch_pandas_all()\n",
    "cal_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6cb3268d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>RX_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_VACC_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_VACC_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_VACC_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_LTR_NPS</th>\n",
       "      <th>RX_LTR_VACC_NPS</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202428</td>\n",
       "      <td>16528</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>None</td>\n",
       "      <td>0.66666700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202426</td>\n",
       "      <td>8914</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202434</td>\n",
       "      <td>16959</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202433</td>\n",
       "      <td>11376</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202420</td>\n",
       "      <td>16412</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>None</td>\n",
       "      <td>0.75000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6783</th>\n",
       "      <td>202535</td>\n",
       "      <td>16141</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6784</th>\n",
       "      <td>202530</td>\n",
       "      <td>17591</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>None</td>\n",
       "      <td>0.66666700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6785</th>\n",
       "      <td>202443</td>\n",
       "      <td>9270</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6786</th>\n",
       "      <td>202443</td>\n",
       "      <td>10425</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6787</th>\n",
       "      <td>202528</td>\n",
       "      <td>17304</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6788 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      FISCAL_WEEK_NBR  STORE_NBR  RX_LTR_DETRACTORS_SUM  RX_LTR_PROMOTERS_SUM  \\\n",
       "0              202428      16528                      0                     2   \n",
       "1              202426       8914                      0                     1   \n",
       "2              202434      16959                      0                     2   \n",
       "3              202433      11376                      0                     3   \n",
       "4              202420      16412                      0                     3   \n",
       "...               ...        ...                    ...                   ...   \n",
       "6783           202535      16141                      0                     3   \n",
       "6784           202530      17591                      0                     2   \n",
       "6785           202443       9270                      0                     6   \n",
       "6786           202443      10425                      0                     6   \n",
       "6787           202528      17304                      0                     4   \n",
       "\n",
       "      RX_LTR_SURVEYS_SUM  RX_VACC_LTR_DETRACTORS_SUM  \\\n",
       "0                      3                           0   \n",
       "1                      1                           0   \n",
       "2                      2                           0   \n",
       "3                      3                           0   \n",
       "4                      4                           0   \n",
       "...                  ...                         ...   \n",
       "6783                   3                           0   \n",
       "6784                   3                           0   \n",
       "6785                   6                           0   \n",
       "6786                   6                           0   \n",
       "6787                   4                           0   \n",
       "\n",
       "      RX_VACC_LTR_PROMOTERS_SUM  RX_VACC_LTR_SURVEYS_SUM RX_LTR_NPS  \\\n",
       "0                             0                        0   0.666667   \n",
       "1                             0                        0   1.000000   \n",
       "2                             0                        0   1.000000   \n",
       "3                             1                        1   1.000000   \n",
       "4                             0                        0   0.750000   \n",
       "...                         ...                      ...        ...   \n",
       "6783                          0                        0   1.000000   \n",
       "6784                          0                        0   0.666667   \n",
       "6785                          3                        3   1.000000   \n",
       "6786                          0                        0   1.000000   \n",
       "6787                          0                        0   1.000000   \n",
       "\n",
       "     RX_LTR_VACC_NPS RX_BLENDED_NPS  \n",
       "0               None     0.66666700  \n",
       "1               None     1.00000000  \n",
       "2               None     1.00000000  \n",
       "3           1.000000     1.00000000  \n",
       "4               None     0.75000000  \n",
       "...              ...            ...  \n",
       "6783            None     1.00000000  \n",
       "6784            None     0.66666700  \n",
       "6785        1.000000     1.00000000  \n",
       "6786            None     1.00000000  \n",
       "6787            None     1.00000000  \n",
       "\n",
       "[6788 rows x 11 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nps_sql = f'''\n",
    "SELECT CAL.FISCAL_WEEK_NBR\n",
    "    ,NPS.STORE_NO AS STORE_NBR\n",
    "    \n",
    "    ,SUM(NPS.RX_LTR_DETRACTORS) AS RX_LTR_DETRACTORS_SUM\n",
    "    ,SUM(NPS.RX_LTR_PROMOTERS) AS RX_LTR_PROMOTERS_SUM\n",
    "    ,SUM(NPS.RX_LTR_SURVEYS) AS RX_LTR_SURVEYS_SUM\n",
    "    \n",
    "    ,SUM(NPS.RX_VACC_LTR_DETRACTORS) AS RX_VACC_LTR_DETRACTORS_SUM\n",
    "    ,SUM(NPS.RX_VACC_LTR_PROMOTERS) AS RX_VACC_LTR_PROMOTERS_SUM\n",
    "    ,SUM(NPS.RX_VACC_LTR_SURVEYS) AS RX_VACC_LTR_SURVEYS_SUM\n",
    "    \n",
    "    ,CASE WHEN RX_LTR_SURVEYS_SUM>0 THEN (RX_LTR_PROMOTERS_SUM-RX_LTR_DETRACTORS_SUM)/RX_LTR_SURVEYS_SUM END AS RX_LTR_NPS\n",
    "    ,CASE WHEN RX_VACC_LTR_SURVEYS_SUM>0 THEN (RX_VACC_LTR_PROMOTERS_SUM-RX_VACC_LTR_DETRACTORS_SUM)/RX_VACC_LTR_SURVEYS_SUM END AS RX_LTR_VACC_NPS\n",
    "    \n",
    "    ,CASE \n",
    "        WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS \n",
    "        WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS\n",
    "        ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS RX_BLENDED_NPS\n",
    "FROM APP_SOCS.SL_WCR_RPT.VW_MSH_CUR_NPS_60D_DLY AS NPS\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.DAY AS CAL\n",
    "    ON NPS.DATE_DT=CAL.DATE_DT \n",
    "INNER JOIN (SELECT * FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK WHERE END_DT<CURRENT_DATE) AS FW\n",
    "    ON CAL.FISCAL_WEEK_NBR=FW.FISCAL_WEEK_NBR\n",
    "WHERE CAL.FISCAL_YEAR_NBR>=2024\n",
    "    AND NPS.STORE_NO IN ({store_nbr_txt})\n",
    "GROUP BY 1,2\n",
    "'''\n",
    "\n",
    "cs.execute(nps_sql)\n",
    "nps_df = cs.fetch_pandas_all()\n",
    "nps_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "62520c8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>RX_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_VACC_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_VACC_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_VACC_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_LTR_NPS</th>\n",
       "      <th>RX_LTR_VACC_NPS</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202506</td>\n",
       "      <td>16295</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202508</td>\n",
       "      <td>16272</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202410</td>\n",
       "      <td>16959</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202406</td>\n",
       "      <td>16699</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.44000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202402</td>\n",
       "      <td>16725</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.90857152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1588</th>\n",
       "      <td>202501</td>\n",
       "      <td>18089</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>None</td>\n",
       "      <td>0.86666700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1589</th>\n",
       "      <td>202501</td>\n",
       "      <td>9340</td>\n",
       "      <td>6</td>\n",
       "      <td>34</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.65090944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1590</th>\n",
       "      <td>202504</td>\n",
       "      <td>141</td>\n",
       "      <td>3</td>\n",
       "      <td>49</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.807018</td>\n",
       "      <td>None</td>\n",
       "      <td>0.80701800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1591</th>\n",
       "      <td>202504</td>\n",
       "      <td>16700</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>None</td>\n",
       "      <td>0.37500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1592</th>\n",
       "      <td>202507</td>\n",
       "      <td>16141</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1593 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      FISCAL_MONTH_NBR  STORE_NBR  RX_LTR_DETRACTORS_SUM  \\\n",
       "0               202506      16295                      0   \n",
       "1               202508      16272                      0   \n",
       "2               202410      16959                      0   \n",
       "3               202406      16699                      1   \n",
       "4               202402      16725                      1   \n",
       "...                ...        ...                    ...   \n",
       "1588            202501      18089                      1   \n",
       "1589            202501       9340                      6   \n",
       "1590            202504        141                      3   \n",
       "1591            202504      16700                      2   \n",
       "1592            202507      16141                      0   \n",
       "\n",
       "      RX_LTR_PROMOTERS_SUM  RX_LTR_SURVEYS_SUM  RX_VACC_LTR_DETRACTORS_SUM  \\\n",
       "0                        4                   4                           0   \n",
       "1                        2                   2                           0   \n",
       "2                        3                   3                           0   \n",
       "3                        3                   4                           1   \n",
       "4                       20                  21                           0   \n",
       "...                    ...                 ...                         ...   \n",
       "1588                    27                  30                           0   \n",
       "1589                    34                  44                           0   \n",
       "1590                    49                  57                           0   \n",
       "1591                     5                   8                           0   \n",
       "1592                     5                   5                           0   \n",
       "\n",
       "      RX_VACC_LTR_PROMOTERS_SUM  RX_VACC_LTR_SURVEYS_SUM RX_LTR_NPS  \\\n",
       "0                             0                        0   1.000000   \n",
       "1                             0                        0   1.000000   \n",
       "2                             0                        0   1.000000   \n",
       "3                             0                        1   0.500000   \n",
       "4                             4                        4   0.904762   \n",
       "...                         ...                      ...        ...   \n",
       "1588                          0                        0   0.866667   \n",
       "1589                          2                        2   0.636364   \n",
       "1590                          0                        0   0.807018   \n",
       "1591                          0                        0   0.375000   \n",
       "1592                          0                        0   1.000000   \n",
       "\n",
       "     RX_LTR_VACC_NPS RX_BLENDED_NPS  \n",
       "0               None     1.00000000  \n",
       "1               None     1.00000000  \n",
       "2               None     1.00000000  \n",
       "3          -1.000000     0.44000000  \n",
       "4           1.000000     0.90857152  \n",
       "...              ...            ...  \n",
       "1588            None     0.86666700  \n",
       "1589        1.000000     0.65090944  \n",
       "1590            None     0.80701800  \n",
       "1591            None     0.37500000  \n",
       "1592            None     1.00000000  \n",
       "\n",
       "[1593 rows x 11 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "month_nps_sql = f'''\n",
    "SELECT CAL.FISCAL_MONTH_NBR\n",
    "    ,NPS.STORE_NO AS STORE_NBR\n",
    "    \n",
    "    ,SUM(NPS.RX_LTR_DETRACTORS) AS RX_LTR_DETRACTORS_SUM\n",
    "    ,SUM(NPS.RX_LTR_PROMOTERS) AS RX_LTR_PROMOTERS_SUM\n",
    "    ,SUM(NPS.RX_LTR_SURVEYS) AS RX_LTR_SURVEYS_SUM\n",
    "    \n",
    "    ,SUM(NPS.RX_VACC_LTR_DETRACTORS) AS RX_VACC_LTR_DETRACTORS_SUM\n",
    "    ,SUM(NPS.RX_VACC_LTR_PROMOTERS) AS RX_VACC_LTR_PROMOTERS_SUM\n",
    "    ,SUM(NPS.RX_VACC_LTR_SURVEYS) AS RX_VACC_LTR_SURVEYS_SUM\n",
    "    \n",
    "    ,CASE WHEN RX_LTR_SURVEYS_SUM>0 THEN (RX_LTR_PROMOTERS_SUM-RX_LTR_DETRACTORS_SUM)/RX_LTR_SURVEYS_SUM END AS RX_LTR_NPS\n",
    "    ,CASE WHEN RX_VACC_LTR_SURVEYS_SUM>0 THEN (RX_VACC_LTR_PROMOTERS_SUM-RX_VACC_LTR_DETRACTORS_SUM)/RX_VACC_LTR_SURVEYS_SUM END AS RX_LTR_VACC_NPS\n",
    "    \n",
    "    ,CASE \n",
    "        WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS \n",
    "        WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS\n",
    "        ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS RX_BLENDED_NPS\n",
    "FROM APP_SOCS.SL_WCR_RPT.VW_MSH_CUR_NPS_60D_DLY AS NPS\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.DAY AS CAL\n",
    "    ON NPS.DATE_DT=CAL.DATE_DT\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM\n",
    "    ON CAL.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR\n",
    "WHERE CAL.FISCAL_YEAR_NBR>=2024\n",
    "    AND NPS.STORE_NO IN ({store_nbr_txt})\n",
    "    AND FM.END_DT<=CURRENT_DATE-5\n",
    "GROUP BY 1,2\n",
    "'''\n",
    "\n",
    "cs.execute(month_nps_sql)\n",
    "month_nps_df = cs.fetch_pandas_all()\n",
    "month_nps_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7959348a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>RX_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_VACC_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_VACC_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_VACC_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_LTR_NPS</th>\n",
       "      <th>RX_LTR_VACC_NPS</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202506</td>\n",
       "      <td>16295</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>64</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>0.906250</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202508</td>\n",
       "      <td>16272</td>\n",
       "      <td>7</td>\n",
       "      <td>53</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.741935</td>\n",
       "      <td>None</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202410</td>\n",
       "      <td>16959</td>\n",
       "      <td>0</td>\n",
       "      <td>80</td>\n",
       "      <td>83</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>0.963855</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202406</td>\n",
       "      <td>16699</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0.947368</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.44000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202401</td>\n",
       "      <td>11376</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1588</th>\n",
       "      <td>202507</td>\n",
       "      <td>16141</td>\n",
       "      <td>1</td>\n",
       "      <td>112</td>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>0.902439</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1589</th>\n",
       "      <td>202401</td>\n",
       "      <td>16308</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1590</th>\n",
       "      <td>202407</td>\n",
       "      <td>18089</td>\n",
       "      <td>11</td>\n",
       "      <td>207</td>\n",
       "      <td>232</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "      <td>0.844828</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.70222252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1591</th>\n",
       "      <td>202407</td>\n",
       "      <td>16283</td>\n",
       "      <td>9</td>\n",
       "      <td>136</td>\n",
       "      <td>151</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0.841060</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.61904800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1592</th>\n",
       "      <td>202407</td>\n",
       "      <td>17223</td>\n",
       "      <td>2</td>\n",
       "      <td>79</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>0.855556</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>1.00000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1593 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      FISCAL_MONTH_NBR  STORE_NBR  RX_LTR_DETRACTORS_SUM  \\\n",
       "0               202506      16295                      1   \n",
       "1               202508      16272                      7   \n",
       "2               202410      16959                      0   \n",
       "3               202406      16699                      1   \n",
       "4               202401      11376                      0   \n",
       "...                ...        ...                    ...   \n",
       "1588            202507      16141                      1   \n",
       "1589            202401      16308                      0   \n",
       "1590            202407      18089                     11   \n",
       "1591            202407      16283                      9   \n",
       "1592            202407      17223                      2   \n",
       "\n",
       "      RX_LTR_PROMOTERS_SUM  RX_LTR_SURVEYS_SUM  RX_VACC_LTR_DETRACTORS_SUM  \\\n",
       "0                       59                  64                           2   \n",
       "1                       53                  62                           0   \n",
       "2                       80                  83                           0   \n",
       "3                       37                  38                           1   \n",
       "4                        8                   8                           0   \n",
       "...                    ...                 ...                         ...   \n",
       "1588                   112                 123                           0   \n",
       "1589                     8                   8                           0   \n",
       "1590                   207                 232                           0   \n",
       "1591                   136                 151                           0   \n",
       "1592                    79                  90                           0   \n",
       "\n",
       "      RX_VACC_LTR_PROMOTERS_SUM  RX_VACC_LTR_SURVEYS_SUM RX_LTR_NPS  \\\n",
       "0                             9                       12   0.906250   \n",
       "1                             0                        0   0.741935   \n",
       "2                             9                        9   0.963855   \n",
       "3                             3                        4   0.947368   \n",
       "4                             3                        3   1.000000   \n",
       "...                         ...                      ...        ...   \n",
       "1588                         14                       14   0.902439   \n",
       "1589                          1                        1   1.000000   \n",
       "1590                         18                       21   0.844828   \n",
       "1591                          3                        4   0.841060   \n",
       "1592                          5                        7   0.855556   \n",
       "\n",
       "     RX_LTR_VACC_NPS RX_BLENDED_NPS  \n",
       "0           0.583333     1.00000000  \n",
       "1               None     1.00000000  \n",
       "2           1.000000     1.00000000  \n",
       "3           0.500000     0.44000000  \n",
       "4           1.000000     1.00000000  \n",
       "...              ...            ...  \n",
       "1588        1.000000     1.00000000  \n",
       "1589        1.000000     1.00000000  \n",
       "1590        0.857143     0.70222252  \n",
       "1591        0.750000     0.61904800  \n",
       "1592        0.714286     1.00000000  \n",
       "\n",
       "[1593 rows x 11 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ytd_nps_sql = f'''\n",
    "WITH MTD_AGG AS (\n",
    "SELECT CAL.FISCAL_MONTH_NBR\n",
    "    ,NPS.STORE_NO AS STORE_NBR\n",
    "    \n",
    "    ,SUM(NPS.RX_LTR_DETRACTORS) AS RX_LTR_DETRACTORS_S\n",
    "    ,SUM(NPS.RX_LTR_PROMOTERS) AS RX_LTR_PROMOTERS_S\n",
    "    ,SUM(NPS.RX_LTR_SURVEYS) AS RX_LTR_SURVEYS_S\n",
    "    \n",
    "    ,SUM(NPS.RX_VACC_LTR_DETRACTORS) AS RX_VACC_LTR_DETRACTORS_S\n",
    "    ,SUM(NPS.RX_VACC_LTR_PROMOTERS) AS RX_VACC_LTR_PROMOTERS_S\n",
    "    ,SUM(NPS.RX_VACC_LTR_SURVEYS) AS RX_VACC_LTR_SURVEYS_S\n",
    "    \n",
    "    ,CASE WHEN RX_LTR_SURVEYS_S>0 THEN (RX_LTR_PROMOTERS_S-RX_LTR_DETRACTORS_S)/RX_LTR_SURVEYS_S END AS RX_LTR_NPS\n",
    "    ,CASE WHEN RX_VACC_LTR_SURVEYS_S>0 THEN (RX_VACC_LTR_PROMOTERS_S-RX_VACC_LTR_DETRACTORS_S)/RX_VACC_LTR_SURVEYS_S END AS RX_LTR_VACC_NPS\n",
    "    \n",
    "    ,CASE \n",
    "        WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS \n",
    "        WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS\n",
    "        ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS RX_BLENDED_NPS\n",
    "FROM APP_SOCS.SL_WCR_RPT.VW_MSH_CUR_NPS_60D_DLY AS NPS\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.DAY AS CAL\n",
    "    ON NPS.DATE_DT=CAL.DATE_DT\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM\n",
    "    ON CAL.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR\n",
    "WHERE CAL.FISCAL_YEAR_NBR>=2024\n",
    "    AND NPS.STORE_NO IN ({store_nbr_txt})\n",
    "    AND FM.END_DT<=CURRENT_DATE-5\n",
    "GROUP BY 1,2\n",
    ")\n",
    "SELECT  FISCAL_MONTH_NBR\n",
    "        ,STORE_NBR\n",
    "\n",
    "        ,SUM(NPS.RX_LTR_DETRACTORS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_LTR_DETRACTORS_SUM\n",
    "        ,SUM(NPS.RX_LTR_PROMOTERS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_LTR_PROMOTERS_SUM\n",
    "        ,SUM(NPS.RX_LTR_SURVEYS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_LTR_SURVEYS_SUM\n",
    "    \n",
    "        ,SUM(NPS.RX_VACC_LTR_DETRACTORS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_VACC_LTR_DETRACTORS_SUM\n",
    "        ,SUM(NPS.RX_VACC_LTR_PROMOTERS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_VACC_LTR_PROMOTERS_SUM\n",
    "        ,SUM(NPS.RX_VACC_LTR_SURVEYS_S) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RX_VACC_LTR_SURVEYS_SUM\n",
    "    \n",
    "        ,CASE WHEN RX_LTR_SURVEYS_SUM>0 THEN (RX_LTR_PROMOTERS_SUM-RX_LTR_DETRACTORS_SUM)/RX_LTR_SURVEYS_SUM END AS RX_LTR_NPS\n",
    "        ,CASE WHEN RX_VACC_LTR_SURVEYS_SUM>0 THEN (RX_VACC_LTR_PROMOTERS_SUM-RX_VACC_LTR_DETRACTORS_SUM)/RX_VACC_LTR_SURVEYS_SUM END AS RX_LTR_VACC_NPS\n",
    "    \n",
    "        ,CASE \n",
    "            WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS \n",
    "            WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS\n",
    "            ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS RX_BLENDED_NPS\n",
    "        \n",
    "FROM   MTD_AGG AS NPS\n",
    "'''\n",
    "\n",
    "cs.execute(ytd_nps_sql)\n",
    "ytd_nps_df = cs.fetch_pandas_all()\n",
    "ytd_nps_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2b735843",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>OPI_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10425</td>\n",
       "      <td>2025</td>\n",
       "      <td>202505</td>\n",
       "      <td>88.822500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10425</td>\n",
       "      <td>2024</td>\n",
       "      <td>202401</td>\n",
       "      <td>94.148936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10425</td>\n",
       "      <td>2024</td>\n",
       "      <td>202408</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10425</td>\n",
       "      <td>2025</td>\n",
       "      <td>202503</td>\n",
       "      <td>79.452128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10425</td>\n",
       "      <td>2025</td>\n",
       "      <td>202507</td>\n",
       "      <td>85.880000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1595</th>\n",
       "      <td>193</td>\n",
       "      <td>2024</td>\n",
       "      <td>202406</td>\n",
       "      <td>81.729450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1596</th>\n",
       "      <td>193</td>\n",
       "      <td>2024</td>\n",
       "      <td>202410</td>\n",
       "      <td>99.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1597</th>\n",
       "      <td>193</td>\n",
       "      <td>2025</td>\n",
       "      <td>202505</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1598</th>\n",
       "      <td>193</td>\n",
       "      <td>2024</td>\n",
       "      <td>202404</td>\n",
       "      <td>92.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1599</th>\n",
       "      <td>193</td>\n",
       "      <td>2025</td>\n",
       "      <td>202501</td>\n",
       "      <td>94.149000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1600 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      STORE_NBR FISCAL_YEAR_NBR  FISCAL_MONTH_NBR   OPI_SCORE\n",
       "0         10425            2025            202505   88.822500\n",
       "1         10425            2024            202401   94.148936\n",
       "2         10425            2024            202408  100.000000\n",
       "3         10425            2025            202503   79.452128\n",
       "4         10425            2025            202507   85.880000\n",
       "...         ...             ...               ...         ...\n",
       "1595        193            2024            202406   81.729450\n",
       "1596        193            2024            202410   99.000000\n",
       "1597        193            2025            202505  100.000000\n",
       "1598        193            2024            202404   92.150000\n",
       "1599        193            2025            202501   94.149000\n",
       "\n",
       "[1600 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opi_sql = f'''\n",
    "SELECT OPI.STORE_ID AS STORE_NBR\n",
    "    , left(OPI.YEAR_MONTH, 4) AS FISCAL_YEAR_NBR\n",
    "    , OPI.YEAR_MONTH AS FISCAL_MONTH_NBR\n",
    "    , OPI.NUMERATOR AS OPI_SCORE\n",
    "    , AVG(OPI_SCORE) OVER(PARTITION BY FISCAL_YEAR_NBR, STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS OPI_SCORE_YTD\n",
    "FROM APP_SOCS.SL_SOCS_RPT.COMPLIANCE_METRICS_FACT AS OPI\n",
    "WHERE STORE_ID IN ({store_nbr_txt})\n",
    "    AND YEAR_MONTH >= 202401 \n",
    "    AND METRIC_CODE IN ('MA003') -- OPI Metric indicators\n",
    "'''\n",
    "cs.execute(opi_sql)\n",
    "opi_df = cs.fetch_pandas_all()\n",
    "\n",
    "opi_ytd_df = opi_df[['STORE_NBR', 'FISCAL_YEAR_NBR', 'FISCAL_MONTH_NBR', 'OPI_SCORE_YTD']]\n",
    "opi_df = opi_df[['STORE_NBR', 'FISCAL_YEAR_NBR', 'FISCAL_MONTH_NBR', 'OPI_SCORE']]\n",
    "opi_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "42f4565c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>IMZ_SUCCESS_RATE_MPC</th>\n",
       "      <th>PCAP_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>PTO_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>MPNTH_MPC_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16564</td>\n",
       "      <td>202503</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>14</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6504</td>\n",
       "      <td>202502</td>\n",
       "      <td>59.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6508</td>\n",
       "      <td>202502</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>15</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17437</td>\n",
       "      <td>202509</td>\n",
       "      <td>64.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17437</td>\n",
       "      <td>202505</td>\n",
       "      <td>52.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>9270</td>\n",
       "      <td>202502</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>716</th>\n",
       "      <td>9309</td>\n",
       "      <td>202507</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>717</th>\n",
       "      <td>10184</td>\n",
       "      <td>202509</td>\n",
       "      <td>70.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>718</th>\n",
       "      <td>7862</td>\n",
       "      <td>202501</td>\n",
       "      <td>42.0</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>719</th>\n",
       "      <td>8802</td>\n",
       "      <td>202504</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>13</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>720 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     STORE_NBR  FISCAL_MONTH_NBR  IMZ_SUCCESS_RATE_MPC  \\\n",
       "0        16564            202503                   NaN   \n",
       "1         6504            202502                  59.0   \n",
       "2         6508            202502                   NaN   \n",
       "3        17437            202509                  64.0   \n",
       "4        17437            202505                  52.0   \n",
       "..         ...               ...                   ...   \n",
       "715       9270            202502                   NaN   \n",
       "716       9309            202507                   0.0   \n",
       "717      10184            202509                  70.0   \n",
       "718       7862            202501                  42.0   \n",
       "719       8802            202504                   0.0   \n",
       "\n",
       "     PCAP_TOTAL_SUCCESS_RATE_MPC  PTO_TOTAL_SUCCESS_RATE_MPC MPNTH_MPC_SCORE  \n",
       "0                             30                          14              68  \n",
       "1                             30                          30             119  \n",
       "2                             30                          15              69  \n",
       "3                             30                          30             124  \n",
       "4                             30                          30             112  \n",
       "..                           ...                         ...             ...  \n",
       "715                           30                          30              92  \n",
       "716                           30                          23              53  \n",
       "717                           30                          30             130  \n",
       "718                           30                          29             101  \n",
       "719                           30                          13              43  \n",
       "\n",
       "[720 rows x 6 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mpc_sql = f'''\n",
    "SELECT  MPC.STORE_NO AS STORE_NBR,\n",
    "        MPC.FISCAL_MONTH_NBR,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'IMZ_SUCCESS_RATE' THEN MPC_SCORE END) AS IMZ_SUCCESS_RATE_MPC,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PCAP_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PCAP_TOTAL_SUCCESS_RATE_MPC,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PTO_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PTO_TOTAL_SUCCESS_RATE_MPC,\n",
    "        ROUND(100*((zeroifnull(IMZ_SUCCESS_RATE_MPC) + zeroifnull(PCAP_TOTAL_SUCCESS_RATE_MPC) + zeroifnull(PTO_TOTAL_SUCCESS_RATE_MPC))/ NULLIFZERO((CASE WHEN IMZ_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END) + (CASE WHEN PCAP_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 30 END)+ (CASE WHEN PTO_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END))),0) AS MPNTH_MPC_SCORE\n",
    "FROM    APP_RTL_RONBA.SOPS_MPC_RPT.RPT_MPC_STORE_WEEK_MTD AS MPC\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH FM\n",
    "    ON MPC.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR\n",
    "        AND MPC.FISCAL_WEEK_NBR=FM.END_WEEK_NBR\n",
    "WHERE STORE_NO IN ({store_nbr_txt})\n",
    "    AND MPC.FISCAL_MONTH_NBR >= 202401\n",
    "    AND COMPONENT_METRIC_NAME IN ('IMZ_SUCCESS_RATE', 'PCAP_TOTAL_SUCCESS_RATE','PTO_TOTAL_SUCCESS_RATE')\n",
    "GROUP BY 1,2\n",
    "'''\n",
    "cs.execute(mpc_sql)\n",
    "mpc_df = cs.fetch_pandas_all()\n",
    "mpc_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e239e38b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>IMZ_SUCCESS_RATE_MPC</th>\n",
       "      <th>PCAP_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>PTO_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>MPNTH_MPC_SCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5029</td>\n",
       "      <td>202507</td>\n",
       "      <td>41.0</td>\n",
       "      <td>30</td>\n",
       "      <td>7</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16959</td>\n",
       "      <td>202504</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>16</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10627</td>\n",
       "      <td>202503</td>\n",
       "      <td>26.0</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16203</td>\n",
       "      <td>202503</td>\n",
       "      <td>70.0</td>\n",
       "      <td>30</td>\n",
       "      <td>15</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16699</td>\n",
       "      <td>202502</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>6504</td>\n",
       "      <td>202505</td>\n",
       "      <td>32.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>716</th>\n",
       "      <td>141</td>\n",
       "      <td>202506</td>\n",
       "      <td>70.0</td>\n",
       "      <td>30</td>\n",
       "      <td>8</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>717</th>\n",
       "      <td>16528</td>\n",
       "      <td>202503</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>18</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>718</th>\n",
       "      <td>16528</td>\n",
       "      <td>202501</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>27</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>719</th>\n",
       "      <td>10184</td>\n",
       "      <td>202509</td>\n",
       "      <td>70.0</td>\n",
       "      <td>30</td>\n",
       "      <td>24</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>720 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     STORE_NBR  FISCAL_MONTH_NBR  IMZ_SUCCESS_RATE_MPC  \\\n",
       "0         5029            202507                  41.0   \n",
       "1        16959            202504                   NaN   \n",
       "2        10627            202503                  26.0   \n",
       "3        16203            202503                  70.0   \n",
       "4        16699            202502                   0.0   \n",
       "..         ...               ...                   ...   \n",
       "715       6504            202505                  32.0   \n",
       "716        141            202506                  70.0   \n",
       "717      16528            202503                   NaN   \n",
       "718      16528            202501                   NaN   \n",
       "719      10184            202509                  70.0   \n",
       "\n",
       "     PCAP_TOTAL_SUCCESS_RATE_MPC  PTO_TOTAL_SUCCESS_RATE_MPC MPNTH_MPC_SCORE  \n",
       "0                             30                           7              78  \n",
       "1                             30                          16              71  \n",
       "2                             30                          23              79  \n",
       "3                             30                          15             115  \n",
       "4                             30                          30              60  \n",
       "..                           ...                         ...             ...  \n",
       "715                           30                          30              92  \n",
       "716                           30                           8             108  \n",
       "717                           30                          18              74  \n",
       "718                           30                          27              88  \n",
       "719                           30                          24             124  \n",
       "\n",
       "[720 rows x 6 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mpc_ytd_sql = f'''\n",
    "SELECT  MPC.STORE_NO AS STORE_NBR,\n",
    "        MPC.FISCAL_MONTH_NBR,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'IMZ_SUCCESS_RATE' THEN MPC_SCORE END) AS IMZ_SUCCESS_RATE_MPC,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PCAP_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PCAP_TOTAL_SUCCESS_RATE_MPC,\n",
    "        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PTO_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PTO_TOTAL_SUCCESS_RATE_MPC,\n",
    "        ROUND(100*((zeroifnull(IMZ_SUCCESS_RATE_MPC) + zeroifnull(PCAP_TOTAL_SUCCESS_RATE_MPC) + zeroifnull(PTO_TOTAL_SUCCESS_RATE_MPC))/ ((CASE WHEN IMZ_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END) + (CASE WHEN PCAP_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 30 END)+ (CASE WHEN PTO_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END))),0) AS MPNTH_MPC_SCORE\n",
    "FROM    APP_RTL_RONBA.SOPS_MPC_RPT.RPT_MPC_STORE_WEEK_YTD AS MPC\n",
    "INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH FM\n",
    "    ON MPC.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR\n",
    "        AND MPC.FISCAL_WEEK_NBR=FM.END_WEEK_NBR\n",
    "WHERE STORE_NO IN ({store_nbr_txt})\n",
    "    AND MPC.FISCAL_MONTH_NBR >= 202401\n",
    "    AND COMPONENT_METRIC_NAME IN ('IMZ_SUCCESS_RATE', 'PCAP_TOTAL_SUCCESS_RATE','PTO_TOTAL_SUCCESS_RATE')\n",
    "GROUP BY 1,2\n",
    "'''\n",
    "cs.execute(mpc_ytd_sql)\n",
    "mpc_ytd_df = cs.fetch_pandas_all()\n",
    "mpc_ytd_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "49ec896d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dim_store_sql = f'''\n",
    "# SELECT  *\n",
    "# FROM CORE_RX.CURATED_LOCATION.STORE\n",
    "# '''\n",
    "# cs.execute(dim_store_sql)\n",
    "# dim_store_df = cs.fetch_pandas_all()\n",
    "# dim_store_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "088414d0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Pair Code</th>\n",
       "      <th>2025 Div</th>\n",
       "      <th>2025 Reg</th>\n",
       "      <th>2025 Dist</th>\n",
       "      <th>Store</th>\n",
       "      <th>Store Type</th>\n",
       "      <th>Model</th>\n",
       "      <th>Model (Detailed)</th>\n",
       "      <th>Order</th>\n",
       "      <th>Status</th>\n",
       "      <th>Tech Demand Type to Use</th>\n",
       "      <th>RPh Demand Type to Use</th>\n",
       "      <th>Last Status Change</th>\n",
       "      <th>FW</th>\n",
       "      <th>Operating Model</th>\n",
       "      <th>Notes</th>\n",
       "      <th>Master Switch On?</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18013</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18091</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>6450</td>\n",
       "      <td>Core</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>10656</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-004</td>\n",
       "      <td>12</td>\n",
       "      <td>61</td>\n",
       "      <td>22</td>\n",
       "      <td>3742</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Converted</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>See RPh labor tab</td>\n",
       "      <td>2025-03-24</td>\n",
       "      <td>13</td>\n",
       "      <td>Full</td>\n",
       "      <td>RD discussion 8/1/25 - will work w/ DL for ful...</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-033</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>25</td>\n",
       "      <td>16362</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-09-18</td>\n",
       "      <td>38</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>16308</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>17656</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16167</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Wkd</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16203</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>82 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   State     Group Pair Code  2025 Div  2025 Reg  2025 Dist  Store Store Type  \\\n",
       "0     IL   Group 0   GP0-001        12        62         24  18013   Schnucks   \n",
       "1     IL   Group 0   GP0-001        12        62         24  18091   Schnucks   \n",
       "2     IL   Group 0   GP0-002        12        62         21   6450       Core   \n",
       "3     IL   Group 0   GP0-002        12        62         21  10656       Core   \n",
       "4     IL   Group 0   GP0-004        12        61         22   3742       Core   \n",
       "..   ...       ...       ...       ...       ...        ...    ...        ...   \n",
       "77    IL  Group 2a   GP2-033        12        62         25  16362     Target   \n",
       "78    IL  Group 2a   GP2-034        12        62         21  16308     Target   \n",
       "79    IL  Group 2a   GP2-034        12        62         21  17656     Target   \n",
       "80    WA  Group 2a   GP2-051         8        85         24  16167     Target   \n",
       "81    WA  Group 2a   GP2-051         8        85         24  16203     Target   \n",
       "\n",
       "   Model Model (Detailed)  Order        Status Tech Demand Type to Use  \\\n",
       "0     SP               SP    3.0  Steady State                  TeleRx   \n",
       "1    RDP             Full    1.0  Steady State                  TeleRx   \n",
       "2     SP               SP    3.0  Steady State                  TeleRx   \n",
       "3    RDP             Full    1.0  Steady State                  TeleRx   \n",
       "4    RDP             Full    1.0     Converted                  TeleRx   \n",
       "..   ...              ...    ...           ...                     ...   \n",
       "77   RDP             Full    1.0  Steady State                  TeleRx   \n",
       "78    SP               SP    3.0  Steady State                  TeleRx   \n",
       "79   RDP             Full    1.0  Steady State                  TeleRx   \n",
       "80   RDP              Wkd    2.0        Paused                  TeleRx   \n",
       "81    SP               SP    NaN        Paused                  TeleRx   \n",
       "\n",
       "   RPh Demand Type to Use Last Status Change  FW Operating Model  \\\n",
       "0                  TeleRx         2024-01-01   1            Full   \n",
       "1                  TeleRx         2024-01-01   1            Full   \n",
       "2                  TeleRx         2024-01-01   1            Full   \n",
       "3                  TeleRx         2024-01-01   1            Full   \n",
       "4       See RPh labor tab         2025-03-24  13            Full   \n",
       "..                    ...                ...  ..             ...   \n",
       "77                 TeleRx         2024-09-18  38            Full   \n",
       "78                 TeleRx         2024-08-14  33            Full   \n",
       "79                 TeleRx         2024-08-14  33            Full   \n",
       "80                 TeleRx         2025-08-04  32         Weekend   \n",
       "81                 TeleRx         2025-08-04  32         Weekend   \n",
       "\n",
       "                                                Notes Master Switch On?   \n",
       "0                                                 NaN                  Y  \n",
       "1                                                 NaN                  Y  \n",
       "2                                                 NaN                  Y  \n",
       "3                                                 NaN                  Y  \n",
       "4   RD discussion 8/1/25 - will work w/ DL for ful...                  Y  \n",
       "..                                                ...                ...  \n",
       "77                                                NaN                  Y  \n",
       "78                                                NaN                  Y  \n",
       "79                                                NaN                  Y  \n",
       "80  *Was steady-state, on pause to support Rite Ai...                  N  \n",
       "81  *Was steady-state, on pause to support Rite Ai...                  N  \n",
       "\n",
       "[82 rows x 19 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>rph_hrs_demand_adj</th>\n",
       "      <th>rph_hrs_act_adj</th>\n",
       "      <th>tech_hrs_demand_adj</th>\n",
       "      <th>tech_hrs_act_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>17761</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>140.00</td>\n",
       "      <td>131.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>17714</td>\n",
       "      <td>52.0</td>\n",
       "      <td>52.300000</td>\n",
       "      <td>107.00</td>\n",
       "      <td>38.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18091</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>126.75</td>\n",
       "      <td>106.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18013</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>156.25</td>\n",
       "      <td>132.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202538</td>\n",
       "      <td>2025</td>\n",
       "      <td>18089</td>\n",
       "      <td>64.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>208.16</td>\n",
       "      <td>84.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7195</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17615</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.300003</td>\n",
       "      <td>43.00</td>\n",
       "      <td>39.599998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7196</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17714</td>\n",
       "      <td>66.0</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>42.00</td>\n",
       "      <td>31.700001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7197</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>17437</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>71.00</td>\n",
       "      <td>90.300003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7198</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>18091</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>95.00</td>\n",
       "      <td>76.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7199</th>\n",
       "      <td>202401</td>\n",
       "      <td>2024</td>\n",
       "      <td>18089</td>\n",
       "      <td>60.0</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>45.50</td>\n",
       "      <td>167.300003</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7200 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      FISCAL_WEEK_NBR  FISCAL_YEAR_NBR  STORE_NBR  rph_hrs_demand_adj  \\\n",
       "0              202538             2025      17761                67.0   \n",
       "1              202538             2025      17714                52.0   \n",
       "2              202538             2025      18091                 7.0   \n",
       "3              202538             2025      18013                75.0   \n",
       "4              202538             2025      18089                64.0   \n",
       "...               ...              ...        ...                 ...   \n",
       "7195           202401             2024      17615                70.0   \n",
       "7196           202401             2024      17714                66.0   \n",
       "7197           202401             2024      17437                71.0   \n",
       "7198           202401             2024      18091                 4.0   \n",
       "7199           202401             2024      18089                60.0   \n",
       "\n",
       "      rph_hrs_act_adj  tech_hrs_demand_adj  tech_hrs_act_adj  \n",
       "0            0.000000               140.00        131.900000  \n",
       "1           52.300000               107.00         38.300000  \n",
       "2            4.000000               126.75        106.700000  \n",
       "3           75.000000               156.25        132.300000  \n",
       "4           64.000000               208.16         84.200000  \n",
       "...               ...                  ...               ...  \n",
       "7195        70.300003                43.00         39.599998  \n",
       "7196        66.000000                42.00         31.700001  \n",
       "7197        71.000000                71.00         90.300003  \n",
       "7198         4.000000                95.00         76.500000  \n",
       "7199        69.000000                45.50        167.300003  \n",
       "\n",
       "[7200 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>WECARE_SCORE</th>\n",
       "      <th>WECARE_R4W</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17231</td>\n",
       "      <td>202522</td>\n",
       "      <td>100.0</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>09266</td>\n",
       "      <td>202519</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16355</td>\n",
       "      <td>202535</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>09328</td>\n",
       "      <td>202517</td>\n",
       "      <td>98.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10680</td>\n",
       "      <td>202423</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7275</th>\n",
       "      <td>09217</td>\n",
       "      <td>202441</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7276</th>\n",
       "      <td>17714</td>\n",
       "      <td>202434</td>\n",
       "      <td>96.0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7277</th>\n",
       "      <td>16412</td>\n",
       "      <td>202426</td>\n",
       "      <td>81.0</td>\n",
       "      <td>93.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7278</th>\n",
       "      <td>08802</td>\n",
       "      <td>202414</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7279</th>\n",
       "      <td>17656</td>\n",
       "      <td>202414</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7280 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     STORE_NBR  FISCAL_WEEK_NBR  WECARE_SCORE  WECARE_R4W\n",
       "0        17231           202522         100.0        97.0\n",
       "1        09266           202519         100.0       100.0\n",
       "2        16355           202535         100.0       100.0\n",
       "3        09328           202517          98.0        99.0\n",
       "4        10680           202423         100.0       100.0\n",
       "...        ...              ...           ...         ...\n",
       "7275     09217           202441         100.0       100.0\n",
       "7276     17714           202434          96.0        94.0\n",
       "7277     16412           202426          81.0        93.0\n",
       "7278     08802           202414         100.0       100.0\n",
       "7279     17656           202414         100.0       100.0\n",
       "\n",
       "[7280 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(store_df)\n",
    "display(avd_df)\n",
    "display(wecare_df)\n",
    "#display(nps_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "af5f452b",
   "metadata": {},
   "outputs": [],
   "source": [
    "wecare_df['STORE_NBR'] = wecare_df['STORE_NBR'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d18c52f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "nps_df.loc[nps_df['RX_LTR_VACC_NPS'].isna(), 'RX_LTR_VACC_NPS'] = np.nan \n",
    "nps_df['RX_LTR_NPS'] = nps_df['RX_LTR_NPS'].astype(float)\n",
    "nps_df['RX_LTR_VACC_NPS'] = nps_df['RX_LTR_VACC_NPS'].astype(float)\n",
    "nps_df['RX_BLENDED_NPS'] = nps_df['RX_BLENDED_NPS'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "28bb37d8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_WEEK_NBR</th>\n",
       "      <th>WECARE_SCORE</th>\n",
       "      <th>WECARE_R4W</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>RPH_HRS_DEMAND_ADJ</th>\n",
       "      <th>RPH_HRS_ACT_ADJ</th>\n",
       "      <th>TECH_HRS_DEMAND_ADJ</th>\n",
       "      <th>TECH_HRS_ACT_ADJ</th>\n",
       "      <th>RX_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_VACC_LTR_DETRACTORS_SUM</th>\n",
       "      <th>RX_VACC_LTR_PROMOTERS_SUM</th>\n",
       "      <th>RX_VACC_LTR_SURVEYS_SUM</th>\n",
       "      <th>RX_LTR_NPS</th>\n",
       "      <th>RX_LTR_VACC_NPS</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>202401</td>\n",
       "      <td>98.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>167.00</td>\n",
       "      <td>168.199997</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>202402</td>\n",
       "      <td>98.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>72.400002</td>\n",
       "      <td>187.00</td>\n",
       "      <td>179.399994</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.986667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>202403</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>71.900002</td>\n",
       "      <td>165.00</td>\n",
       "      <td>177.199997</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>202404</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>181.00</td>\n",
       "      <td>177.600006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>202405</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>196.50</td>\n",
       "      <td>211.800003</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7275</th>\n",
       "      <td>18091</td>\n",
       "      <td>202535</td>\n",
       "      <td>98.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>2025.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>113.00</td>\n",
       "      <td>85.900000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7276</th>\n",
       "      <td>18091</td>\n",
       "      <td>202536</td>\n",
       "      <td>100.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>2025.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>121.50</td>\n",
       "      <td>76.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7277</th>\n",
       "      <td>18091</td>\n",
       "      <td>202537</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2025.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>125.25</td>\n",
       "      <td>111.100000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7278</th>\n",
       "      <td>18091</td>\n",
       "      <td>202538</td>\n",
       "      <td>92.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>2025.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>126.75</td>\n",
       "      <td>106.700000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7279</th>\n",
       "      <td>18091</td>\n",
       "      <td>202539</td>\n",
       "      <td>74.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7280 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      STORE_NBR  FISCAL_WEEK_NBR  WECARE_SCORE  WECARE_R4W  FISCAL_YEAR_NBR  \\\n",
       "0             7           202401          98.0        98.0           2024.0   \n",
       "1             7           202402          98.0        98.0           2024.0   \n",
       "2             7           202403         100.0       100.0           2024.0   \n",
       "3             7           202404         100.0       100.0           2024.0   \n",
       "4             7           202405         100.0       100.0           2024.0   \n",
       "...         ...              ...           ...         ...              ...   \n",
       "7275      18091           202535          98.0        92.0           2025.0   \n",
       "7276      18091           202536         100.0        99.0           2025.0   \n",
       "7277      18091           202537         100.0       100.0           2025.0   \n",
       "7278      18091           202538          92.0       100.0           2025.0   \n",
       "7279      18091           202539          74.0        99.0              NaN   \n",
       "\n",
       "      RPH_HRS_DEMAND_ADJ  RPH_HRS_ACT_ADJ  TECH_HRS_DEMAND_ADJ  \\\n",
       "0                   69.0        80.000000               167.00   \n",
       "1                   72.0        72.400002               187.00   \n",
       "2                   72.0        71.900002               165.00   \n",
       "3                   72.0        72.000000               181.00   \n",
       "4                   72.0        75.000000               196.50   \n",
       "...                  ...              ...                  ...   \n",
       "7275                 4.0         0.000000               113.00   \n",
       "7276                 4.0         4.000000               121.50   \n",
       "7277                 4.0         4.000000               125.25   \n",
       "7278                 7.0         4.000000               126.75   \n",
       "7279                 NaN              NaN                  NaN   \n",
       "\n",
       "      TECH_HRS_ACT_ADJ  RX_LTR_DETRACTORS_SUM  RX_LTR_PROMOTERS_SUM  \\\n",
       "0           168.199997                    0.0                   9.0   \n",
       "1           179.399994                    0.0                  11.0   \n",
       "2           177.199997                    2.0                   4.0   \n",
       "3           177.600006                    0.0                   8.0   \n",
       "4           211.800003                    0.0                   5.0   \n",
       "...                ...                    ...                   ...   \n",
       "7275         85.900000                    0.0                   1.0   \n",
       "7276         76.600000                    NaN                   NaN   \n",
       "7277        111.100000                    0.0                   4.0   \n",
       "7278        106.700000                    NaN                   NaN   \n",
       "7279               NaN                    0.0                   2.0   \n",
       "\n",
       "      RX_LTR_SURVEYS_SUM  RX_VACC_LTR_DETRACTORS_SUM  \\\n",
       "0                   10.0                         0.0   \n",
       "1                   11.0                         0.0   \n",
       "2                   10.0                         0.0   \n",
       "3                   11.0                         0.0   \n",
       "4                    5.0                         0.0   \n",
       "...                  ...                         ...   \n",
       "7275                 1.0                         0.0   \n",
       "7276                 NaN                         NaN   \n",
       "7277                 4.0                         0.0   \n",
       "7278                 NaN                         NaN   \n",
       "7279                 2.0                         0.0   \n",
       "\n",
       "      RX_VACC_LTR_PROMOTERS_SUM  RX_VACC_LTR_SURVEYS_SUM  RX_LTR_NPS  \\\n",
       "0                           0.0                      0.0    0.900000   \n",
       "1                           2.0                      3.0    1.000000   \n",
       "2                           0.0                      0.0    0.200000   \n",
       "3                           0.0                      0.0    0.727273   \n",
       "4                           0.0                      0.0    1.000000   \n",
       "...                         ...                      ...         ...   \n",
       "7275                        0.0                      0.0    1.000000   \n",
       "7276                        NaN                      NaN         NaN   \n",
       "7277                        0.0                      0.0    1.000000   \n",
       "7278                        NaN                      NaN         NaN   \n",
       "7279                        0.0                      0.0    1.000000   \n",
       "\n",
       "      RX_LTR_VACC_NPS  RX_BLENDED_NPS  \n",
       "0                 NaN        0.900000  \n",
       "1            0.666667        0.986667  \n",
       "2                 NaN        0.200000  \n",
       "3                 NaN        0.727273  \n",
       "4                 NaN        1.000000  \n",
       "...               ...             ...  \n",
       "7275              NaN        1.000000  \n",
       "7276              NaN             NaN  \n",
       "7277              NaN        1.000000  \n",
       "7278              NaN             NaN  \n",
       "7279              NaN        1.000000  \n",
       "\n",
       "[7280 rows x 18 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weekly_df = wecare_df.merge(avd_df, on=['STORE_NBR', 'FISCAL_WEEK_NBR'], how='outer')\n",
    "weekly_df = weekly_df.merge(nps_df, on=['STORE_NBR', 'FISCAL_WEEK_NBR'], how='outer')\n",
    "weekly_df.columns = weekly_df.columns.str.upper()\n",
    "weekly_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "70726dab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "STORE_NBR           int32\n",
       "FISCAL_MONTH_NBR    int32\n",
       "MTD_POINTS          int16\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wecare_month_df['STORE_NBR'] = wecare_month_df['STORE_NBR'].astype(int)\n",
    "wecare_mth_df = wecare_month_df[['STORE_NBR', 'FISCAL_MONTH_NBR', 'MTD_POINTS']].copy()\n",
    "wecare_mth_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0352ead9",
   "metadata": {},
   "outputs": [],
   "source": [
    "month_nps_df = month_nps_df[['FISCAL_MONTH_NBR', 'STORE_NBR', 'RX_BLENDED_NPS']].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3d8e67a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FISCAL_MONTH_NBR               int32\n",
       "STORE_NBR                      int32\n",
       "RX_LTR_DETRACTORS_SUM          int64\n",
       "RX_LTR_PROMOTERS_SUM           int64\n",
       "RX_LTR_SURVEYS_SUM             int64\n",
       "RX_VACC_LTR_DETRACTORS_SUM     int64\n",
       "RX_VACC_LTR_PROMOTERS_SUM      int64\n",
       "RX_VACC_LTR_SURVEYS_SUM        int64\n",
       "RX_LTR_NPS                    object\n",
       "RX_LTR_VACC_NPS               object\n",
       "RX_BLENDED_NPS                object\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ytd_nps_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e20aef27",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>OPI_SCORE</th>\n",
       "      <th>IMZ_SUCCESS_RATE_MPC</th>\n",
       "      <th>PCAP_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>PTO_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>MPNTH_MPC_SCORE</th>\n",
       "      <th>WECARE_SCORE</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202401</td>\n",
       "      <td>98.181818</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.71238124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202402</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.79574464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202403</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.94166668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202404</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.93739168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202405</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.76000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1675</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202505</td>\n",
       "      <td>87.700000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>48</td>\n",
       "      <td>93</td>\n",
       "      <td>0.87500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1676</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202506</td>\n",
       "      <td>85.507500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>52</td>\n",
       "      <td>97</td>\n",
       "      <td>0.85714300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1677</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202507</td>\n",
       "      <td>80.535000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46</td>\n",
       "      <td>94</td>\n",
       "      <td>0.50000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1678</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202508</td>\n",
       "      <td>82.875000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>55</td>\n",
       "      <td>93</td>\n",
       "      <td>0.90000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>18091</td>\n",
       "      <td>NaN</td>\n",
       "      <td>202509</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>55</td>\n",
       "      <td>99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1680 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      STORE_NBR FISCAL_YEAR_NBR  FISCAL_MONTH_NBR   OPI_SCORE  \\\n",
       "0             7            2024            202401   98.181818   \n",
       "1             7            2024            202402  100.000000   \n",
       "2             7            2024            202403  100.000000   \n",
       "3             7            2024            202404   95.000000   \n",
       "4             7            2024            202405  100.000000   \n",
       "...         ...             ...               ...         ...   \n",
       "1675      18091            2025            202505   87.700000   \n",
       "1676      18091            2025            202506   85.507500   \n",
       "1677      18091            2025            202507   80.535000   \n",
       "1678      18091            2025            202508   82.875000   \n",
       "1679      18091             NaN            202509         NaN   \n",
       "\n",
       "      IMZ_SUCCESS_RATE_MPC  PCAP_TOTAL_SUCCESS_RATE_MPC  \\\n",
       "0                      NaN                          NaN   \n",
       "1                      NaN                          NaN   \n",
       "2                      NaN                          NaN   \n",
       "3                      NaN                          NaN   \n",
       "4                      NaN                          NaN   \n",
       "...                    ...                          ...   \n",
       "1675                   NaN                         30.0   \n",
       "1676                   NaN                         30.0   \n",
       "1677                   NaN                         30.0   \n",
       "1678                   NaN                         30.0   \n",
       "1679                   NaN                         30.0   \n",
       "\n",
       "      PTO_TOTAL_SUCCESS_RATE_MPC MPNTH_MPC_SCORE  WECARE_SCORE RX_BLENDED_NPS  \n",
       "0                            NaN             NaN           100     0.71238124  \n",
       "1                            NaN             NaN           100     0.79574464  \n",
       "2                            NaN             NaN           100     0.94166668  \n",
       "3                            NaN             NaN           100     0.93739168  \n",
       "4                            NaN             NaN           100     0.76000000  \n",
       "...                          ...             ...           ...            ...  \n",
       "1675                         1.0              48            93     0.87500000  \n",
       "1676                         4.0              52            97     0.85714300  \n",
       "1677                         0.0              46            94     0.50000000  \n",
       "1678                         6.0              55            93     0.90000000  \n",
       "1679                         6.0              55            99            NaN  \n",
       "\n",
       "[1680 rows x 10 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wecare_mth_df = wecare_mth_df.rename(columns={'MTD_POINTS': 'WECARE_SCORE'})\n",
    "\n",
    "monthly_df = opi_df.merge(mpc_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "monthly_df = monthly_df.merge(wecare_mth_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "monthly_df = monthly_df.merge(month_nps_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "monthly_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7295675d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#wecare_ytd_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "597b0e2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STORE_NBR</th>\n",
       "      <th>FISCAL_YEAR_NBR</th>\n",
       "      <th>FISCAL_MONTH_NBR</th>\n",
       "      <th>OPI_SCORE_YTD</th>\n",
       "      <th>IMZ_SUCCESS_RATE_MPC</th>\n",
       "      <th>PCAP_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>PTO_TOTAL_SUCCESS_RATE_MPC</th>\n",
       "      <th>MPNTH_MPC_SCORE</th>\n",
       "      <th>WECARE_SCORE</th>\n",
       "      <th>RX_BLENDED_NPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202401</td>\n",
       "      <td>98.181818181800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.71238124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202402</td>\n",
       "      <td>99.090909090900</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.79574464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202403</td>\n",
       "      <td>99.393939393933</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.94166668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202404</td>\n",
       "      <td>98.295454545450</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.93739168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>2024</td>\n",
       "      <td>202405</td>\n",
       "      <td>98.636363636360</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100</td>\n",
       "      <td>0.76000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1675</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202505</td>\n",
       "      <td>88.980000000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>62</td>\n",
       "      <td>95</td>\n",
       "      <td>0.87500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1676</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202506</td>\n",
       "      <td>88.401250000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>60</td>\n",
       "      <td>96</td>\n",
       "      <td>0.85714300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1677</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202507</td>\n",
       "      <td>87.277500000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>57</td>\n",
       "      <td>95</td>\n",
       "      <td>0.50000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1678</th>\n",
       "      <td>18091</td>\n",
       "      <td>2025</td>\n",
       "      <td>202508</td>\n",
       "      <td>86.727187500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>57</td>\n",
       "      <td>95</td>\n",
       "      <td>0.90000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>18091</td>\n",
       "      <td>NaN</td>\n",
       "      <td>202509</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>57</td>\n",
       "      <td>96</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1680 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      STORE_NBR FISCAL_YEAR_NBR  FISCAL_MONTH_NBR    OPI_SCORE_YTD  \\\n",
       "0             7            2024            202401  98.181818181800   \n",
       "1             7            2024            202402  99.090909090900   \n",
       "2             7            2024            202403  99.393939393933   \n",
       "3             7            2024            202404  98.295454545450   \n",
       "4             7            2024            202405  98.636363636360   \n",
       "...         ...             ...               ...              ...   \n",
       "1675      18091            2025            202505  88.980000000000   \n",
       "1676      18091            2025            202506  88.401250000000   \n",
       "1677      18091            2025            202507  87.277500000000   \n",
       "1678      18091            2025            202508  86.727187500000   \n",
       "1679      18091             NaN            202509              NaN   \n",
       "\n",
       "      IMZ_SUCCESS_RATE_MPC  PCAP_TOTAL_SUCCESS_RATE_MPC  \\\n",
       "0                      NaN                          NaN   \n",
       "1                      NaN                          NaN   \n",
       "2                      NaN                          NaN   \n",
       "3                      NaN                          NaN   \n",
       "4                      NaN                          NaN   \n",
       "...                    ...                          ...   \n",
       "1675                   NaN                         30.0   \n",
       "1676                   NaN                         30.0   \n",
       "1677                   NaN                         30.0   \n",
       "1678                   NaN                         30.0   \n",
       "1679                   NaN                         30.0   \n",
       "\n",
       "      PTO_TOTAL_SUCCESS_RATE_MPC MPNTH_MPC_SCORE  WECARE_SCORE RX_BLENDED_NPS  \n",
       "0                            NaN             NaN           100     0.71238124  \n",
       "1                            NaN             NaN           100     0.79574464  \n",
       "2                            NaN             NaN           100     0.94166668  \n",
       "3                            NaN             NaN           100     0.93739168  \n",
       "4                            NaN             NaN           100     0.76000000  \n",
       "...                          ...             ...           ...            ...  \n",
       "1675                        10.0              62            95     0.87500000  \n",
       "1676                         9.0              60            96     0.85714300  \n",
       "1677                         7.0              57            95     0.50000000  \n",
       "1678                         7.0              57            95     0.90000000  \n",
       "1679                         7.0              57            96            NaN  \n",
       "\n",
       "[1680 rows x 10 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yr_nps_df = ytd_nps_df[['FISCAL_MONTH_NBR', 'STORE_NBR', 'RX_BLENDED_NPS']].copy()\n",
    "\n",
    "wecare_ytd_df = wecare_month_df[['STORE_NBR', 'FISCAL_MONTH_NBR', 'YTD_POINTS']].copy()\n",
    "wecare_ytd_df = wecare_ytd_df.rename(columns={'YTD_POINTS': 'WECARE_SCORE'})\n",
    "wecare_ytd_df['STORE_NBR'] = wecare_ytd_df['STORE_NBR'].astype(int)\n",
    "wecare_ytd_df.head()\n",
    "\n",
    "\n",
    "yearly_df = opi_ytd_df.merge(mpc_ytd_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "yearly_df = yearly_df.merge(wecare_ytd_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "yearly_df = yearly_df.merge(yr_nps_df, on=['STORE_NBR', 'FISCAL_MONTH_NBR'], how='outer')\n",
    "yearly_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "24c5e458",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Upload tables\n",
    "# TELEPHARMACY_STORE\n",
    "# TELEPHARMACY_STORE_WEEK\n",
    "# TELEPHARMACY_STORE_MONTH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8ae8c57c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_columns_upload_data(df):\n",
    "    #Format column names for common issues -- MUST BE UPPER CASE COLUMN NAMES\n",
    "    df.columns = df.columns.str.replace(' ', '_', regex=False)\n",
    "    df.columns = df.columns.str.replace('\\xa0', '_', regex=False)\n",
    "    df.columns = df.columns.str.replace('-', '_', regex=False)\n",
    "    df.columns = df.columns.str.replace('No#', 'NO', regex=False)\n",
    "    df.columns = df.columns.str.replace('#', 'NBR', regex=False)\n",
    "    df.columns = df.columns.str.replace('/', '_', regex=False)\n",
    "    df.columns = df.columns.str.replace('24', 'TWNTY_FOUR', regex=False)\n",
    "    df.columns = df.columns.str.replace('1st', 'FIRST', regex=False)\n",
    "    df.columns = df.columns.str.replace('2nd', 'SECOND', regex=False)\n",
    "    df.columns = df.columns.str.replace('?', '', regex=False)\n",
    "    df.columns = df.columns.str.replace('(', '', regex=False)\n",
    "    df.columns = df.columns.str.replace(')', '', regex=False)\n",
    "    df.columns = df.columns.str.replace('.', '_', regex=False)\n",
    "    df.columns = df.columns.str.upper()\n",
    "    return df\n",
    "store_df = format_columns_upload_data(store_df)\n",
    "weekly_df = format_columns_upload_data(weekly_df)\n",
    "monthly_df = format_columns_upload_data(monthly_df)\n",
    "yearly_df = format_columns_upload_data(yearly_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ba4e9400",
   "metadata": {},
   "outputs": [],
   "source": [
    "store_df = store_df.rename(columns={'GROUP': 'GROUP_NAME', 'ORDER': 'ORDER_NBR'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "400ebd6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATE</th>\n",
       "      <th>GROUP_NAME</th>\n",
       "      <th>PAIR_CODE</th>\n",
       "      <th>2025_DIV</th>\n",
       "      <th>REG</th>\n",
       "      <th>DIST</th>\n",
       "      <th>STORE</th>\n",
       "      <th>STORE_TYPE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>MODEL_DETAILED</th>\n",
       "      <th>ORDER_NBR</th>\n",
       "      <th>STATUS</th>\n",
       "      <th>TECH_DEMAND_TYPE_TO_USE</th>\n",
       "      <th>RPH_DEMAND_TYPE_TO_USE</th>\n",
       "      <th>LAST_STATUS_CHANGE</th>\n",
       "      <th>FW</th>\n",
       "      <th>OPERATING_MODEL</th>\n",
       "      <th>NOTES</th>\n",
       "      <th>MASTER_SWITCH_ON_</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18013</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-001</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>24</td>\n",
       "      <td>18091</td>\n",
       "      <td>Schnucks</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>6450</td>\n",
       "      <td>Core</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-002</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>10656</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 0</td>\n",
       "      <td>GP0-004</td>\n",
       "      <td>12</td>\n",
       "      <td>61</td>\n",
       "      <td>22</td>\n",
       "      <td>3742</td>\n",
       "      <td>Core</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Converted</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>See RPh labor tab</td>\n",
       "      <td>2025-03-24</td>\n",
       "      <td>13</td>\n",
       "      <td>Full</td>\n",
       "      <td>RD discussion 8/1/25 - will work w/ DL for ful...</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-033</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>25</td>\n",
       "      <td>16362</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-09-18</td>\n",
       "      <td>38</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>16308</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>IL</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-034</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "      <td>21</td>\n",
       "      <td>17656</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Full</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Steady State</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2024-08-14</td>\n",
       "      <td>33</td>\n",
       "      <td>Full</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16167</td>\n",
       "      <td>Target</td>\n",
       "      <td>RDP</td>\n",
       "      <td>Wkd</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>WA</td>\n",
       "      <td>Group 2a</td>\n",
       "      <td>GP2-051</td>\n",
       "      <td>8</td>\n",
       "      <td>85</td>\n",
       "      <td>24</td>\n",
       "      <td>16203</td>\n",
       "      <td>Target</td>\n",
       "      <td>SP</td>\n",
       "      <td>SP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Paused</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>TeleRx</td>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>32</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>*Was steady-state, on pause to support Rite Ai...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>82 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   STATE GROUP_NAME PAIR_CODE  2025_DIV  REG  DIST  STORE STORE_TYPE MODEL  \\\n",
       "0     IL    Group 0   GP0-001        12   62    24  18013   Schnucks    SP   \n",
       "1     IL    Group 0   GP0-001        12   62    24  18091   Schnucks   RDP   \n",
       "2     IL    Group 0   GP0-002        12   62    21   6450       Core    SP   \n",
       "3     IL    Group 0   GP0-002        12   62    21  10656       Core   RDP   \n",
       "4     IL    Group 0   GP0-004        12   61    22   3742       Core   RDP   \n",
       "..   ...        ...       ...       ...  ...   ...    ...        ...   ...   \n",
       "77    IL   Group 2a   GP2-033        12   62    25  16362     Target   RDP   \n",
       "78    IL   Group 2a   GP2-034        12   62    21  16308     Target    SP   \n",
       "79    IL   Group 2a   GP2-034        12   62    21  17656     Target   RDP   \n",
       "80    WA   Group 2a   GP2-051         8   85    24  16167     Target   RDP   \n",
       "81    WA   Group 2a   GP2-051         8   85    24  16203     Target    SP   \n",
       "\n",
       "   MODEL_DETAILED  ORDER_NBR        STATUS TECH_DEMAND_TYPE_TO_USE  \\\n",
       "0              SP        3.0  Steady State                  TeleRx   \n",
       "1            Full        1.0  Steady State                  TeleRx   \n",
       "2              SP        3.0  Steady State                  TeleRx   \n",
       "3            Full        1.0  Steady State                  TeleRx   \n",
       "4            Full        1.0     Converted                  TeleRx   \n",
       "..            ...        ...           ...                     ...   \n",
       "77           Full        1.0  Steady State                  TeleRx   \n",
       "78             SP        3.0  Steady State                  TeleRx   \n",
       "79           Full        1.0  Steady State                  TeleRx   \n",
       "80            Wkd        2.0        Paused                  TeleRx   \n",
       "81             SP        NaN        Paused                  TeleRx   \n",
       "\n",
       "   RPH_DEMAND_TYPE_TO_USE LAST_STATUS_CHANGE  FW OPERATING_MODEL  \\\n",
       "0                  TeleRx         2024-01-01   1            Full   \n",
       "1                  TeleRx         2024-01-01   1            Full   \n",
       "2                  TeleRx         2024-01-01   1            Full   \n",
       "3                  TeleRx         2024-01-01   1            Full   \n",
       "4       See RPh labor tab         2025-03-24  13            Full   \n",
       "..                    ...                ...  ..             ...   \n",
       "77                 TeleRx         2024-09-18  38            Full   \n",
       "78                 TeleRx         2024-08-14  33            Full   \n",
       "79                 TeleRx         2024-08-14  33            Full   \n",
       "80                 TeleRx         2025-08-04  32         Weekend   \n",
       "81                 TeleRx         2025-08-04  32         Weekend   \n",
       "\n",
       "                                                NOTES MASTER_SWITCH_ON_  \n",
       "0                                                 NaN                 Y  \n",
       "1                                                 NaN                 Y  \n",
       "2                                                 NaN                 Y  \n",
       "3                                                 NaN                 Y  \n",
       "4   RD discussion 8/1/25 - will work w/ DL for ful...                 Y  \n",
       "..                                                ...               ...  \n",
       "77                                                NaN                 Y  \n",
       "78                                                NaN                 Y  \n",
       "79                                                NaN                 Y  \n",
       "80  *Was steady-state, on pause to support Rite Ai...                 N  \n",
       "81  *Was steady-state, on pause to support Rite Ai...                 N  \n",
       "\n",
       "[82 rows x 19 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_df\n",
    "#store_df = store_df.rename(columns={'2025_DIV': 'DIV'})\n",
    "store_df = store_df.rename(columns={'2025_REG': 'REG'})\n",
    "store_df = store_df.rename(columns={'2025_DIST': 'DIST'})\n",
    "\n",
    "store_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e6a43c55",
   "metadata": {},
   "outputs": [],
   "source": [
    "full_table_name = f'{database}.{schema}.{table_name}'\n",
    "column_type_dict = {\n",
    "    'object': 'VARCHAR(500)',\n",
    "    'string': 'VARCHAR(500)',\n",
    "    'int64':'BIGINT',\n",
    "    'int32': 'INT',\n",
    "    'int16': 'INT',\n",
    "    'int8': 'INT',\n",
    "    'Int64': 'BIGINT',\n",
    "    'datetime64[ns]': 'DATETIME',\n",
    "    'float64': 'FLOAT',\n",
    "    'Float64': 'FLOAT'\n",
    "}\n",
    "def create_table_text(df, table_name, date_column_names=[], primary_key=''):\n",
    "    table_string = f'CREATE OR REPLACE TABLE {table_name} ('\n",
    "    for column_name, datatype in df.dtypes.items():\n",
    "        column_type = column_type_dict[str(datatype)]\n",
    "        if column_name in date_column_names:\n",
    "            column_type='DATE'\n",
    "        column_string = f'{column_name} {column_type}, '\n",
    "        table_string = table_string+column_string\n",
    "        \n",
    "    if len(primary_key)>0:\n",
    "        table_string =  table_string+f'PRIMARY KEY ({primary_key}));'\n",
    "    else:\n",
    "        table_string = table_string[:-2] + \");\"\n",
    "    return table_string\n",
    "\n",
    "def fix_date_cols(df, tz='UTC'):\n",
    "    cols = df.select_dtypes(include=['datetime64[ns]']).columns\n",
    "    for col in cols:\n",
    "        df[col] = df[col].dt.tz_localize(tz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "93829ec2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ProgrammingError",
     "evalue": "001003 (42000): SQL compilation error:\nsyntax error line 1 at position 144 unexpected '2025'.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mProgrammingError\u001b[0m                          Traceback (most recent call last)",
      "Input \u001b[1;32mIn [35]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m created_table_text \u001b[38;5;241m=\u001b[39m create_table_text(store_df, full_table_name)\n\u001b[0;32m      2\u001b[0m fix_date_cols(store_df)\n\u001b[1;32m----> 3\u001b[0m \u001b[43mcs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcreated_table_text\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      4\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39mrun_line_magic(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtime\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msuccess, nchunks, nrows, _ = write_pandas(ctx, store_df, table_name, database=database, schema=schema)\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\snowflake\\connector\\cursor.py:1103\u001b[0m, in \u001b[0;36mSnowflakeCursor.execute\u001b[1;34m(self, command, params, _bind_stage, timeout, _exec_async, _no_retry, _do_reset, _put_callback, _put_azure_callback, _put_callback_output_stream, _get_callback, _get_azure_callback, _get_callback_output_stream, _show_progress_bar, _statement_params, _is_internal, _describe_only, _no_results, _is_put_get, _raise_put_get_error, _force_put_overwrite, _skip_upload_on_content_match, file_stream, num_statements, _force_qmark_paramstyle, _dataframe_ast)\u001b[0m\n\u001b[0;32m   1099\u001b[0m     is_integrity_error \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m   1100\u001b[0m         code \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m100072\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1101\u001b[0m     )  \u001b[38;5;66;03m# NULL result in a non-nullable column\u001b[39;00m\n\u001b[0;32m   1102\u001b[0m     error_class \u001b[38;5;241m=\u001b[39m IntegrityError \u001b[38;5;28;01mif\u001b[39;00m is_integrity_error \u001b[38;5;28;01melse\u001b[39;00m ProgrammingError\n\u001b[1;32m-> 1103\u001b[0m     \u001b[43mError\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merrorhandler_wrapper\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnection\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror_class\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrvalue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1104\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\snowflake\\connector\\errors.py:283\u001b[0m, in \u001b[0;36mError.errorhandler_wrapper\u001b[1;34m(connection, cursor, error_class, error_value)\u001b[0m\n\u001b[0;32m    260\u001b[0m \u001b[38;5;129m@staticmethod\u001b[39m\n\u001b[0;32m    261\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21merrorhandler_wrapper\u001b[39m(\n\u001b[0;32m    262\u001b[0m     connection: SnowflakeConnection \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    265\u001b[0m     error_value: \u001b[38;5;28mdict\u001b[39m[\u001b[38;5;28mstr\u001b[39m, Any],\n\u001b[0;32m    266\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    267\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Error handler wrapper that calls the errorhandler method.\u001b[39;00m\n\u001b[0;32m    268\u001b[0m \n\u001b[0;32m    269\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    280\u001b[0m \u001b[38;5;124;03m        exception to the first handler in that order.\u001b[39;00m\n\u001b[0;32m    281\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 283\u001b[0m     handed_over \u001b[38;5;241m=\u001b[39m \u001b[43mError\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mhand_to_other_handler\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    284\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconnection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    285\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcursor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    286\u001b[0m \u001b[43m        \u001b[49m\u001b[43merror_class\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    287\u001b[0m \u001b[43m        \u001b[49m\u001b[43merror_value\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    288\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    289\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m handed_over:\n\u001b[0;32m    290\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m Error\u001b[38;5;241m.\u001b[39merrorhandler_make_exception(\n\u001b[0;32m    291\u001b[0m             error_class,\n\u001b[0;32m    292\u001b[0m             error_value,\n\u001b[0;32m    293\u001b[0m         )\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\snowflake\\connector\\errors.py:338\u001b[0m, in \u001b[0;36mError.hand_to_other_handler\u001b[1;34m(connection, cursor, error_class, error_value)\u001b[0m\n\u001b[0;32m    336\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cursor \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    337\u001b[0m     cursor\u001b[38;5;241m.\u001b[39mmessages\u001b[38;5;241m.\u001b[39mappend((error_class, error_value))\n\u001b[1;32m--> 338\u001b[0m     \u001b[43mcursor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merrorhandler\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconnection\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcursor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror_class\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror_value\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    339\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    340\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m connection \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\snowflake\\connector\\errors.py:214\u001b[0m, in \u001b[0;36mError.default_errorhandler\u001b[1;34m(connection, cursor, error_class, error_value)\u001b[0m\n\u001b[0;32m    212\u001b[0m errno \u001b[38;5;241m=\u001b[39m error_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124merrno\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    213\u001b[0m done_format_msg \u001b[38;5;241m=\u001b[39m error_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdone_format_msg\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 214\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m error_class(\n\u001b[0;32m    215\u001b[0m     msg\u001b[38;5;241m=\u001b[39merror_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmsg\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    216\u001b[0m     errno\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01mif\u001b[39;00m errno \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mint\u001b[39m(errno),\n\u001b[0;32m    217\u001b[0m     sqlstate\u001b[38;5;241m=\u001b[39merror_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msqlstate\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    218\u001b[0m     sfqid\u001b[38;5;241m=\u001b[39merror_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msfqid\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    219\u001b[0m     query\u001b[38;5;241m=\u001b[39merror_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mquery\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m    220\u001b[0m     done_format_msg\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01mif\u001b[39;00m done_format_msg \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mbool\u001b[39m(done_format_msg)\n\u001b[0;32m    222\u001b[0m     ),\n\u001b[0;32m    223\u001b[0m     connection\u001b[38;5;241m=\u001b[39mconnection,\n\u001b[0;32m    224\u001b[0m     cursor\u001b[38;5;241m=\u001b[39mcursor,\n\u001b[0;32m    225\u001b[0m )\n",
      "\u001b[1;31mProgrammingError\u001b[0m: 001003 (42000): SQL compilation error:\nsyntax error line 1 at position 144 unexpected '2025'."
     ]
    }
   ],
   "source": [
    "created_table_text = create_table_text(store_df, full_table_name)\n",
    "fix_date_cols(store_df)\n",
    "cs.execute(created_table_text)\n",
    "%time success, nchunks, nrows, _ = write_pandas(ctx, store_df, table_name, database=database, schema=schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "657e4998",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "weekly_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "311cbd69",
   "metadata": {},
   "outputs": [],
   "source": [
    "weekly_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d2228a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "table_name = 'TELEPHARMACY_STORE_WEEK'\n",
    "full_table_name = f'{database}.{schema}.{table_name}'\n",
    "created_table_text = create_table_text(weekly_df, full_table_name)\n",
    "fix_date_cols(weekly_df)\n",
    "cs.execute(created_table_text)\n",
    "%time success, nchunks, nrows, _ = write_pandas(ctx, weekly_df, table_name, database=database, schema=schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "250c98a7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "table_name = 'TELEPHARMACY_STORE_MONTH'\n",
    "full_table_name = f'{database}.{schema}.{table_name}'\n",
    "created_table_text = create_table_text(monthly_df, full_table_name)\n",
    "fix_date_cols(monthly_df)\n",
    "cs.execute(created_table_text)\n",
    "%time success, nchunks, nrows, _ = write_pandas(ctx, monthly_df, table_name, database=database, schema=schema)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
