
--Snowflake Source


    
SET START_DATE = DATE'2025-01-01';
SET END_DATE = CURRENT_DATE();

/*
CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROUP ( 
BIN VARCHAR(25),
PCN VARCHAR(25),
GRP VARCHAR(25)
);

INSERT INTO DL_RX_OPERATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROUP VALUES('610591','ADV','RX881A');
INSERT INTO DL_RX_OPERATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROUP VALUES('012114','COBSEGADV','RX881A');
INSERT INTO DL_RX_OPEPRATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROU VALUES('013089','COMSEGADV', 'RX881A');*/

SELECT *
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROUP
    
       --GRABBING THE PATIENTS WITH THIS TYPE OF INSURANCE
        CREATE OR REPLACE TEMPORARY TABLE AETNA_IL_RX AS (
        SELECT DISTINCT
              ACV.ACV_TXN_SEQ_NBR
            , ACV.SPLIT_BILL_CD 
            , ACV.STORE_NBR 
            , ACV.RX_NBR
            , ACV.RX_FILL_NBR 
            , ACV.RQST_INS_RSPMBR_ID
            , ACV.CLM_DT_TME
            , CND.CONDOR_PLAN_NM
            , CND.AGENCY_TYPE_DSC
            , ACV.CONDR_PLAN_NBR
            , ACV.CONDR_PLAN_EFF_DT
            , ACV.BIN_NBR 
            , ACV.PROSCR_CONT_NBR
            , ACV.RQST_SVC_PROV_QUAL_ID
            , ACV.SRC_PAT_KEY_ID          AS RXC_PATIENT_ID
            , ACV.TXN_RSP_STAT_CD
            --, ACV.RQST_INS_GROUP_ID
        FROM CORE_RX.CURATED_NCPDP.FACT_NCPDP_ACV_TXN AS ACV
        JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.AETNA_IL_BIN_BCN_GROUP AS CENT 
            ON ACV.BIN_NBR = CENT.BIN
            AND TRIM(ACV.PROSCR_CONT_NBR) = CENT.PCN
            --AND RQST_INS_GROUP_ID = CENT.GRP
        LEFT JOIN CORE_RX.CURATED_PRODUCT.CONDOR_PLAN AS CND 
            ON ACV.CONDR_PLAN_NBR = CND.CONDOR_PLAN_NBR
        WHERE 
            TO_DATE(CLM_DT_TME) BETWEEN $START_DATE AND $END_DATE --all claims in 2023
            AND SPLIT_BILL_CD  = 1 --this is the primary insurance
            AND TXN_RSP_STAT_CD IN ('P') --all processed claims
        QUALIFY ROW_NUMBER() OVER (PARTITION BY ACV.STORE_NBR, ACV.RX_NBR, ACV.RX_FILL_NBR ORDER BY CLM_DT_TME DESC)=1
        );       

        
        CREATE OR REPLACE TEMPORARY TABLE RX_ORDERS AS ( 
        SELECT 
              HDR.ORDER_HEADER_KEY 
            , HDR.ORDER_NO 
            , HDR.ENTERPRISE_KEY
            , TO_DATE(HDR.ORDER_DATE) AS ORDER_DATE
            , HDR.SHIP_NODE
            , HDR.SHIP_TO_KEY 
            , X.XTRA_CARD_NBR
            , HDR.CUSTOMER_REWARDS_NO
            , HDR.EXTN_PRIMARY_COURIER
            , HDR.CREATEUSERID
            , HDR.MODIFYUSERID
            , LN.EXTN_BASE_SHIPPING_CHARGE
            , LN.LINE_TOTAL 
            , LN.INVOICED_LINE_TOTAL
            , LN.INVOICED_EXTENDED_PRICE
            , LN.SETTLED_AMOUNT
            , LN.TAX
            , SHIP.SHIPMENT_NO
        FROM CORE_FSSC.CURATED_OMS.YFS_ORDER_HEADER AS HDR 
        
        JOIN CORE_FSSC.CURATED_OMS.YFS_ORDER_RELEASE_STATUS AS RL 
            ON HDR.ORDER_HEADER_KEY = RL.ORDER_HEADER_KEY
        
        LEFT JOIN CORE_FSSC.CURATED_OMS.YFS_ORDER_LINE AS LN 
            ON HDR.ORDER_HEADER_KEY = LN.ORDER_HEADER_KEY 
        
        LEFT JOIN PROD_COMM_DB.CDP_APP.XTRA_CARD as X 
             ON CAST(HDR.CUSTOMER_REWARDS_NO AS VARCHAR(50)) = CAST(X.ENCODED_XTRA_CARD_NBR AS VARCHAR(50)) 
        
        LEFT JOIN CORE_FSSC.CURATED_OMS.YFS_SHIPMENT AS SHIP 
            ON HDR.ORDER_HEADER_KEY = SHIP.ORDER_HEADER_KEY 
        
        WHERE 
            HDR.DOCUMENT_TYPE = '0001'
            AND UPPER(HDR.ORDER_TYPE) IN ('MIXED','RX')
            AND UPPER(HDR.ENTERPRISE_KEY) IN ('CVSHEALTH')
            AND RL.STATUS_QUANTITY > 0 
            AND RL.STATUS IN ('3700.1000')
            AND HDR.ENTRY_TYPE IN ('DOTM','PNP')
            AND HDR.ORDER_DATE BETWEEN $START_DATE AND $END_DATE
        );
        
    
        
        CREATE OR REPLACE TEMPORARY TABLE CAREPASS_MEMBER_ENROLLMENT AS ( 
        SELECT
              CARE_HIST.XTRA_CARD_NBR
            , CARE_HIST.CREATE_DT
            , CARE_HIST.MEM_ENROLL_DT
            , CARE_HIST.MEMBERSHIP_STATUS
            , CARE_HIST.ENROLLMENT_ID
            , CARE.EMAIL_TXT
            , CARE.FIRST_NAME 
            , CARE.LAST_NAME
            , CARE.PROFILE_ID
            , CARE.CONTRACT_ID
        FROM PROD_COMM_DB.CDP_APP.CAREPASS_ENROLLMENT_HISTORY AS CARE_HIST 
        LEFT JOIN PROD_COMM_DB.CDP_APP.CAREPASS_ENROLLMENT AS CARE 
            ON CARE_HIST.ENROLLMENT_ID = CARE.ENROLLMENT_ID
        WHERE 
            CARE_HIST.CREATE_DT >= $START_DATE
            AND CARE_HIST.MEMBERSHIP_STATUS IN ('E')
            AND CARE_HIST.PRG_NAME IN ('CP_B2C')
        );
    
    
    
    
        CREATE OR REPLACE TEMPORARY TABLE NYC_STORES AS ( 
        SELECT 
              STORE_NBR 
            , STATE_CD 
            , CITY_NM
        FROM CORE_RX.CURATED_LOCATION.STORE 
        WHERE STORE_NBR IN (551,644,802,845,1618,1934,1963,2036,2057,2058,2144,2168,2360,2411,2427,2428,2434,2435,2436,2445,2457,2557,2558,2671,2700,2716,2717,2737,2939,2940,2962,3224,3295,3752,4014,5772,6062,
                6066,7019,7186,8968,10041,10112,10235,10291,10298,10407,10530,10612,10613,10654,10826,10827,10828,10933,10970,11014,11059,11075,11132,11226,11237,11384,11408,11434,17688,17726,17728,
                17750,17797,17815,17817,17820,17821)
        );
    
    
    
        CREATE OR REPLACE TEMPORARY TABLE RX_DELV_INFO AS (
        SELECT 
              B.RX_NBR 
            , B.STORE_NBR 
            , B.FILL_NBR 
            , A.OMS_ORDER_NBR
            , A.ORDER_ID
            , A.CANCEL_REASON_DSC 
            , A.COURIER_NM 
            , A.DELIVERY_SLA_CD
            , A.COLLEGUE_SLA_TS
            , A.DELIVERY_FEE_OVERRIDE_REASON_CD
            , A.DELIVERY_FEE_OVERRIDE_TS
            , A.DELIVERY_FEE_OVERRIDE_USER_NM
            , A.SHIPMENT_ORDER_NBR
            , MAX(CASE WHEN C.ORDER_STATUS_CD = 10 THEN C.REC_EFF_TS ELSE NULL END) AS ORDER_DATE 
            , MAX(CASE WHEN C.ORDER_STATUS_CD = 4 THEN C.REC_EFF_TS ELSE NULL END) AS DELIVERED_DATE
        FROM CORE_FSSC.CURATED_ORDERS.ORDER_DELIVERY AS A 
        JOIN CORE_FSSC.CURATED_ORDERS.ORDER_DELIVERY_ITEM AS B
            ON A.ORDER_ID = B.ORDER_ID
            AND A.STORE_NBR = B.STORE_NBR
        JOIN (SELECT 
                    ORDER_ID 
                  , STORE_NBR 
                  , ORDER_STATUS_CD 
                  , REC_EFF_TS 
              --HISTORY TABLE DOES NOT HAVE CURRENT RECORD IN IT
              FROM CORE_FSSC.CURATED_ORDERS.ORDER_DELIVERY_HISTORY
              UNION 
              SELECT 
                    ORDER_ID 
                  , STORE_NBR 
                  , ORDER_STATUS_CD 
                  , REC_EFF_TS 
              FROM CORE_FSSC.CURATED_ORDERS.ORDER_DELIVERY) AS C
            ON A.ORDER_ID = C.ORDER_ID 
            AND A.STORE_NBR = C.STORE_NBR
        WHERE 
            CAST(A.REC_EFF_TS AS DATE) BETWEEN $START_DATE AND $END_DATE
            --FILTERING ON THE SPECIFIC ORDERS TO LOOK AT
            AND A.TRANSACTION_NBR NOT IN (9090)
                --EXCLUDE THE LOCKER TXN.
            AND A.COURIER_NM NOT IN ('LOCKER') 
            AND CANCEL_REASON_DSC IS NULL
        GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
        ); 
    


        
        
        CREATE OR REPLACE TEMPORARY TABLE FINAL_TABLE AS (
        SELECT DISTINCT
              RX. * 
            , DLV.RX_NBR 
            , DLV.STORE_NBR 
            , DLV.FILL_NBR 
            , DLV.DELIVERED_DATE 
            , DLV.DELIVERY_SLA_CD
            , DLV.DELIVERY_FEE_OVERRIDE_REASON_CD
            , DLV.DELIVERY_FEE_OVERRIDE_TS
            , DLV.DELIVERY_FEE_OVERRIDE_USER_NM
            , DLV.OMS_ORDER_NBR
            , CASE 
                    WHEN LEFT(OMS_ORDER_NBR, 2) IN ('71','15','70','72') THEN 'DIGITAL ENTRY'
                    WHEN LEFT(OMS_ORDER_NBR, 1) IN ('9') THEN 'COLLEAGUE INITIATED'
                  ELSE 'UNSURE'
                  END AS ENTRY_POINT
            , CASE
                WHEN CR.XTRA_CARD_NBR IS NOT NULL THEN 1
                ELSE 0 
               END AS CAREPASS_ORDER
            , CASE 
                WHEN DLV.DELIVERY_FEE_OVERRIDE_REASON_CD IS NOT NULL THEN 1 
                ELSE 0 
              END AS COLLEAGUE_OVERRIDE_ORDER
            , CASE 
                WHEN NYC.STORE_NBR IS NOT NULL 
                AND DLV.DELIVERY_SLA_CD IN ('NDD') THEN 1 
                ELSE 0 
               END AS NYC_NDD_ORDER
            , CASE 
                WHEN EXTN_BASE_SHIPPING_CHARGE = 0 THEN 1 
                ELSE 0 
              END AS FREE_DLV
        FROM RX_ORDERS AS RX 
        
        LEFT JOIN RX_DELV_INFO AS DLV 
            ON DLV.SHIPMENT_ORDER_NBR = RX.SHIPMENT_NO
        
        LEFT JOIN CAREPASS_MEMBER_ENROLLMENT AS CR 
            ON CAST(RX.XTRA_CARD_NBR AS VARCHAR(50)) = CAST(CR.XTRA_CARD_NBR AS VARCHAR(50))
            AND RX.ORDER_DATE = DATEADD(DAY, -1, CR.CREATE_DT)
        
        LEFT JOIN NYC_STORES AS NYC 
            ON NYC.STORE_NBR = DLV.STORE_NBR
        
        );
        
        
        
        --SELECT * FROM FINAL_TABLE WHERE ENTRY_POINT IN ('COLLEAGUE INITIATED');
        
        
        
        CREATE OR REPLACE TEMPORARY TABLE PATIENT_AND_SCRIPT_INFO AS ( 
        SELECT 
            T1. *, 
              PF.RXC_PATIENT_ID 
            , PF.TP_PLAN_NBR 
            , PF.NDC
        FROM FINAL_TABLE AS T1 
        
        LEFT JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF 
            ON T1.RX_NBR = PF.RX_NBR 
            AND T1.STORE_NBR = PF.STORE_NBR 
            AND T1.FILL_NBR = PF.FILL_NBR 

        INNER JOIN AETNA_IL_RX AS AETNA 
            ON T1.RX_NBR = AETNA.RX_NBR 
            AND T1.STORE_NBR = AETNA.STORE_NBR 
            AND T1.FILL_NBR = AETNA.RX_FILL_NBR
        
        );
        
    




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------Sheet 1
SELECT 
      TO_DATE(ORDER_DATE) AS ORDER_DATE
    , COUNT(DISTINCT OMS_ORDER_NBR) AS ALL_DLV
    , COUNT(DISTINCT CASE WHEN FREE_DLV = 1 THEN OMS_ORDER_NBR ELSE NULL END) AS FREE_DLV_ALL     
FROM PATIENT_AND_SCRIPT_INFO AS DLV 
WHERE ENTRY_POINT IN ('DIGITAL ENTRY')
GROUP BY 1
ORDER BY 1
;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------Sheet 2
SELECT DISTINCT PTNT.FIRST_NM
    , PTNT.LAST_NM
    , DLV.XTRA_CARD_NBR
    , DLV.ORDER_NO
    , DLV.ORDER_DATE
    , DLV.FREE_DLV
    , PTNT.BIRTH_DT
    , PTNT.MEMBER_ID
FROM PATIENT_AND_SCRIPT_INFO AS DLV 
LEFT JOIN CORE_RX.CURATED_PATIENT.PATIENT AS PTNT
    ON DLV.RXC_PATIENT_ID=PTNT.RXC_PATIENT_ID
WHERE ENTRY_POINT IN ('DIGITAL ENTRY')
ORDER BY DLV.ORDER_DATE;
