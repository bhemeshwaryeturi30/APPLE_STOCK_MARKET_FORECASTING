ExceptionOutreaches.sql code:
SELECT * FROM DL_RX_OPERATION.RX_OPS_SANDBOX.EXCEPTION_OUTREACH_DASHBOARD


Exception_Outreach_Procedure.sql code:
CREATE OR REPLACE PROCEDURE Exception_Outreaches_Procedure()
RETURNS STRING
LANGUAGE SQL
AS
$$

DECLARE
    FISCAL_WEEK_START INT;
    FISCAL_WEEK_END INT;
    START_DATE DATE;
    END_DATE DATE;

BEGIN

    -- Initialize fiscal week variables
    FISCAL_WEEK_START := 202401;
    FISCAL_WEEK_END := (SELECT MAX(END_WEEK_NBR) FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH WHERE END_DT < CURRENT_DATE());


    CREATE OR REPLACE TEMPORARY TABLE FISCAL_WEEK_START AS ( 
    SELECT 
          MIN(START_DT) AS START_DT
        , MAX(END_DT)   AS END_DT
    FROM (
    SELECT 
          START_DT 
        , END_DT 
        , FISCAL_WEEK_NBR
    FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK
    WHERE FISCAL_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END)
    );

    -- Set the dates to look at based on fiscal week numbers
    SELECT START_DT, END_DT INTO START_DATE, END_DATE FROM FISCAL_WEEK_START;

    CREATE OR REPLACE TEMPORARY TABLE BASE_RX AS ( 
    SELECT
          RX_NBR 
        , STORE_NBR
        , FILL_NBR 
        , RX_ORIGIN_CD
        , SOURCE_CD
        , PRESCRIPTION_FILL_TS 
        , FILL_STATUS_CD
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL 
    WHERE PRESCRIPTION_FILL_TS > DATEADD(MONTH, -6, :START_DATE) 
        AND LAST_UPDATED_TS::DATE > DATEADD(MONTH, -6, :START_DATE)
    );
    
    CREATE OR REPLACE TEMPORARY TABLE INDUCTED_RX AS ( 
    SELECT 
          X.RX_NBR 
        , X.STORE_NBR 
        , X.FILL_NBR
        , MIN(PACT.REC_EFF_TS) AS INDUCTION_DATE
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_ACTIVITY AS PACT 
    JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_XREF AS X 
        ON PACT.RXC_PRESCRIPTION_FILL_ID = X.RXC_PRESCRIPTION_FILL_ID
    JOIN BASE_RX AS BASE 
        ON X.RX_NBR = BASE.RX_NBR 
        AND X.STORE_NBR = BASE.STORE_NBR 
        AND X.FILL_NBR = BASE.FILL_NBR
    WHERE 
        TO_DATE(PACT.REC_EFF_TS) > DATEADD(MONTH, -6, :START_DATE)
    GROUP BY 1,2,3
    );
    
    CREATE OR REPLACE TEMPORARY TABLE FIS_WEEK AS ( 
    SELECT 
          FISCAL_WEEK_NBR 
        , START_DT 
        , END_DT 
        , FISCAL_MONTH_NBR 
        , FISCAL_WEEK_DSC
    FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK 
    WHERE 
        FISCAL_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END
    );
    
    CREATE OR REPLACE TEMPORARY TABLE ACTION_NOTE_VOLUME AS ( 
    SELECT 
          FIS.FISCAL_MONTH_NBR
        , COUNT(DISTINCT CONCAT(BASE.RX_NBR,'-',BASE.STORE_NBR,'-',BASE.FILL_NBR)) AS TOTAL_RX_WITH_ACTION_NOTE 
        , COUNT(ACTN.RXC_ACTION_NOTE_ID) AS TOTAL_ACTION_NOTES
    FROM CORE_RX.CURATED_SCRIPT.RXC_ACTION_NOTE AS ACTN 
    JOIN FIS_WEEK AS FIS 
        ON TO_DATE(ACTN.CREATED_TS) BETWEEN FIS.START_DT AND FIS.END_DT
    JOIN BASE_RX AS BASE 
        ON ACTN.RX_NBR = BASE.RX_NBR 
        AND ACTN.FILL_NBR = BASE.FILL_NBR 
        AND ACTN.STORE_NBR = BASE.STORE_NBR 
    WHERE 
        (ACTN.RX_NBR IS NULL OR NOT (BASE.SOURCE_CD IN (1) AND RX_ORIGIN_CD IN ('1','5') AND BASE.FILL_NBR = 0)) --MANUALLY ENTERED
        AND (ACTN.RX_NBR IS NULL OR NOT (BASE.SOURCE_CD IN (1) AND BASE.FILL_NBR >= 1)) --MANUALLY ENTERED
    GROUP BY 1
    );
    
    CREATE OR REPLACE TEMPORARY TABLE INDUCTED_SCRIPTS AS ( 
    SELECT 
          FIS.FISCAL_MONTH_NBR
        , COUNT(DISTINCT CONCAT(RX_NBR, '-', STORE_NBR, '-', FILL_NBR)) AS TTL_INDUCTED
    FROM INDUCTED_RX AS IND 
    JOIN FIS_WEEK AS FIS 
        ON TO_DATE(IND.INDUCTION_DATE) BETWEEN FIS.START_DT AND FIS.END_DT
    GROUP BY 1
        );
    --------------------------------------------------------------------------------------------------------
    ------------------------FINAL TABLE CREATION WITH THE ACTION NOTE VOLUME--------------------------------
    --------------------------------------------------------------------------------------------------------
    
    CREATE OR REPLACE TEMPORARY TABLE EXCEPTION_OUTREACH_VOLUME AS ( 
    SELECT 
          IND.FISCAL_MONTH_NBR 
        , ACTN.TOTAL_ACTION_NOTES 
        , ACTN.TOTAL_RX_WITH_ACTION_NOTE 
        , IND.TTL_INDUCTED 
        , CAST(TOTAL_RX_WITH_ACTION_NOTE AS DECIMAL(14,4)) / CAST(TTL_INDUCTED AS DECIMAL(14,4)) AS SCRIPTS_WITH_ACTION_NOTES 
        , CAST(TOTAL_ACTION_NOTES AS DECIMAL(14,4)) / CAST(TOTAL_RX_WITH_ACTION_NOTE AS DECIMAL(14,4)) AS ACTION_NOTES_PER_SCRIPT
    FROM ACTION_NOTE_VOLUME AS ACTN 
    LEFT JOIN INDUCTED_SCRIPTS AS IND 
        ON ACTN.FISCAL_MONTH_NBR = IND.FISCAL_MONTH_NBR
    WHERE IND.FISCAL_MONTH_NBR IS NOT NULL
    );
    
    ----------------------------------------------------------------------------------------------
    -------------------------------STR AND ONR/ONRBPT GATHER--------------------------------------
    ----------------------------------------------------------------------------------------------
    
    CREATE OR REPLACE TEMPORARY TABLE ACTION_NOTES AS ( 
        SELECT 
              RX_NBR 
            , STORE_NBR 
            , FILL_NBR 
            , RXC_PATIENT_ID 
            , ACTION_NOTES_TYPE_CD 
            , REC_EFF_TS 
            , CREATED_TS
            , LAST_UPDATED_TS
            , DATEDIFF(DAY, CREATED_TS, LAST_UPDATED_TS) AS DAYS_TO_RESOLVE
            , TO_DATE(REC_EFF_TS) AS ACTION_NOTE_DATE
        FROM CORE_RX.CURATED_SCRIPT.RXC_ACTION_NOTE 
        WHERE 
            TO_DATE(REC_EFF_TS) BETWEEN :START_DATE AND :END_DATE
        ); 
    
    CREATE OR REPLACE TEMPORARY TABLE ONR_ACTION_NOTES AS ( 
    SELECT 
        ACTN. *, 
        ONR.FIRST_ATTEMPT_ORDER_READY, 
        ONR.ONR_BFR_PRMS
    FROM ACTION_NOTES AS ACTN 
    LEFT JOIN APP_OMNIRX.OMNI_DL.ONR_FINAL_TBL AS ONR 
        ON ACTN.RX_NBR = ONR.NEW_RX_NBR 
        AND ACTN.STORE_NBR = ONR.STORE_NBR 
        AND ACTN.FILL_NBR = ONR.NEW_FILL_NBR
    );
    
    CREATE OR REPLACE TEMPORARY TABLE QV2_TIMESTAMP AS ( 
    SELECT 
          X.RX_NBR 
        , X.STORE_NBR 
        , X.FILL_NBR 
        , MIN(PACT.REC_EFF_TS) AS QV2_DATE
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_ACTIVITY AS PACT
    JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_XREF AS X
        ON PACT.RXC_PRESCRIPTION_FILL_ID = X.RXC_PRESCRIPTION_FILL_ID
    JOIN ACTION_NOTES AS ACTN 
        ON X.RX_NBR = ACTN.RX_NBR 
        AND X.STORE_NBR = ACTN.STORE_NBR 
        AND X.FILL_NBR = ACTN.FILL_NBR
    WHERE 
        ACTIVITY_CD IN (4)
        AND TO_DATE(PACT.REC_EFF_TS) > :START_DATE
    GROUP BY 1,2,3
    );
    
    CREATE OR REPLACE TEMPORARY TABLE ACTION_NOTES_STEP2 AS ( 
    SELECT 
        ACTN. *, 
          ONR.FIRST_ATTEMPT_ORDER_READY
        , ONR.ONR_BFR_PRMS 
        , QV2.QV2_DATE
        , PF.POS_TXN_TS
        , PF.FILL_STATUS_CD 
        , FIS.FISCAL_MONTH_NBR
        , DATEDIFF(DAY, QV2.QV2_DATE, PF.POS_TXN_TS) AS DAYS_UNTIL_SOLD
    FROM ACTION_NOTES AS ACTN 
    LEFT JOIN ONR_ACTION_NOTES AS ONR 
        ON ACTN.RX_NBR = ONR.RX_NBR 
        AND ACTN.STORE_NBR = ONR.STORE_NBR 
        AND ACTN.FILL_NBR = ONR.FILL_NBR
    LEFT JOIN QV2_TIMESTAMP AS QV2 
        ON ACTN.RX_NBR = QV2.RX_NBR 
        AND ACTN.STORE_NBR = QV2.STORE_NBR 
        AND ACTN.FILL_NBR = QV2.FILL_NBR
    LEFT JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF 
        ON ACTN.RX_NBR = PF.RX_NBR 
        AND ACTN.STORE_NBR = PF.STORE_NBR 
        AND ACTN.FILL_NBR = PF.FILL_NBR
    LEFT JOIN (SELECT
                      FISCAL_WEEK_NBR 
                    , FISCAL_MONTH_NBR
                    , START_DT 
                    , END_DT
               FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK
               WHERE FISCAL_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END) AS FIS 
        ON ACTN.ACTION_NOTE_DATE BETWEEN FIS.START_DT AND FIS.END_DT
    );
    
    CREATE OR REPLACE TEMPORARY TABLE STR_ONR_EXCEPTION_OUTREACHES AS (
    SELECT
          FISCAL_MONTH_NBR
        , COUNT(DISTINCT CONCAT(RX_NBR, '-', STORE_NBR,'-', FILL_NBR)) AS TOTAL_RX_WITH_ACTION_NOTE
        , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('Y','N') THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_DEN
        , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('N') THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_NUM
        , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_THROUGH_QV2
        , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL AND POS_TXN_TS IS NOT NULL AND DAYS_UNTIL_SOLD BETWEEN 0 AND 14 THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_SOLD
        , AVG(CASE WHEN DAYS_TO_RESOLVE BETWEEN 0 AND 25 THEN DAYS_TO_RESOLVE ELSE NULL END) AS AVERAGE_DAYS_TO_RESOLVE
        , AVG(DAYS_TO_RESOLVE) AS AVG_DAYS_TO_RESOLVE
    FROM ACTION_NOTES_STEP2 
    GROUP BY 1)
    ;
        
    CREATE OR REPLACE TEMPORARY TABLE EXCEPTION_OUTREACH_DASHBOARD AS (
    SELECT 
          T1.FISCAL_MONTH_NBR 
        , T1.TOTAL_ACTION_NOTES 
        , T1.TOTAL_RX_WITH_ACTION_NOTE 
        , T1.TTL_INDUCTED 
        , CAST(T1.TOTAL_RX_WITH_ACTION_NOTE AS DECIMAL(14,4)) / CAST(T1.TTL_INDUCTED AS DECIMAL(14,4)) AS SCRIPTS_WITH_ACTION_NOTES 
        , CAST(T1.TOTAL_ACTION_NOTES AS DECIMAL(14,4)) / CAST(T1.TOTAL_RX_WITH_ACTION_NOTE AS DECIMAL(14,4)) AS ACTION_NOTES_PER_SCRIPT
        , T2.ONR_DEN 
        , T2.ONR_NUM 
        , CAST(T2.ONR_NUM AS DECIMAL(14,4)) / CAST(T2.ONR_DEN AS DECIMAL(14,4)) AS ONR_RATE
        , T2.SCRIPTS_THROUGH_QV2 
        , T2.SCRIPTS_SOLD 
        , CAST(T2.SCRIPTS_SOLD AS DECIMAL(14,4)) / CAST(T2.SCRIPTS_THROUGH_QV2 AS DECIMAL(14,4)) AS STR
        , CAST(T2.AVERAGE_DAYS_TO_RESOLVE AS DECIMAL(14,4)) AS AVERAGE_DAYS_TO_RESOLVE
        , FIS.FISCAL_MONTH_DSC 
        , FIS.START_DT 
        , FIS.END_DT
    FROM EXCEPTION_OUTREACH_VOLUME AS T1 
    LEFT JOIN STR_ONR_EXCEPTION_OUTREACHES AS T2 
        ON T1.FISCAL_MONTH_NBR = T2.FISCAL_MONTH_NBR
    LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FIS 
        ON T1.FISCAL_MONTH_NBR = FIS.FISCAL_MONTH_NBR
    WHERE END_DT < CURRENT_DATE()
    );
    
    -----------------------------------------------------------------------------------------------------
    ------------------------------------GATHER THE CHAIN METRICS-----------------------------------------
    -----------------------------------------------------------------------------------------------------
    --CHAIN ONR
    CREATE OR REPLACE TEMPORARY TABLE CHAIN_ONR AS ( 
    SELECT 
           FIS.FISCAL_MONTH_NBR 
         , SUM(DL.TOTAL_ONR) AS TOTAL_ONR 
         , SUM(DL.TOTAL_SCRIPTS) AS TOTAL_RX 
    FROM APP_OMNIRX.OMNI_KPI.SF_ONR_ONRBPT AS DL 
    LEFT JOIN (SELECT 
                      FISCAL_MONTH_NBR
                    , START_WEEK_NBR 
                    , END_WEEK_NBR
               FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH
               WHERE START_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END) AS FIS 
        ON DL.FISCAL_WEEK_NBR BETWEEN FIS.START_WEEK_NBR AND FIS.END_WEEK_NBR
    GROUP BY 1
    );
    
    --CHAIN STR
    CREATE OR REPLACE TEMPORARY TABLE QV2_TIMESTAMP AS ( 
    SELECT 
          X.RX_NBR 
        , X.STORE_NBR 
        , X.FILL_NBR 
        , MIN(PACT.REC_EFF_TS) AS QV2_DATE
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_ACTIVITY AS PACT
    JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_XREF AS X
        ON PACT.RXC_PRESCRIPTION_FILL_ID = X.RXC_PRESCRIPTION_FILL_ID
    WHERE 
        ACTIVITY_CD IN (4)
        AND TO_DATE(PACT.REC_EFF_TS) > :START_DATE
    GROUP BY 1,2,3
    );
    
    CREATE OR REPLACE TEMPORARY TABLE POS_TXN_TS AS ( 
    SELECT DISTINCT
          PF.RX_NBR 
        , PF.FILL_NBR 
        , PF.STORE_NBR 
        , QV2.QV2_DATE
        , CASE 
            WHEN PF.FILL_STATUS_CD IN (7) THEN 1 
            ELSE 0 
          END AS SOLD_IND
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF 
    JOIN QV2_TIMESTAMP AS QV2 
        ON PF.RX_NBR = QV2.RX_NBR 
        AND PF.STORE_NBR = QV2.STORE_NBR 
        AND PF.FILL_NBR = QV2.FILL_NBR
    );
    
    CREATE OR REPLACE TEMPORARY TABLE SOLD_RATE AS ( 
    SELECT 
          FIS.FISCAL_MONTH_NBR
        , COUNT(DISTINCT CASE WHEN SOLD_IND = 1 THEN CONCAT(RX_NBR, '-',STORE_NBR,'-',FILL_NBR) ELSE NULL END) AS SOLD_RX 
        , COUNT(DISTINCT CONCAT(RX_NBR,'-',STORE_NBR,'-',FILL_NBR)) AS ALL_RX 
    FROM POS_TXN_TS AS POS 
    LEFT JOIN (SELECT 
                      START_DT 
                    , END_DT 
                    , FISCAL_MONTH_NBR
               FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH
               WHERE START_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END) AS FIS 
        ON TO_DATE(POS.QV2_DATE) BETWEEN FIS.START_DT AND FIS.END_DT
    GROUP BY 1
    );
    
    CREATE OR REPLACE TEMPORARY TABLE EXCEPTION_OUTREACH_DASHBOARD AS (
    SELECT 
              T1.FISCAL_MONTH_NBR 
            , T1.TOTAL_ACTION_NOTES 
            , T1.TOTAL_RX_WITH_ACTION_NOTE 
            , T1.TTL_INDUCTED
            , TO_CHAR(T1.SCRIPTS_WITH_ACTION_NOTES, '9,999,999.9999') AS SCRIPTS_WITH_ACTION_NOTES 
            , TO_CHAR(T1.ACTION_NOTES_PER_SCRIPT, '9,999,999.9999') AS ACTION_NOTES_PER_SCRIPT
            , ONR_DEN 
            , ONR_NUM 
            , TO_CHAR(T1.ONR_RATE, '9,999,999.9999') AS ONR_RATE 
            , SCRIPTS_THROUGH_QV2
            , SCRIPTS_SOLD 
            , TO_CHAR(T1.STR, '9,999,999.9999') AS STR 
            , TO_CHAR(T1.AVERAGE_DAYS_TO_RESOLVE, '9,999,999.9999') AS AVERAGE_DAYS_TO_RESOLVE 
            , TO_CHAR(T2.ONR_CHAIN, '9,999,999.9999') AS ONR_CHAIN
            , TO_CHAR(T3.STR_CHAIN, '9,999,999.9999') AS STR_CHAIN
            , FISCAL_MONTH_DSC 
            , START_DT 
            , END_DT
    FROM EXCEPTION_OUTREACH_DASHBOARD AS T1 
    LEFT JOIN (SELECT 
                    FISCAL_MONTH_NBR 
                  , CAST(TOTAL_ONR AS DECIMAL(14,4)) / CAST(TOTAL_RX AS DECIMAL(14,4)) AS ONR_CHAIN
               FROM CHAIN_ONR) AS T2 
            ON T1.FISCAL_MONTH_NBR = T2.FISCAL_MONTH_NBR
    LEFT JOIN (SELECT 
                    FISCAL_MONTH_NBR 
                  , CAST(SOLD_RX AS DECIMAL(14,4)) / CAST(ALL_RX AS DECIMAL(14,4)) AS STR_CHAIN
               FROM SOLD_RATE) AS T3 
        ON T1.FISCAL_MONTH_NBR = T3.FISCAL_MONTH_NBR
    );
    
    CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.EXCEPTION_OUTREACH_DASHBOARD AS ( 
    SELECT * FROM EXCEPTION_OUTREACH_DASHBOARD
);

CREATE OR REPLACE TEMPORARY TABLE INDUCTED_RX_BY_FISCAL_WEEK AS ( 
SELECT 
      FIS.FISCAL_WEEK_NBR 
    , FIS.FISCAL_WEEK_DSC
    , COUNT(DISTINCT CONCAT(RX_NBR, '-', STORE_NBR, '-', FILL_NBR)) AS INDUCTED_RX
FROM INDUCTED_RX AS IND 
JOIN FIS_WEEK AS FIS 
    ON TO_DATE(IND.INDUCTION_DATE) BETWEEN FIS.START_DT AND FIS.END_DT
GROUP BY ALL
);
    
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
--STR AND ONR/ONRBPT GATHER
CREATE OR REPLACE TEMPORARY TABLE ACTION_NOTES AS ( 
SELECT DISTINCT
        ACTN.RX_NBR 
    , ACTN.STORE_NBR 
    , ACTN.FILL_NBR 
    , ACTN.RXC_PATIENT_ID 
    , ACTN.ACTION_NOTES_TYPE_CD 
    , ACTN.REC_EFF_TS 
    , ACTN.CREATED_TS
    , ACTN.LAST_UPDATED_TS
    , CASE 
        WHEN PATIENT_CONTACT_OUTCOME_CD IN ('99') THEN 'OPTION T'
        WHEN PATIENT_CONTACT_OUTCOME_CD IN ('98') THEN 'SYSTEMATIC'
        WHEN CALL_SMS_IND IN ('5') THEN 'SUPPRESS'
        WHEN PATIENT_CONTACT_OUTCOME_CD IN ('1','2','3','4','5','6','7','8') THEN 'OPTION 1-8'
        ELSE 'UNKNOWN'
        END AS TRIGGER_POINT
    , CASE WHEN ACTION_NOTES_TYPE_CD = '1' THEN 'TP REJECT NEED UPDATED INSURANCE'
        WHEN ACTION_NOTES_TYPE_CD = '2' THEN 'PARITAL FILL'
        WHEN ACTION_NOTES_TYPE_CD = '3' THEN 'BRIDGE SUPPLY'
        WHEN ACTION_NOTES_TYPE_CD = '4' THEN 'OUT OF STOCK'
        WHEN ACTION_NOTES_TYPE_CD = '5' THEN 'REFILL RENEWAL DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '6' THEN 'MCHOICE DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '7' THEN 'PRIOR AUTH DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '8' THEN 'GEN SUB DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '9' THEN 'REFILL TOO SOON'
        WHEN ACTION_NOTES_TYPE_CD = '10' THEN 'TP REJECT - PRIOR AUTH'
        WHEN ACTION_NOTES_TYPE_CD = '11' THEN  'GENSUB UPDATE PROMISE TIME'
        WHEN ACTION_NOTES_TYPE_CD = '12' THEN 'ORQ NOT FILLABLE'
        WHEN ACTION_NOTES_TYPE_CD = '13' THEN 'ORQ SOLD PRIOR'
        WHEN ACTION_NOTES_TYPE_CD = '15' THEN 'CANCEL ERX'
        WHEN ACTION_NOTES_TYPE_CD = '16' THEN 'THIRD ATTEMPT REFILL RENEWAL'
        WHEN ACTION_NOTES_TYPE_CD = '17' THEN 'THIRD ATTEMPT MCHOICE'
        WHEN ACTION_NOTES_TYPE_CD = '18' THEN 'THIRD ATTEMPT PRIOR AUTH'
        WHEN ACTION_NOTES_TYPE_CD = '19' THEN 'THIRD ATTEMPT GENSUB'
        WHEN ACTION_NOTES_TYPE_CD = '20' THEN 'REFER TO PRESCRIBER REFILL RENEWAL'
        WHEN ACTION_NOTES_TYPE_CD = '21' THEN 'REFER TO PRESCRIBER MCHOICE'
        WHEN ACTION_NOTES_TYPE_CD = '22' THEN 'REFER TO PRESCRIBER PRIOR AUTH'
        WHEN ACTION_NOTES_TYPE_CD = '23' THEN 'REFER TO PRESCRIBER GEN SUB'
        WHEN ACTION_NOTES_TYPE_CD = '24' THEN 'RESTART CADENCE REFILL RENEWAL'
        WHEN ACTION_NOTES_TYPE_CD = '25' THEN 'RESTART CADENCE MCHOICE'
        WHEN ACTION_NOTES_TYPE_CD = '26' THEN 'RESTART CADENCE PRIOR AUTH'
        WHEN ACTION_NOTES_TYPE_CD = '27' THEN 'RESTART CACADENCE GENSUB'
        WHEN ACTION_NOTES_TYPE_CD = '28' THEN 'REFILL RENEWAL UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '29' THEN 'MCHOICE UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '30' THEN 'PRIOR AUTH UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '31' THEN 'TP REJECT, EDIT TO CASH - MED NOT COVERED'
        WHEN ACTION_NOTES_TYPE_CD = '32' THEN 'TP REJECT, EDIT TO CASH -  PLAN LIMITATIONS'
        WHEN ACTION_NOTES_TYPE_CD = '33' THEN 'TP REJECT, EDIT TO CASH - REFILL TOO SOON'
        WHEN ACTION_NOTES_TYPE_CD = '34' THEN 'TP REJECT, EDIT TO CASH - OTHER'
        WHEN ACTION_NOTES_TYPE_CD = '35' THEN 'DRUG REQUIRES ADJUDICATION'
        WHEN ACTION_NOTES_TYPE_CD = '36' THEN 'INVALID REFILL MCHOICE GEN SUB'
        WHEN ACTION_NOTES_TYPE_CD = '37' THEN 'INVALID NEW RX'
        WHEN ACTION_NOTES_TYPE_CD = '38' THEN 'CMS APPEALS NOTICE'
        WHEN ACTION_NOTES_TYPE_CD = '39' THEN 'READYFILL MATCH'
        WHEN ACTION_NOTES_TYPE_CD = '40' THEN 'DAYS SUPPLY NEW RX'
        WHEN ACTION_NOTES_TYPE_CD = '41' THEN 'DAYS SUPPLY REFILL'
        WHEN ACTION_NOTES_TYPE_CD = '42' THEN 'SIGNATURE REQUIRED'
        WHEN ACTION_NOTES_TYPE_CD = '43' THEN 'THIRD ATTEMPT HARD COPY'
        WHEN ACTION_NOTES_TYPE_CD = '44' THEN 'REFER TO PRESCRIBER HARD COPY'
        WHEN ACTION_NOTES_TYPE_CD = '45' THEN 'RESTART CADENCE HARD COPY'
        WHEN ACTION_NOTES_TYPE_CD = '46' THEN 'UPDATE PROMISE HARD COPY'
        WHEN ACTION_NOTES_TYPE_CD = '47' THEN 'HARD COPY REQUIRED'
        WHEN ACTION_NOTES_TYPE_CD = '48' THEN 'PAE ON HOLD PRESCRIBER VALIDATION'
        WHEN ACTION_NOTES_TYPE_CD = '49' THEN 'PAE ON HOLD PRESCRIBER REGULATORY VALIDATION'
        WHEN ACTION_NOTES_TYPE_CD = '51' THEN 'SSRF FAILURE'
        WHEN ACTION_NOTES_TYPE_CD = '52' THEN 'SS ONLY FAILURE'
        WHEN ACTION_NOTES_TYPE_CD = '53' THEN 'INSURANCE CARD IMAGE'
        WHEN ACTION_NOTES_TYPE_CD = '54' THEN 'CVS VIAL IMAGE'
        WHEN ACTION_NOTES_TYPE_CD = '56' THEN 'NON PREF DRUG'
        WHEN ACTION_NOTES_TYPE_CD = '57' THEN 'CODE DEA ERRORC1'
        WHEN ACTION_NOTES_TYPE_CD = '58' THEN 'DEA ERROR CHANGE ALLOWED'
        WHEN ACTION_NOTES_TYPE_CD = '59' THEN 'DEA ERROR CHANGE NOT ALLOWED'
        WHEN ACTION_NOTES_TYPE_CD = '61' THEN 'PCR CREATION'
        WHEN ACTION_NOTES_TYPE_CD = '62' THEN 'PCR CHANGERX'
        WHEN ACTION_NOTES_TYPE_CD = '63' THEN 'PCR DO NOT FILL'
        WHEN ACTION_NOTES_TYPE_CD = '64' THEN 'PCR THIRD ATTEMPT'
        WHEN ACTION_NOTES_TYPE_CD = '65' THEN 'PCR REST ARTCADE'
        WHEN ACTION_NOTES_TYPE_CD = '66' THEN 'PCR UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '67' THEN 'PCR REFER TO PRESC'
        WHEN ACTION_NOTES_TYPE_CD = '68' THEN 'SPECIALTY REQUEST'
        WHEN ACTION_NOTES_TYPE_CD = '69' THEN 'REFER TO PRESCISP'
        WHEN ACTION_NOTES_TYPE_CD = '70' THEN 'RESTART CAD ISP'
        WHEN ACTION_NOTES_TYPE_CD = '71' THEN 'THIRD ATTEMPT ISP'
        WHEN ACTION_NOTES_TYPE_CD = '72' THEN 'UPDATED PROMISE ISP'
        WHEN ACTION_NOTES_TYPE_CD = '73' THEN 'REMS PATIENT ID'
        WHEN ACTION_NOTES_TYPE_CD = '74' THEN 'REMS PATIENT ID DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '75' THEN 'THIRD ATT DIAGNOSIS CODE'
        WHEN ACTION_NOTES_TYPE_CD = '76' THEN 'REFER TO PRESC DIAGNOSIS CODE'
        WHEN ACTION_NOTES_TYPE_CD = '77' THEN 'REST CAD DIAGNOSIS CODE'
        WHEN ACTION_NOTES_TYPE_CD = '78' THEN 'UPDATE PROMISED DIAGNOSIS CODE'
        WHEN ACTION_NOTES_TYPE_CD = '79' THEN 'DIAGNOSIS CODE REQUIRED'
        WHEN ACTION_NOTES_TYPE_CD = '80' THEN 'PAE CVS CONTRSUBSTMON'
        WHEN ACTION_NOTES_TYPE_CD = '81' THEN 'PAE DECEASED PRESC'
        WHEN ACTION_NOTES_TYPE_CD = '82' THEN 'PAE PRESC EXC THIRDPARTY'
        WHEN ACTION_NOTES_TYPE_CD = '83' THEN 'PAE PRESC VALID EXC'
        WHEN ACTION_NOTES_TYPE_CD = '84' THEN 'PAE PRESC REG VALID EXC'
        WHEN ACTION_NOTES_TYPE_CD = '85' THEN  'PAE OTHER'
        WHEN ACTION_NOTES_TYPE_CD = '86' THEN 'PAEONHOLDHELPDESKCREATE'
        WHEN ACTION_NOTES_TYPE_CD = '87' THEN 'PAEONHOLDHELPDESKUPDATE'
        WHEN ACTION_NOTES_TYPE_CD = '88' THEN 'PAEONHOLDHELPDESKLASTATT'
        WHEN ACTION_NOTES_TYPE_CD = '89' THEN 'HIGH COST HOLD'
        WHEN ACTION_NOTES_TYPE_CD = '90' THEN  'INACTIVE RX REGULATORY'
        WHEN ACTION_NOTES_TYPE_CD = '91' THEN 'PATIENT REGULATORY'
        WHEN ACTION_NOTES_TYPE_CD = '92' THEN 'SCHEDULE RX REGULATORY'
        WHEN ACTION_NOTES_TYPE_CD = '93' THEN 'PATIENT REGULATORY CVS TRANSFER'
        WHEN ACTION_NOTES_TYPE_CD = '94' THEN 'ON HOLD RX REGULATORY'
        WHEN ACTION_NOTES_TYPE_CD = '95' THEN 'PCR REGULATORY CREATE'
        WHEN ACTION_NOTES_TYPE_CD = '96' THEN 'PCR REGULATORY THIRDATT'
        WHEN ACTION_NOTES_TYPE_CD = '97' THEN 'PCR REGULATORY REST CADENCE'
        WHEN ACTION_NOTES_TYPE_CD = '98' THEN 'PCR REGULATORY UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '99' THEN 'PCRREGULATORYREFERTOPRESC'
        WHEN ACTION_NOTES_TYPE_CD = '102' THEN 'TRANSFER REQUEST'
        WHEN ACTION_NOTES_TYPE_CD = '109' THEN 'PAE CONTROL SUBSTREGIST'
        WHEN ACTION_NOTES_TYPE_CD = '110' THEN 'INVALID ADDRESS'
        WHEN ACTION_NOTES_TYPE_CD = '111' THEN 'DELIVERY COUNSELING'
        WHEN ACTION_NOTES_TYPE_CD = '112' THEN 'AOB NOT RECEIVED'
        WHEN ACTION_NOTES_TYPE_CD = '113' THEN 'AOB REQUIRED'
        WHEN ACTION_NOTES_TYPE_CD = '114' THEN 'BOE INITIAL'
        WHEN ACTION_NOTES_TYPE_CD = '115' THEN 'BOE REPROMPT'
        WHEN ACTION_NOTES_TYPE_CD = '116' THEN 'ABN NOT RECEIVED'
        WHEN ACTION_NOTES_TYPE_CD = '117' THEN 'ABN REQUIRED'
        WHEN ACTION_NOTES_TYPE_CD = '118' THEN 'GAP IN CARE THIRD ATTEMPT'
        WHEN ACTION_NOTES_TYPE_CD = '119' THEN 'GAP IN CARE REFER TO PRESCRIBER'
        WHEN ACTION_NOTES_TYPE_CD = '120' THEN 'GAP IN CARE REST CADENCE'
        WHEN ACTION_NOTES_TYPE_CD = '121' THEN 'GAP IN CARE DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '122' THEN 'TPBC CREATE'
        WHEN ACTION_NOTES_TYPE_CD = '123' THEN 'TPBC REFER TO PRESCRIBER'
        WHEN ACTION_NOTES_TYPE_CD = '124' THEN 'TPBC DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '125' THEN 'TPBC RESTART CADENCE'
        WHEN ACTION_NOTES_TYPE_CD = '126' THEN 'TPBC THIRD ATTEMPT'
        WHEN ACTION_NOTES_TYPE_CD = '127' THEN 'TPBC UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '129' THEN 'PATIENT CALL FAILURE'
        WHEN ACTION_NOTES_TYPE_CD = '130' THEN 'PR INITIATED'
        WHEN ACTION_NOTES_TYPE_CD = '131' THEN 'PR RESTART CADENCE'
        WHEN ACTION_NOTES_TYPE_CD = '132' THEN 'GAP IN CARE UPDATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '133' THEN 'PR THIRD ATTEMPT'
        WHEN ACTION_NOTES_TYPE_CD = '134' THEN 'PR REFER TO PRESCRIBER'
        WHEN ACTION_NOTES_TYPE_CD = '135' THEN 'PR DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '136' THEN 'UNABLE TO CONTACT'
        WHEN ACTION_NOTES_TYPE_CD = '137' THEN 'DUR WILL TALK TO PATIENT'
        WHEN ACTION_NOTES_TYPE_CD = '138' THEN 'DUR PRESCRIBER APPROVED'
        WHEN ACTION_NOTES_TYPE_CD = '139' THEN 'PR UDPATE PROMISE'
        WHEN ACTION_NOTES_TYPE_CD = '140' THEN 'NEW DRUG COUPON OFFER'
        WHEN ACTION_NOTES_TYPE_CD = '141' THEN 'NEW DRUG COUPON APPLIED'
        WHEN ACTION_NOTES_TYPE_CD = '142' THEN 'NEW DRUG COUPON CONSUMED OR EXPIRED'
        WHEN ACTION_NOTES_TYPE_CD = '143' THEN 'NEW DRUG COUPON OFFER REENROLLMENT'
        WHEN ACTION_NOTES_TYPE_CD = '144' THEN 'TP REJECT PRESCRIBER NOT ENROLLED'
        WHEN ACTION_NOTES_TYPE_CD = '145' THEN 'TP REJECT WORKS COMP'
        WHEN ACTION_NOTES_TYPE_CD = '146' THEN 'TP REJECT, EDIT TO CASH - PHARMACY NOT CONTRACTED WITH PLAN'
        WHEN ACTION_NOTES_TYPE_CD = '147' THEN 'TP REJECT SUSPEND FILL'
        WHEN ACTION_NOTES_TYPE_CD = '148' THEN 'SEASONAL PATIENT TRANSFER FAILURE'
        WHEN ACTION_NOTES_TYPE_CD = '149' THEN 'INELIGIBLE COMPOUND'
        WHEN ACTION_NOTES_TYPE_CD = '151' THEN 'GAP IN CARE REFER'
        WHEN ACTION_NOTES_TYPE_CD = '153' THEN 'GAP IN CARE DENIED'
        WHEN ACTION_NOTES_TYPE_CD = '155' THEN 'CEM FILL OPTIONS DEFAULT'
        WHEN ACTION_NOTES_TYPE_CD = '156' THEN 'CEM FILL OPTIONS CONFIRM'
        WHEN ACTION_NOTES_TYPE_CD = '157' THEN 'CEM FILL OPTIONS BACKORDER'
        WHEN ACTION_NOTES_TYPE_CD = '158' THEN 'HORMONAL PRESCRIBING'
        WHEN ACTION_NOTES_TYPE_CD = '159' THEN 'DME CALL CENTER'
        WHEN ACTION_NOTES_TYPE_CD = '160' THEN 'DME RESUPPLY'
        WHEN ACTION_NOTES_TYPE_CD = '161' THEN 'LONG TERM BACK ORDER'
        ELSE NULL END AS ACTION_NOTE_TYPE
    , DATEDIFF(DAY, CREATED_TS, LAST_UPDATED_TS) AS DAYS_TO_RESOLVE
    , TO_DATE(REC_EFF_TS) AS ACTION_NOTE_DATE
FROM CORE_RX.CURATED_SCRIPT.RXC_ACTION_NOTE AS ACTN
JOIN FIS_WEEK AS FIS 
    ON TO_DATE(ACTN.CREATED_TS) BETWEEN FIS.START_DT AND FIS.END_DT
JOIN BASE_RX AS BASE 
    ON ACTN.RX_NBR = BASE.RX_NBR 
    AND ACTN.FILL_NBR = BASE.FILL_NBR 
    AND ACTN.STORE_NBR = BASE.STORE_NBR 
WHERE 
    TO_DATE(REC_EFF_TS) BETWEEN :START_DATE AND :END_DATE
    AND (ACTN.RX_NBR IS NULL OR NOT (BASE.SOURCE_CD IN (1) AND RX_ORIGIN_CD IN ('1','5') AND BASE.FILL_NBR = 0)) --MANUALLY ENTERED
    AND (ACTN.RX_NBR IS NULL OR NOT (BASE.SOURCE_CD IN (1) AND BASE.FILL_NBR >= 1)) --MANUALLY ENTERED
); 

CREATE OR REPLACE TEMPORARY TABLE ACTION_NOTES_STEP2 AS ( 
    SELECT DISTINCT
        ACTN. *, 
        ONR.FIRST_ATTEMPT_ORDER_READY
    , ONR.ONR_BFR_PRMS 
    , QV2.QV2_DATE
    , PF.POS_TXN_TS
    , PF.FILL_STATUS_CD 
    , FIS.FISCAL_MONTH_NBR
    , FIS.FISCAL_WEEK_NBR
    , DATEDIFF(DAY, QV2.QV2_DATE, PF.POS_TXN_TS) AS DAYS_UNTIL_SOLD
FROM ACTION_NOTES AS ACTN 
LEFT JOIN ONR_ACTION_NOTES AS ONR 
    ON ACTN.RX_NBR = ONR.RX_NBR 
    AND ACTN.STORE_NBR = ONR.STORE_NBR 
    AND ACTN.FILL_NBR = ONR.FILL_NBR
LEFT JOIN QV2_TIMESTAMP AS QV2 
    ON ACTN.RX_NBR = QV2.RX_NBR 
    AND ACTN.STORE_NBR = QV2.STORE_NBR 
    AND ACTN.FILL_NBR = QV2.FILL_NBR
LEFT JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF 
    ON ACTN.RX_NBR = PF.RX_NBR 
    AND ACTN.STORE_NBR = PF.STORE_NBR 
    AND ACTN.FILL_NBR = PF.FILL_NBR
LEFT JOIN (SELECT
                    FISCAL_WEEK_NBR 
                , FISCAL_MONTH_NBR
                , START_DT 
                , END_DT
            FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK
            WHERE FISCAL_WEEK_NBR BETWEEN :FISCAL_WEEK_START AND :FISCAL_WEEK_END) AS FIS 
    ON ACTN.ACTION_NOTE_DATE BETWEEN FIS.START_DT AND FIS.END_DT
);

CREATE OR REPLACE TEMPORARY TABLE STR_ONR_EXCEPTION_OUTREACHES AS (
SELECT
      FISCAL_MONTH_NBR
    , ACTION_NOTE_TYPE
    , COUNT(*) AS TOTAL_ACTION_NOTES
    , COUNT(DISTINCT CONCAT(RX_NBR, '-', STORE_NBR,'-', FILL_NBR)) AS TOTAL_RX_WITH_ACTION_NOTE
    , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('Y','N') AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_DEN
    , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('N') AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_NUM
    , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_THROUGH_QV2
    , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL AND QV2_DATE <= (CURRENT_DATE() - 14) AND POS_TXN_TS IS NOT NULL AND DAYS_UNTIL_SOLD BETWEEN 0 AND 14 THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_SOLD
    , AVG(CASE WHEN DAYS_TO_RESOLVE BETWEEN 0 AND 30 THEN DAYS_TO_RESOLVE ELSE NULL END) AS AVERAGE_DAYS_TO_RESOLVE
    , AVG(DAYS_TO_RESOLVE) AS AVG_DAYS_TO_RESOLVE
    , COUNT(CASE WHEN TRIGGER_POINT IN ('SUPPRESS') THEN ACTION_NOTE_TYPE ELSE NULL END) AS SUPPPRESSED_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('SYSTEMATIC') THEN ACTION_NOTE_TYPE ELSE NULL END) AS SYSTEMATIC_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('OPTION T') THEN ACTION_NOTE_TYPE ELSE NULL END) AS OPTIONT_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('UNKNOWN') THEN ACTION_NOTE_TYPE ELSE NULL END) AS UNKNOWN_COUNT
    , COUNT(CASE WHEN TRIGGER_POINT IN ('OPTION 1-8') THEN ACTION_NOTE_TYPE ELSE NULL END) AS OPTION_ONE_THROUGH_EIGHT
FROM ACTION_NOTES_STEP2 
GROUP BY 1,2);

CREATE OR REPLACE TEMPORARY TABLE EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL AS (
SELECT 
      T1.FISCAL_MONTH_NBR 
    , T1.ACTION_NOTE_TYPE 
    , T1.TOTAL_ACTION_NOTES
    , T1.ONR_DEN 
    , T1.ONR_NUM 
    , CAST(T1.ONR_NUM AS DECIMAL(14,4)) / NULLIF(CAST(T1.ONR_DEN AS DECIMAL(14,4)),0) AS ONR_RATE
    , T1.SCRIPTS_THROUGH_QV2 
    , T1.SCRIPTS_SOLD 
    , CAST(T1.SCRIPTS_SOLD AS DECIMAL(14,4)) / NULLIF(CAST(T1.SCRIPTS_THROUGH_QV2 AS DECIMAL(14,4)),0) AS STR
    , CAST(T1.AVERAGE_DAYS_TO_RESOLVE AS DECIMAL(14,4)) AS AVERAGE_DAYS_TO_RESOLVE
    , T1.SUPPPRESSED_COUNT 
    , T1.SYSTEMATIC_COUNT 
    , T1.OPTIONT_COUNT 
    , T1.UNKNOWN_COUNT
    , T1.OPTION_ONE_THROUGH_EIGHT
    , FIS.FISCAL_MONTH_DSC 
    , FIS.START_DT 
    , FIS.END_DT
FROM STR_ONR_EXCEPTION_OUTREACHES AS T1
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FIS 
    ON T1.FISCAL_MONTH_NBR = FIS.FISCAL_MONTH_NBR
WHERE END_DT < CURRENT_DATE()
);

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL AS (
SELECT 
          T1.FISCAL_MONTH_NBR 
        , T1.ACTION_NOTE_TYPE
        , T1.TOTAL_ACTION_NOTES 
        , T1.SUPPPRESSED_COUNT 
        , T1.SYSTEMATIC_COUNT 
        , T1.OPTIONT_COUNT 
        , T1.UNKNOWN_COUNT
        , T1.OPTION_ONE_THROUGH_EIGHT
        , ONR_DEN 
        , ONR_NUM 
        , TO_CHAR(T1.ONR_RATE, '9,999,999.9999') AS ONR_RATE 
        , SCRIPTS_THROUGH_QV2
        , SCRIPTS_SOLD 
        , TO_CHAR(T1.STR, '9,999,999.9999') AS STR 
        , TO_CHAR(T1.AVERAGE_DAYS_TO_RESOLVE, '9,999,999.9999') AS AVERAGE_DAYS_TO_RESOLVE 
        , FISCAL_MONTH_DSC 
        , START_DT 
        , END_DT
FROM EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL AS T1 
);

CREATE OR REPLACE TEMPORARY TABLE STR_ONR_EXCEPTION_OUTREACHES_FISCAL_WEEK AS (
SELECT
      FISCAL_WEEK_NBR
    , ACTION_NOTE_TYPE
    , COUNT(*) AS TOTAL_ACTION_NOTES
    , COUNT(DISTINCT CONCAT(RX_NBR, '-', STORE_NBR,'-', FILL_NBR)) AS TOTAL_RX_WITH_ACTION_NOTE
    , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('Y','N') AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_DEN
    , COUNT(DISTINCT CASE WHEN FIRST_ATTEMPT_ORDER_READY IN ('N') AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR, '-', FILL_NBR) ELSE NULL END) AS ONR_NUM
    , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_THROUGH_QV2
    , COUNT(DISTINCT CASE WHEN QV2_DATE IS NOT NULL AND POS_TXN_TS IS NOT NULL AND DAYS_UNTIL_SOLD BETWEEN 0 AND 14 AND QV2_DATE <= (CURRENT_DATE() - 14) THEN CONCAT(RX_NBR,'-', STORE_NBR,'-', FILL_NBR) ELSE NULL END) AS SCRIPTS_SOLD
    , AVG(CASE WHEN DAYS_TO_RESOLVE BETWEEN 0 AND 30 THEN DAYS_TO_RESOLVE ELSE NULL END) AS AVERAGE_DAYS_TO_RESOLVE
    , AVG(DAYS_TO_RESOLVE) AS AVG_DAYS_TO_RESOLVE
    , COUNT(CASE WHEN TRIGGER_POINT IN ('SUPPRESS') THEN ACTION_NOTE_TYPE ELSE NULL END) AS SUPPPRESSED_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('SYSTEMATIC') THEN ACTION_NOTE_TYPE ELSE NULL END) AS SYSTEMATIC_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('OPTION T') THEN ACTION_NOTE_TYPE ELSE NULL END) AS OPTIONT_COUNT 
    , COUNT(CASE WHEN TRIGGER_POINT IN ('OPTION 1-8') THEN ACTION_NOTE_TYPE ELSE NULL END) AS OPTION_ONE_THROUGH_EIGHT
    , COUNT(CASE WHEN TRIGGER_POINT IN ('UNKNOWN') THEN ACTION_NOTE_TYPE ELSE NULL END) AS UNKNOWN_COUNT
FROM ACTION_NOTES_STEP2 AS STEP2
GROUP BY 1,2)
;

CREATE OR REPLACE TEMPORARY TABLE EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL_FISCAL_WEEK AS (
SELECT 
      T1.FISCAL_WEEK_NBR 
    , T1.ACTION_NOTE_TYPE 
    , T1.TOTAL_ACTION_NOTES
    , T1.ONR_DEN 
    , T1.ONR_NUM 
    , CAST(T1.ONR_NUM AS DECIMAL(14,4)) / NULLIF(CAST(T1.ONR_DEN AS DECIMAL(14,4)),0) AS ONR_RATE
    , T1.SCRIPTS_THROUGH_QV2 
    , T1.SCRIPTS_SOLD 
    , CAST(T1.SCRIPTS_SOLD AS DECIMAL(14,4)) / NULLIF(CAST(T1.SCRIPTS_THROUGH_QV2 AS DECIMAL(14,4)),0) AS STR
    , CAST(T1.AVERAGE_DAYS_TO_RESOLVE AS DECIMAL(14,4)) AS AVERAGE_DAYS_TO_RESOLVE
    , T1.SUPPPRESSED_COUNT 
    , T1.SYSTEMATIC_COUNT 
    , T1.OPTIONT_COUNT 
    , T1.OPTION_ONE_THROUGH_EIGHT
    , T1.UNKNOWN_COUNT
    , FIS.FISCAL_WEEK_DSC 
    , FIS.START_DT 
    , FIS.END_DT
FROM STR_ONR_EXCEPTION_OUTREACHES_FISCAL_WEEK AS T1
LEFT JOIN FIS_WEEK AS FIS 
    ON T1.FISCAL_WEEK_NBR = FIS.FISCAL_WEEK_NBR
WHERE END_DT < CURRENT_DATE()
);

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL_FISCAL_WEEK AS (
SELECT 
          T1.FISCAL_WEEK_NBR 
        , T1.ACTION_NOTE_TYPE
        , T1.TOTAL_ACTION_NOTES 
        , T1.SUPPPRESSED_COUNT 
        , T1.SYSTEMATIC_COUNT 
        , T1.OPTIONT_COUNT
        , T1.OPTION_ONE_THROUGH_EIGHT
        , T1.UNKNOWN_COUNT
        , ONR_DEN 
        , ONR_NUM 
        , TO_CHAR(T1.ONR_RATE, '9,999,999.9999') AS ONR_RATE 
        , SCRIPTS_THROUGH_QV2
        , SCRIPTS_SOLD 
        , TO_CHAR(T1.STR, '9,999,999.9999') AS STR 
        , TO_CHAR(T1.AVERAGE_DAYS_TO_RESOLVE, '9,999,999.9999') AS AVERAGE_DAYS_TO_RESOLVE 
        , IND.INDUCTED_RX
        , IND.FISCAL_WEEK_DSC 
        , START_DT 
        , END_DT
FROM EXCEPTION_OUTREACH_DASHBOARD_ACTION_NOTE_LEVEL_FISCAL_WEEK AS T1  
LEFT JOIN INDUCTED_RX_BY_FISCAL_WEEK AS IND 
    ON T1.FISCAL_WEEK_NBR = IND.FISCAL_WEEK_NBR
);

RETURN 'Task completed successfully';
END;
$$;


CALL Exception_Outreaches_Procedure();

Exception_Outreach_Scheduler.sql code:
USE DATABASE DL_RX_OPERATION;  -- Replace with your database name
USE SCHEMA RX_OPS_SANDBOX;      -- Replace with your schema name;      -- Replace with your schema name
USE WAREHOUSE WH_RX_QUERY_RXANALYTICS_01; -- Replace with your warehouse name

CREATE OR REPLACE TASK Exception_outreach_schedule
  WAREHOUSE = WH_RX_QUERY_RXANALYTICS_01
  SCHEDULE = 'USING CRON 15 2 * * 3 America/New_York'  -- This sets the task to run at 3:00 AM UTC every Wednesday
AS
  CALL Exception_Outreaches_Procedure();

ALTER TASK Exception_outreach_schedule RESUME;



CALL Exception_Outreaches_Procedure()
