First we run the python file to update the base tables and then we run snowflake code to create final 2 tables we use for telepharmacyExecutiveSummary.sql

-- snowflake source

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_EXECUTIVE_SUMMARY AS (
WITH STORE_MODEL AS (
    SELECT DISTINCT STORE AS STORE_NBR
        ,MODEL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE
),

STR_FW AS (
SELECT SW.STORE_NBR
    ,STR.MODEL
    ,SW.FISCAL_WEEK_NBR
    ,RX_BLENDED_NPS AS NPS_FW
    ,lag(RX_BLENDED_NPS) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS NPS_FW_PREV
    ,WECARE_SCORE AS WECARE_SCORE_FW
    ,LAG(WECARE_SCORE) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS WECARE_FW_PREV
    ,NULL AS OPI_FW
    ,NULL AS OPI_FW_PREV
    ,NULL AS MPC_FW
    ,NULL AS MPC_FW_PREV
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS TECH_AVD_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_TECH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS RPH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_RPH_AVD_FW
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK SW
INNER JOIN STORE_MODEL AS STR
    ON STR.STORE_NBR=SW.STORE_NBR
),

AVD_MONTH AS (
SELECT SW.STORE_NBR
    ,FW.FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) AS TECH_HRS_DEMAND_ADJ
FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK AS SW
    ON SW.FISCAL_WEEK_NBR=FW.FISCAL_WEEK_NBR AND (RPH_HRS_ACT_ADJ IS NOT NULL OR TECH_HRS_ACT_ADJ IS NOT NULL)
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FM.FISCAL_MONTH_NBR=FW.FISCAL_MONTH_NBR    
GROUP BY 1,2
ORDER BY 1,2
),
AVD_YTD AS (
SELECT STORE_NBR
    ,FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) OVER(PARTITION BY STORE_NBR ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ
FROM AVD_MONTH   
),
AVD_CHAIN AS (
SELECT 'CHAIN' AS CHAIN
    ,FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_CHAIN
    ,SUM(RPH_HRS_DEMAND_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_CHAIN
    ,SUM(TECH_HRS_ACT_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_CHAIN
    ,SUM(TECH_HRS_DEMAND_ADJ) OVER(PARTITION BY 1 ORDER BY FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_CHAIN
FROM AVD_MONTH
),
MPC_CHAIN AS (
SELECT  'CHAIN' AS CHAIN,
        MPC.FISCAL_MONTH_NBR,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'IMZ_SUCCESS_RATE' THEN MPC_SCORE END) AS IMZ_SUCCESS_RATE_MPC,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PCAP_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PCAP_TOTAL_SUCCESS_RATE_MPC,
        SUM(CASE WHEN COMPONENT_METRIC_NAME= 'PTO_TOTAL_SUCCESS_RATE' THEN MPC_SCORE END) AS PTO_TOTAL_SUCCESS_RATE_MPC,
        ROUND(100*((zeroifnull(IMZ_SUCCESS_RATE_MPC) + zeroifnull(PCAP_TOTAL_SUCCESS_RATE_MPC) + zeroifnull(PTO_TOTAL_SUCCESS_RATE_MPC))/ ((CASE WHEN IMZ_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END) + (CASE WHEN PCAP_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 30 END)+ (CASE WHEN PTO_TOTAL_SUCCESS_RATE_MPC IS NULL THEN 0 ELSE 35 END))),0) AS MPC_CHAIN
FROM    APP_RTL_RONBA.SOPS_MPC_RPT.RPT_MPC_CHAIN_WEEK_MTD AS MPC
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  MPC.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=MPC.FISCAL_WEEK_NBR
WHERE MPC.FISCAL_YEAR_NBR >= 2024
    AND COMPONENT_METRIC_NAME IN ('IMZ_SUCCESS_RATE', 'PCAP_TOTAL_SUCCESS_RATE','PTO_TOTAL_SUCCESS_RATE')
    AND CHAIN = 'ALL'
GROUP BY 1,2
),
OPI_CHAIN AS (
SELECT  'CHAIN' AS chain,
         a.month_year AS FISCAL_MONTH_NBR,
         AVG(c.aggr_score_w_deduction) AS OPI_CHAIN
FROM   (SELECT * FROM   app_socs.cl_socs.rx_scoring_detail_atmtn
        WHERE  excl_ind = 'N'
                ) a
join (SELECT * FROM app_socs.cl_socs.rx_store_level_atmtn) c
        ON a.store_id = c.store_id
        AND a.month_year = c.month_year
left join app_socs.sl_socs_rpt.store_dim_rhody DIM
        ON a.store_id = dim.store_nbr
GROUP BY ALL
order by 1,2
),
WECARE_CHAIN AS (
SELECT  'CHAIN' AS CHAIN,
        V2.FISCAL_MONTH_NBR,
        MTD_POINTS AS WECARE_SCORE_CHAIN
FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_METRIC_PDF_V2 AS V2
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  V2.FSCL_WK = FW.FISCAL_WEEK_NBR
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=V2.FSCL_WK
WHERE   METRIC_ID = 100
    AND STORE_NO = 0 
),
NPS_CHAIN AS (
SELECT 'CHAIN' AS CHAIN
    ,CAL.FISCAL_MONTH_NBR
    
    ,SUM(NPS.RX_LTR_DETRACTORS) AS RX_LTR_DETRACTORS_S
    ,SUM(NPS.RX_LTR_PROMOTERS) AS RX_LTR_PROMOTERS_S
    ,SUM(NPS.RX_LTR_SURVEYS) AS RX_LTR_SURVEYS_S
    
    ,SUM(NPS.RX_VACC_LTR_DETRACTORS) AS RX_VACC_LTR_DETRACTORS_S
    ,SUM(NPS.RX_VACC_LTR_PROMOTERS) AS RX_VACC_LTR_PROMOTERS_S
    ,SUM(NPS.RX_VACC_LTR_SURVEYS) AS RX_VACC_LTR_SURVEYS_S
    
    ,CASE WHEN RX_LTR_SURVEYS_S>0 THEN (RX_LTR_PROMOTERS_S-RX_LTR_DETRACTORS_S)/RX_LTR_SURVEYS_S END AS RX_LTR_NPS
    ,CASE WHEN RX_VACC_LTR_SURVEYS_S>0 THEN (RX_VACC_LTR_PROMOTERS_S-RX_VACC_LTR_DETRACTORS_S)/RX_VACC_LTR_SURVEYS_S END AS RX_LTR_VACC_NPS
    
    ,CASE 
        WHEN RX_LTR_VACC_NPS IS NULL THEN RX_LTR_NPS 
        WHEN RX_LTR_NPS IS NULL THEN RX_LTR_VACC_NPS
        ELSE RX_LTR_NPS*0.96 + RX_LTR_VACC_NPS*0.04 END AS NPS_CHAIN
FROM APP_SOCS.SL_WCR_RPT.VW_MSH_CUR_NPS_60D_DLY AS NPS
INNER JOIN CORE_FSSC.CURATED_CALENDAR.DAY AS CAL
    ON NPS.DATE_DT=CAL.DATE_DT
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON CAL.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR
WHERE CAL.FISCAL_YEAR_NBR>=2024
    AND FM.END_DT<=CURRENT_DATE-5
GROUP BY 1,2
),
STR_FM AS (
    SELECT STR.MODEL
        , FM.STORE_NBR
        , FM.FISCAL_MONTH_NBR
        , FM.RX_BLENDED_NPS AS NPS_MTH
        , LAG(FM.RX_BLENDED_NPS) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS NPS_MTH_PREV
        , FM.WECARE_SCORE AS WECARE_SCORE_MTH
        , LAG(WECARE_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS WECARE_SCORE_MTH_PREV
        , FM.OPI_SCORE AS OPI_MTH
        , LAG(OPI_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS OPI_MTH_PREV
        , FM.MPNTH_MPC_SCORE AS MPC_MTH
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS MPC_MTH_PREV
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_MTH
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_MTH_PREV
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_MTH
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_MTH_PREV
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_MTH
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_MTH_PREV
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_MTH
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_MTH_PREV
        , NPS_GOAL.INTEGER_BLENDED_GOAL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_MONTH AS FM
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FM.STORE_NBR
    LEFT JOIN AVD_MONTH AS AVD
        ON FM.STORE_NBR=AVD.STORE_NBR AND FM.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.NPS_GOALS_2024 AS NPS_GOAL
        ON FM.STORE_NBR = NPS_GOAL.STORE_NBR
    WHERE STR.MODEL IS NOT NULL
),
STR_FY AS (
    SELECT STR.MODEL
        , FY.STORE_NBR
        , FY.FISCAL_MONTH_NBR
        , FY.RX_BLENDED_NPS AS NPS_YTD
        , LAG(FY.RX_BLENDED_NPS) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS NPS_YTD_PREV
        , FY.WECARE_SCORE AS WECARE_SCORE_YTD
        , LAG(WECARE_SCORE) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS WECARE_SCORE_YTD_PREV
        , FY.OPI_SCORE_YTD AS OPI_YTD
        , LAG(OPI_SCORE_YTD) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS OPI_YTD_PREV
        , FY.MPNTH_MPC_SCORE AS MPC_YTD
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS MPC_YTD_PREV
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_YTD
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS RPH_HRS_ACT_ADJ_YTD_PREV
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_YTD
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS RPH_HRS_DEMAND_ADJ_YTD_PREV
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_YTD
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS TECH_HRS_ACT_ADJ_YTD_PREV
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_YTD
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FY.STORE_NBR ORDER BY FY.FISCAL_MONTH_NBR) AS TECH_HRS_DEMAND_ADJ_YTD_PREV
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_YEAR AS FY
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FY.STORE_NBR
    LEFT JOIN AVD_YTD AS AVD
        ON FY.STORE_NBR=AVD.STORE_NBR AND FY.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    WHERE STR.MODEL IS NOT NULL
),
FINAL_DF AS (
    SELECT  DISTINCT STR.*
        ,WK.FISCAL_WEEK_NBR
        ,NPS_FW
        ,NPS_FW_PREV
        ,WECARE_SCORE_FW
        ,WECARE_FW_PREV
        ,NULL AS OPI_FW
        ,NULL AS OPI_FW_PREV
        ,NULL AS MPC_FW
        ,NULL AS MPC_FW_PREV
        ,TECH_AVD_FW
        ,PREV_TECH_AVD_FW
        ,RPH_AVD_FW
        ,PREV_RPH_AVD_FW
        
        ,MTH.FISCAL_MONTH_NBR
        ,NPS_MTH
        ,NPS_MTH_PREV
        ,WECARE_SCORE_MTH
        ,WECARE_SCORE_MTH_PREV
        ,OPI_MTH
        ,OPI_MTH_PREV
        ,MPC_MTH
        ,MPC_MTH_PREV
        ,RPH_HRS_ACT_ADJ_MTH
        ,RPH_HRS_ACT_ADJ_MTH_PREV
        ,RPH_HRS_DEMAND_ADJ_MTH
        ,RPH_HRS_DEMAND_ADJ_MTH_PREV
        ,TECH_HRS_ACT_ADJ_MTH
        ,TECH_HRS_ACT_ADJ_MTH_PREV
        ,TECH_HRS_DEMAND_ADJ_MTH
        ,TECH_HRS_DEMAND_ADJ_MTH_PREV
        ,CASE WHEN INTEGER_BLENDED_GOAL IS NULL OR NPS_MTH IS NULL THEN NULL WHEN NPS_MTH>=(INTEGER_BLENDED_GOAL/100.) THEN 1 ELSE 0 END AS NPS_GOAL_STR_PCT
        ,CASE WHEN WECARE_SCORE_MTH IS NULL THEN NULL WHEN WECARE_SCORE_MTH>=70 THEN 1 ELSE 0 END AS WECARE_GOAL_STR_PCT
        ,CASE WHEN OPI_MTH IS NULL THEN NULL WHEN OPI_MTH>=80 THEN 1 ELSE 0 END AS OPI_GOAL_STR_PCT
        ,CASE WHEN MPC_MTH IS NULL THEN NULL WHEN MPC_MTH>=81 THEN 1 ELSE 0 END AS MPC_GOAL_STR_PCT
       -- ,SUM(1) AS STORE_CNT 

        ,NPS_YTD
        ,NPS_YTD_PREV
        ,WECARE_SCORE_YTD
        ,WECARE_SCORE_YTD_PREV
        ,OPI_YTD
        ,OPI_YTD_PREV
        ,MPC_YTD
        ,MPC_YTD_PREV
        ,RPH_HRS_ACT_ADJ_YTD
        ,RPH_HRS_ACT_ADJ_YTD_PREV
        ,RPH_HRS_DEMAND_ADJ_YTD
        ,RPH_HRS_DEMAND_ADJ_YTD_PREV
        ,TECH_HRS_ACT_ADJ_YTD
        ,TECH_HRS_ACT_ADJ_YTD_PREV
        ,TECH_HRS_DEMAND_ADJ_YTD
        ,TECH_HRS_DEMAND_ADJ_YTD_PREV

        ,WECARE_SCORE_CHAIN
        ,NPS.NPS_CHAIN AS NPS_CHAIN
        ,OPI_CHAIN
        ,MPC_CHAIN
        ,RPH_HRS_ACT_ADJ_CHAIN
        ,RPH_HRS_DEMAND_ADJ_CHAIN
        ,TECH_HRS_ACT_ADJ_CHAIN
        ,TECH_HRS_DEMAND_ADJ_CHAIN
        
    FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    LEFT JOIN  STR_FW AS WK
        ON  STORE = STORE_NBR
    LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
        ON  WK.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
    LEFT JOIN STR_FM AS MTH
        ON  WK.STORE_NBR = MTH.STORE_NBR
        AND (FW.FISCAL_MONTH_NBR-1) = MTH.FISCAL_MONTH_NBR
    LEFT JOIN STR_FY AS YTD
        ON  WK.STORE_NBR = YTD.STORE_NBR
        AND (FW.FISCAL_MONTH_NBR-1) = YTD.FISCAL_MONTH_NBR
    LEFT JOIN WECARE_CHAIN AS WC
        ON  (FW.FISCAL_MONTH_NBR-1) = WC.FISCAL_MONTH_NBR
    LEFT JOIN NPS_CHAIN AS NPS
        ON  (FW.FISCAL_MONTH_NBR-1) = NPS.FISCAL_MONTH_NBR
    LEFT JOIN OPI_CHAIN AS OPI
        ON  (FW.FISCAL_MONTH_NBR-1) = OPI.FISCAL_MONTH_NBR
    LEFT JOIN MPC_CHAIN AS MPC
        ON  (FW.FISCAL_MONTH_NBR-1) = MPC.FISCAL_MONTH_NBR
    LEFT JOIN AVD_CHAIN AS AVD
        ON  (FW.FISCAL_MONTH_NBR-1) = AVD.FISCAL_MONTH_NBR
    --WHERE   STATUS IN ('Converted', 'Steady State')
)
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'NPS' AS METRIC_NAME,
        NPS_FW AS FW_VALUE,
        1 AS FW_DEN,
        NPS_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        NPS_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        NPS_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        NPS_GOAL_STR_PCT AS GOAL,
        NPS_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        NPS_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        NPS_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'WECARE' AS METRIC_NAME,
        WECARE_SCORE_FW AS FW_VALUE,
        1 AS FW_DEN,
        WECARE_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        WECARE_SCORE_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        WECARE_SCORE_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        WECARE_GOAL_STR_PCT AS GOAL,
        WECARE_SCORE_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        WECARE_SCORE_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        WECARE_SCORE_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'OPI' AS METRIC_NAME,
        OPI_FW AS FW_VALUE,
        1 AS FW_DEN,
        OPI_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        OPI_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        OPI_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        OPI_GOAL_STR_PCT AS GOAL,
        OPI_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        OPI_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        OPI_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'MPC' AS METRIC_NAME,
        MPC_FW AS FW_VALUE,
         1 AS FW_DEN,
        MPC_FW_PREV AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        MPC_MTH AS MTH_VALUE,
        1 AS MTH_DEN,
        MPC_MTH_PREV AS PREV_MTH_VALUE,
        1 AS PREV_MTH_DEN,
        MPC_GOAL_STR_PCT AS GOAL,
        MPC_YTD AS YTD_VALUE,
        1 AS YTD_DEN,
        MPC_YTD_PREV AS PREV_YTD_VALUE,
        1 AS PREV_YTD_DEN,
        MPC_CHAIN AS CHAIN_NUM,
        1 AS CHAIN_DEN
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'TECH AVD' AS METRIC_NAME,
        TECH_AVD_FW AS FW_VALUE,
        1 AS FW_DEN,
        PREV_TECH_AVD_FW AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        TECH_HRS_ACT_ADJ_MTH AS MTH_VALUE,
        TECH_HRS_DEMAND_ADJ_MTH AS MTH_DEN,
        TECH_HRS_ACT_ADJ_MTH_PREV AS PREV_MTH_VALUE,
        TECH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_MTH_DEN,
        NULL AS GOAL,
        TECH_HRS_ACT_ADJ_YTD AS YTD_VALUE,
        TECH_HRS_DEMAND_ADJ_YTD AS YTD_DEN,
        TECH_HRS_ACT_ADJ_YTD_PREV AS PREV_YTD_VALUE,
        TECH_HRS_DEMAND_ADJ_YTD_PREV AS PREV_YTD_DEN,
        TECH_HRS_ACT_ADJ_CHAIN AS CHAIN_NUM,
        TECH_HRS_DEMAND_ADJ_CHAIN AS CHAIN_DEN
        
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
UNION
(SELECT STR.*,
        FISCAL_WEEK_NBR,
        FISCAL_MONTH_NBR,
        'RPH AVD' AS METRIC_NAME,
        RPH_AVD_FW AS FW_VALUE,
        1 AS FW_DEN,
        PREV_RPH_AVD_FW AS PREV_FW_VALUE,
        1 AS PREV_FW_DEN,
        
        RPH_HRS_ACT_ADJ_MTH AS MTH_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH AS MTH_DEN,
        RPH_HRS_ACT_ADJ_MTH_PREV AS PREV_MTH_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_MTH_DEN,
        NULL AS GOAL,
        
        RPH_HRS_ACT_ADJ_MTH AS YTD_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH AS YTD_DEN,
        RPH_HRS_ACT_ADJ_MTH_PREV AS PREV_YTD_VALUE,
        RPH_HRS_DEMAND_ADJ_MTH_PREV AS PREV_YTD_DEN,
        
        RPH_HRS_ACT_ADJ_CHAIN AS CHAIN_NUM,
        RPH_HRS_DEMAND_ADJ_CHAIN AS CHAIN_DEN
        
FROM    FINAL_DF AS DF
LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
    ON  DF.STORE = STR.STORE)
);

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_VIEW AS (
WITH STORE_MODEL AS (
    SELECT DISTINCT STORE AS STORE_NBR
        ,MODEL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE
    --WHERE STATUS IN ('Steady State', 'Converted')
),

STR_FW AS (
SELECT SW.STORE_NBR
    ,STR.MODEL
    ,SW.FISCAL_WEEK_NBR
    ,RX_BLENDED_NPS AS NPS_FW
    ,lag(RX_BLENDED_NPS) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_NPS_FW
    ,WECARE_SCORE AS WECARE_SCORE_FW
    ,LAG(WECARE_SCORE) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_WECARE_FW
    ,NULL AS OPI_FW
    ,NULL AS PREV_OPI_FW
    ,NULL AS MPC_FW
    ,NULL AS PREV_MPC_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS TECH_AVD_FW
    ,LAG(TECH_HRS_ACT_ADJ/NULLIFZERO(TECH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_TECH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ)) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS RPH_AVD_FW
    ,LAG(RPH_HRS_ACT_ADJ/NULLIFZERO(RPH_HRS_DEMAND_ADJ), 2) OVER (PARTITION BY SW.STORE_NBR ORDER BY FISCAL_WEEK_NBR) AS PREV_RPH_AVD_FW
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK SW
INNER JOIN STORE_MODEL AS STR
    ON STR.STORE_NBR=SW.STORE_NBR
--WHERE SW.FISCAL_WEEK_NBR>$MAX_WEEK_NBR-5
),

AVD_MONTH AS (
SELECT SW.STORE_NBR
    ,FW.FISCAL_MONTH_NBR
    ,SUM(RPH_HRS_ACT_ADJ) AS RPH_HRS_ACT_ADJ
    ,SUM(RPH_HRS_DEMAND_ADJ) AS RPH_HRS_DEMAND_ADJ
    ,SUM(TECH_HRS_ACT_ADJ) AS TECH_HRS_ACT_ADJ
    ,SUM(TECH_HRS_DEMAND_ADJ) AS TECH_HRS_DEMAND_ADJ
FROM CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_WEEK AS SW
    ON SW.FISCAL_WEEK_NBR=FW.FISCAL_WEEK_NBR AND (RPH_HRS_ACT_ADJ IS NOT NULL OR TECH_HRS_ACT_ADJ IS NOT NULL)
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FM.FISCAL_MONTH_NBR=FW.FISCAL_MONTH_NBR    
GROUP BY 1,2
--HAVING MAX(SW.FISCAL_WEEK_NBR)=AVG(FM.END_WEEK_NBR)
ORDER BY 1,2
),

STR_FM AS (
    SELECT STR.MODEL
        , FM.STORE_NBR
        , FM.FISCAL_MONTH_NBR
        , FM.RX_BLENDED_NPS AS NPS_MTH
        , LAG(FM.RX_BLENDED_NPS) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_NPS_MTH
        , FM.WECARE_SCORE AS WECARE_SCORE_MTH
        , LAG(WECARE_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_WECARE_SCORE_MTH
        , FM.OPI_SCORE AS OPI_MTH
        , LAG(OPI_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_OPI_MTH
        , FM.MPNTH_MPC_SCORE AS MPC_MTH
        , LAG(MPNTH_MPC_SCORE) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_MPC_MTH
        , AVD.RPH_HRS_ACT_ADJ AS RPH_HRS_ACT_ADJ_MTH
        , LAG(RPH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_RPH_HRS_ACT_ADJ_MTH
        , AVD.RPH_HRS_DEMAND_ADJ AS RPH_HRS_DEMAND_ADJ_MTH
        , LAG(RPH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_RPH_HRS_DEMAND_ADJ_MTH
        , AVD.TECH_HRS_ACT_ADJ AS TECH_HRS_ACT_ADJ_MTH
        , LAG(TECH_HRS_ACT_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_TECH_HRS_ACT_ADJ_MTH
        , AVD.TECH_HRS_DEMAND_ADJ AS TECH_HRS_DEMAND_ADJ_MTH
        , LAG(TECH_HRS_DEMAND_ADJ) OVER (PARTITION BY FM.STORE_NBR ORDER BY FM.FISCAL_MONTH_NBR) AS PREV_TECH_HRS_DEMAND_ADJ_MTH
        , NPS_GOAL.INTEGER_BLENDED_GOAL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_MONTH AS FM
    INNER JOIN STORE_MODEL AS STR
        ON STR.STORE_NBR = FM.STORE_NBR
    LEFT JOIN AVD_MONTH AS AVD
        ON FM.STORE_NBR=AVD.STORE_NBR AND FM.FISCAL_MONTH_NBR=AVD.FISCAL_MONTH_NBR
    LEFT JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.NPS_GOALS_2024 AS NPS_GOAL
        ON FM.STORE_NBR = NPS_GOAL.STORE_NBR
    WHERE STR.MODEL IS NOT NULL
)

SELECT  DISTINCT STR.*
    ,WK.FISCAL_WEEK_NBR
    ,NPS_FW
    ,PREV_NPS_FW
    ,WECARE_SCORE_FW
    ,PREV_WECARE_FW
    ,NULL AS OPI_FW
    ,NULL AS PREV_OPI_FW
    ,NULL AS MPC_FW
    ,NULL AS PREV_MPC_FW
    ,TECH_AVD_FW
    ,PREV_TECH_AVD_FW
    ,RPH_AVD_FW
    ,PREV_RPH_AVD_FW
    
    ,MTH.FISCAL_MONTH_NBR
    ,NPS_MTH
    ,PREV_NPS_MTH
    ,WECARE_SCORE_MTH
    ,PREV_WECARE_SCORE_MTH
    ,OPI_MTH
    ,PREV_OPI_MTH
    ,MPC_MTH
    ,PREV_MPC_MTH
    ,RPH_HRS_ACT_ADJ_MTH
    ,PREV_RPH_HRS_ACT_ADJ_MTH
    ,RPH_HRS_DEMAND_ADJ_MTH
    ,PREV_RPH_HRS_DEMAND_ADJ_MTH
    ,TECH_HRS_ACT_ADJ_MTH
    ,PREV_TECH_HRS_ACT_ADJ_MTH
    ,TECH_HRS_DEMAND_ADJ_MTH
    ,PREV_TECH_HRS_DEMAND_ADJ_MTH
    ,CASE WHEN INTEGER_BLENDED_GOAL IS NULL OR NPS_MTH IS NULL THEN NULL WHEN NPS_MTH>=(INTEGER_BLENDED_GOAL/100.) THEN 1 ELSE 0 END AS NPS_GOAL_STR_PCT
    ,CASE WHEN WECARE_SCORE_MTH IS NULL THEN NULL WHEN WECARE_SCORE_MTH>=70 THEN 1 ELSE 0 END AS WECARE_GOAL_STR_PCT
    ,CASE WHEN OPI_MTH IS NULL THEN NULL WHEN OPI_MTH>=80 THEN 1 ELSE 0 END AS OPI_GOAL_STR_PCT
    ,CASE WHEN MPC_MTH IS NULL THEN NULL WHEN MPC_MTH>=81 THEN 1 ELSE 0 END AS MPC_GOAL_STR_PCT
   -- ,SUM(1) AS STORE_CNT   
FROM    DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE AS STR
LEFT JOIN  STR_FW AS WK
    ON  STORE = STORE_NBR
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  WK.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
LEFT JOIN STR_FM AS MTH
    ON  WK.STORE_NBR = MTH.STORE_NBR
    AND (FW.FISCAL_MONTH_NBR-1) = MTH.FISCAL_MONTH_NBR
--WHERE   STATUS IN ('Steady State', 'Converted')
);



python code:
import pandas as pd
import teradatasql
import teradata 
import snowflake.connector
from snowflake.connector.pandas_tools import write_pandas
import os
import numpy as np
import shutil
import datetime as dt
import requests
import numpy as np
import pyodbc
#Setup Userid and read password
userName = 'pooja.sankharva@cvshealth.com'
user_id = os.getlogin()
pw = '' ## your teradata password
import base64

trigger_url = "https://prod-125.westus.logic.azure.com:443/workflows/7928d1358e2f43fea03ac4d79d4240d9/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EHFl4ffi3b0_hfwx050ypBa7jG6tSELxOCnp_AdhKrA"
# folderpath = 'CF KPI Input Excel Library' #Folder path from root of the site example 'Documents/Shared Folder/Required Folder'
# folderpath_formated = folderpath.replace(' ','%2b').replace('/','%252f')#has to have %2b for space and %252f for /, so formating it 
filename = "Telepharmacy Store Status - Group 0 - 2a.xlsx" #Just the name of the file in the folder you want
#filename_formated = filename.replace(' ','%2b')

#response  = requests.post(trigger_url,json={'folderpath':folderpath_formated,'filename':filename_formated})
response  = requests.post(trigger_url)
with open(filename, 'wb') as f:
    f.write(base64.b64decode(response.content))
store_df = pd.read_excel('Telepharmacy Store Status - Group 0 - 2a.xlsx')
store_df = store_df[~store_df['Status'].isin(['Descoped', 'Closed'])].copy()
store_df = store_df.rename(columns={'2024 Div': 'DIV', '2024 Reg': 'REG', '2024 Dist': 'DIST',})
store_df = store_df.reset_index(drop=True)
store_df = store_df.astype({'Last Status Change':'datetime64[ns]'}, errors='ignore')
store_df['Last Status Change'] = store_df['Last Status Change'].astype(str).replace({'NaT':None})
store_df
store_nbr_txt = ''
for store_nbr in store_df['Store'].unique():
    store_nbr_txt = store_nbr_txt+str(store_nbr)+", "
store_nbr_txt = store_nbr_txt[:-2]
store_nbr_txt
'18013, 18091, 6450, 10656, 3742, 4781, 10942, 11376, 6539, 6543, 6504, 6508, 10028, 17171, 9328, 16768, 7862, 16355, 10627, 10599, 2663, 10680, 16348, 8634, 8802, 9309, 9266, 10425, 8420, 16295, 10307, 16296, 8366, 17714, 16141, 10007, 9217, 16272, 16699, 17304, 10616, 16174, 3967, 16959, 3500, 16366, 16675, 7, 8914, 9347, 193, 17615, 1719, 16564, 17223, 10184, 5029, 16725, 16700, 17231, 16292, 16593, 9270, 9340, 17437, 17591, 17761, 141, 16529, 16528, 16369, 16412, 16283, 16664, 18089, 16362, 16308, 17656, 16167, 16203'
cnxn = teradatasql.connect(host="teredwpd.cvs.com",
                             user=user_id,
                             password=pw)
avd_sql = f'''
SELECT DIM_YEAR*100+DIM_WEEK AS FISCAL_WEEK_NBR
	,DIM_YEAR AS FISCAL_YEAR_NBR
	,DIM_STORE AS STORE_NBR
	,RPH_HRS_DEMAND_ADJ
	,RPH_HRS_ACT_ADJ
	,TECH_HRS_DEMAND_ADJ
	,TECH_HRS_ACT_ADJ
FROM RXCOE_WFM.AVD_RX_FS AS AVD
WHERE dim_year>=2024
and DIM_STORE IN ({store_nbr_txt})
ORDER BY FISCAL_WEEK_NBR DESC;
'''
avd_df = pd.read_sql(avd_sql,cnxn)
avd_df
database = 'DL_RX_OPERATION'
schema = 'RX_OPS_SANDBOX'
role = 'GRP-CN-SNOWFLK-PROD-RX-ANALYTICS-BI-SE'
table_name = 'TELEPHARMACY_STORE'

ctx = snowflake.connector.connect(
    authenticator = 'externalbrowser',
    user=userName, #youremailgoeshere
    password='', #yourpasswordgoeshere
    account='cvs-cvsretailprod.privatelink',
    warehouse='WH_RX_QUERY_RXANALYTICS_01',
    database=database,
    schema=schema,
    role = role
    )
cs = ctx.cursor()
C:\ProgramData\Anaconda3\lib\site-packages\snowflake\connector\config_manager.py:351: UserWarning: Bad owner or permissions on C:\Users\c391102\.snowflake\connections.toml
  warn(f"Bad owner or permissions on {str(filep)}{chmod_message}")
Initiating login request with your identity provider. A browser window should have opened for you to complete the login. If you can't see it, check existing browser windows, or your OS settings. Press CTRL+C to abort and try again...
Going to open: https://login.microsoftonline.com/fabb61b8-3afe-4e75-b934-a47f782b8cd7/saml2?SAMLRequest=pZNdb5swFIb%2FCvKuAUPShFohVdaoW7Z0i%2FKlaHcGDokVsImPgba%2FfiYfUnfR3uzCEjLv8fOe89qjh5eycBrQKJSMSeBR4oBMVSbkPiab9ZMbEQcNlxkvlISYvAKSh%2FEIeVlUbFKbg1zCqQY0jj1IIut%2BxKTWkimOApnkJSAzKVtNnucs9CjjiKCNxZFrSYbCsg7GVMz327b12p6n9N4PKaU%2BvfetqpN8Ie8Q1eeMSiujUlXcSl5sTx8gAp%2F2O4RVWMLiWvhVyMsIPqMkFxGy7%2Bv1wl38Xq2JM7l196gk1iXoFehGpLBZzi8G0DpIG3Tt0mC4KKzXzKu0aLiBQsijh1K1ecGPkKqyqo0lePbLzyHzC7UXdm6zaUyqo8hO82esfua75f7HllffpqdDr9ot3laTnRHpBrfNttHLXbSBmqbE2d5SDruUZ4g1zGSXrbFbNLxzA%2BrSYB2GjA4YjbxBL%2FpDnKnNVkhuzpW3Bs4%2BvFKkWqHKjZLWOFxc8iQZBEnk9ngObh%2BGd25y3%2Bu7vD%2FMh1GYRGk29LsEQ3K5RexsRI%2F%2FZzYj%2F%2F1J18v5y%2BY1my5UIdJX50npkpuP4wy84LwjMjc%2FSxmUlj%2FJMg2INtaiUO2jBusjJkbXQPzxhfrvKxj%2FBQ%3D%3D&RelayState=ver%3A1-hint%3A209977584545810-ETMsDgAAAZmhz7b%2BABRBRVMvQ0JDL1BLQ1M1UGFkZGluZwEAABAAEIj2PWn4NSxMtx1MKjtGGbsAAACw5mSjtuSbuweipEW6E3Gn3O84b891qPNZkUl9KzsK%2FplbCDG4%2FPl9HYiLo4nHey9AzXccU0ClQpe9gBGc4%2BqHq2%2FrBpL9k4tuY56MbajirzqwqVNN0mzxuI0JM%2FY9PkNz92USooXiihMRTQ2GSw35RUWhshEcZSQagPvsqTJf3DVL03Elbkin462yHChHRjdYfh8Wmwk%2FUkMcPTFFqKZQUqtkgahDu%2FwlLrH2%2F%2Bn%2FCwoAFEMZkrLAJYMG6dJRGlKB1%2BqLbquU to authenticate...
wecare_sql = f'''
SELECT STORE_NBR
    ,FISCAL_WEEK_NBR
    ,WECARE_SCORE
    ,WECARE_R4W
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_EXCLUSIONS
WHERE STORE_NBR IN ({store_nbr_txt})
'''

cs.execute(wecare_sql)
wecare_df = cs.fetch_pandas_all()
wecare_df
main_sql_text = f'''
SELECT TO_NUMBER(PDF.STORE_NBR) AS STORE_NBR
    ,FM.FISCAL_MONTH_NBR
    ,WECARE_MTD AS MTD_POINTS
    ,WECARE_YTD AS YTD_POINTS
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.WECARE_EXCLUSIONS AS PDF
LEFT JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK AS FW
    ON  PDF.FISCAL_WEEK_NBR = FW.FISCAL_WEEK_NBR
INNER JOIN CORE_FSSC.CURATED_CALENDAR.FISCAL_MONTH AS FM
    ON FW.FISCAL_MONTH_NBR=FM.FISCAL_MONTH_NBR AND FM.END_WEEK_NBR=PDF.FISCAL_WEEK_NBR
WHERE STORE_NBR IN ({store_nbr_txt})
'''
cs.execute(main_sql_text)
wecare_month_df = cs.fetch_pandas_all()
wecare_month_df
def format_columns_upload_data(df):
    #Format column names for common issues -- MUST BE UPPER CASE COLUMN NAMES
    df.columns = df.columns.str.replace(' ', '_', regex=False)
    df.columns = df.columns.str.replace('\xa0', '_', regex=False)
    df.columns = df.columns.str.replace('-', '_', regex=False)
    df.columns = df.columns.str.replace('No#', 'NO', regex=False)
    df.columns = df.columns.str.replace('#', 'NBR', regex=False)
    df.columns = df.columns.str.replace('/', '_', regex=False)
    df.columns = df.columns.str.replace('24', 'TWNTY_FOUR', regex=False)
    df.columns = df.columns.str.replace('1st', 'FIRST', regex=False)
    df.columns = df.columns.str.replace('2nd', 'SECOND', regex=False)
    df.columns = df.columns.str.replace('?', '', regex=False)
    df.columns = df.columns.str.replace('(', '', regex=False)
    df.columns = df.columns.str.replace(')', '', regex=False)
    df.columns = df.columns.str.replace('.', '_', regex=False)
    df.columns = df.columns.str.upper()
    return df
store_df = format_columns_upload_data(store_df)
weekly_df = format_columns_upload_data(weekly_df)
monthly_df = format_columns_upload_data(monthly_df)
yearly_df = format_columns_upload_data(yearly_df)
