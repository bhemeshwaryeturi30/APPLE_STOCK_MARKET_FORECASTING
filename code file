	CREATE MULTISET VOLATILE TABLE DUPES AS (
			SELECT	
				   CVS_ID, 
			       SRC_SYSTM_CMPNT_KEY_1 AS RXC_PTNT_ID,
				   Count('*') Over (PARTITION BY CVS_ID) AS N_ACCTS
			   FROM	IDW_RX_OPERATIONS_S_BC.SEM_DIM_EPH_SOURCE_SYSTEM_KEYS
			   WHERE 
				   	CURR_IND = 'Y' 
					AND SRC_SYSTM_QLFR_CD = 'RX' 
					AND CVS_ID <> '0' 
					AND NOT(CVS_ID(VARCHAR(30)) LIKE '%-%') AND OPRTN_TYP NOT IN ('DELETE')
			 QUALIFY	
			 	N_ACCTS > 1
	) 
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID) 
		ON 
	COMMIT PRESERVE ROWS; 
	COLLECT STATISTICS ON DUPES 
	PRIMARY INDEX (RXC_PTNT_ID); 





	CREATE MULTISET VOLATILE TABLE DUPES_W_CAREGIVING AS (
		SELECT 
			   DUPES.*,
			   IS_CAREGIVER_CAREGIVEE
		FROM DUPES
		LEFT JOIN
			(SELECT DISTINCT 
				RXC_PTNT_ID
			  , 1 AS IS_CAREGIVER_CAREGIVEE
			FROM
				(
			SELECT	
				CRGVR_RXC_PTNT_ID AS RXC_PTNT_ID
				FROM IDW_PRODUCT_DEVELOPMENT_S_BC.SEM_FACT_CAREGIVING_REL
				WHERE 
					RXC_DIRTY_IND = 'N' 
					AND REL_STUS_CD IN (0,1)
				UNION
					SELECT	
						CRGVEE_RXC_PTNT_ID AS RXC_PTNT_ID
				FROM IDW_PRODUCT_DEVELOPMENT_S_BC.SEM_FACT_CAREGIVING_REL
				WHERE 
					RXC_DIRTY_IND = 'N' 
					AND REL_STUS_CD IN (0,1)) t
			  ) CAREGIVING
	ON DUPES.RXC_PTNT_ID = CAREGIVING.RXC_PTNT_ID
	)
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID) ON COMMIT PRESERVE ROWS;
	COLLECT STATISTICS ON DUPES_W_CAREGIVING PRIMARY INDEX (RXC_PTNT_ID);
	DROP TABLE DUPES; 




	CREATE MULTISET VOLATILE TABLE DUPES_W_FILL_INFO AS (
			SELECT	DUPES_W_CAREGIVING.*,
					MOST_RECENT_PKUP_CD,
					HAS_VAX,
					HAS_ISP,
					MOST_RECENT_FILL
			FROM DUPES_W_CAREGIVING
			LEFT JOIN
			(SELECT RXC_PTNT_ID, 
			Min(PKUP_YEAR) AS most_recent_pkup_cd,
			  Max(CASE WHEN PKUP_DT IS NOT NULL THEN is_vax END) AS has_vax,
			  Max(CASE WHEN PKUP_YEAR IS NOT NULL THEN ISP_RX_FILL_IND END) AS has_isp,
			  Max(FILL_DT) AS most_recent_fill
			  FROM
			(SELECT RXC_PTNT_ID, 
			  CASE WHEN (Current_Date - Cast(PKUP_DT AS DATE)) DAY(4) <= 365*3 THEN 3
			       WHEN (Current_Date - Cast(PKUP_DT AS DATE)) DAY(4) <= 365*2 THEN 2
			  END AS PKUP_YEAR,
			  CASE WHEN Substring(GPI_NBR,1,2) IN ('17','18') THEN 1 ELSE 0 END AS is_vax,
			  ISP_RX_FILL_IND,
			  FILL_DT,
			  PKUP_DT
			  FROM	IDW_RX_OPERATIONS_S_BC.SEM_FACT_ALL_SCRIPT_FILL fills
			  JOIN IDW_COMMON.SEM_DIM_ALL_DRUG drug
	          ON fills.ndc = drug.ndc
			  WHERE Extract(YEAR From FILL_DT) <= 2022 AND (PKUP_DT IS NULL OR (Extract(YEAR From PKUP_DT)) <= 2022) AND
			  Extract(YEAR From FILL_DT) >= 2013 AND (PKUP_DT IS NULL OR (Extract(YEAR From PKUP_DT) >= 2013))
			  ) t		
			 GROUP BY 1 
			) FILL_INFO
			ON FILL_INFO.RXC_PTNT_ID = DUPES_W_CAREGIVING.RXC_PTNT_ID
	) WITH DATA PRIMARY INDEX (RXC_PTNT_ID)
		ON 
	COMMIT PRESERVE ROWS;
	COLLECT STATISTICS ON DUPES_W_FILL_INFO PRIMARY INDEX (RXC_PTNT_ID); 



	CREATE MULTISET VOLATILE TABLE DUPES_W_PATIENT_COMMENTS AS (
		SELECT DUPES_W_FILL_INFO.*,
		       HAS_COMMENT
			   FROM
		DUPES_W_FILL_INFO
		LEFT JOIN
		(
			SELECT	DISTINCT RXC_PTNT_ID, 1 AS HAS_COMMENT 
		FROM	
			(
			SELECT	RXC_PTNT_ID
			       , Trim(DSC) AS dsc_trim
				FROM IDW_RX_OPERATIONS_S_BC.PATIENT_NOTE
				WHERE	
				  CURR_IND = 'Y' 
				  AND dsc_trim NOT IN 
				  ('Acquired Store medical condition listed as ICD-9please verify and reenter',
	               'Acquired Store medical condition listed as ICD-9R9please verify and reenter')
				  AND NOT (dsc_trim LIKE '%DO NOT USE THIS PROFILE%' 
				      OR dsc_trim LIKE '%DO NOT USE THIS FILE%' 
					  OR dsc_trim LIKE '%DO NOT USE SECOND PROFILE%'
	                  OR dsc_trim LIKE '%duplicate profile%'
	                  OR dsc_trim LIKE '%USE OTHER PROFILE%'
	                  OR dsc_trim LIKE '%Dup profile%'
	                  OR dsc_trim LIKE '%Dupe profile%'
	                  OR dsc_trim LIKE '%DECEASED%')) t
			) PATIENT_COMMENT
			ON PATIENT_COMMENT.RXC_PTNT_ID = DUPES_W_FILL_INFO.RXC_PTNT_ID
			)
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID)
		ON 
	COMMIT PRESERVE ROWS;
	COLLECT STATISTICS ON DUPES_W_PATIENT_COMMENTS PRIMARY INDEX (RXC_PTNT_ID);
	DROP TABLE DUPES_W_FILL_INFO;




	CREATE MULTISET VOLATILE TABLE DUPES_W_RX_TIES AS (
		SELECT DUPES_W_PATIENT_COMMENTS.*,
		       IS_RX_TIED
		FROM
		DUPES_W_PATIENT_COMMENTS
		LEFT JOIN
		(
			SELECT 1 AS RXC_PTNT_ID, 1 AS IS_RX_TIED
			--I DO NOT HAVE ACCESS TO TEH BELOW SCHEMA, WE WILL INSTEAD LOOK THIS UP ON SNOWFLAKE
			/*SELECT	DISTINCT RXCONNECT_ID AS RXC_PTNT_ID, 1 AS IS_RX_TIED
			FROM	BUSINESS_USERS.CVSCOMPROFILEDATA
			WHERE	RXCONNECT_ID IS NOT NULL*/
	) RX_TIES
	ON DUPES_W_PATIENT_COMMENTS.RXC_PTNT_ID = RX_TIES.RXC_PTNT_ID
	)
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID)
		ON 
	COMMIT PRESERVE ROWS;
	COLLECT STATISTICS 
		ON DUPES_W_RX_TIES 
	PRIMARY INDEX (RXC_PTNT_ID);
	DROP TABLE DUPES_W_PATIENT_COMMENTS;




	CREATE MULTISET VOLATILE TABLE DUPES_W_LAST_UPDATE AS (
			SELECT DUPES_W_RX_TIES.*,
			       LAST_UPD_DT
			FROM DUPES_W_RX_TIES
			LEFT JOIN
			(SELECT	RXC_PTNT_ID, Max(LAST_UPD_DT) AS LAST_UPD_DT
			FROM	IDW_RX_OPERATIONS_S_BC.PATIENT
			GROUP BY 1) LAST_UPDATE
			ON DUPES_W_RX_TIES.RXC_PTNT_ID = LAST_UPDATE.RXC_PTNT_ID
			
	) 
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID)
		ON 
	COMMIT PRESERVE ROWS;
	COLLECT STATISTICS 
		ON DUPES_W_LAST_UPDATE 
	PRIMARY INDEX (RXC_PTNT_ID);
	DROP TABLE DUPES_W_RX_TIES;



	CREATE MULTISET VOLATILE TABLE DUPES_ALL_INFO AS (
		SELECT	dupes_info.RXC_PTNT_ID
			, dupes_info.CVS_ID
		    , LAST_UPD_DT
			,	CASE 
					WHEN (Cast(Current_Date AS DATE) - PTNT_DT_OF_BRTH)/365.25 < 18 THEN 1 
					ELSE 0 
				END AS IS_MINOR
			,
				CASE 
					WHEN ALRGY_INFO_AVLB IN (1,2) THEN 1 
					ELSE 0 
				END AS ALLERGY_INFORMATION_AVAILABLE
			,
				CASE 
					WHEN COND_INFO_AVLB IN (1,2) THEN 1 
					ELSE 0 
				END AS CONDITION_INFORMATION_AVAILABLE
			,
				CASE 
					WHEN ALRGY_INFO_AVLB = 1 THEN 1 
					ELSE 0 
				END AS ALLERGY_INFORMATION_CONFIRMED
			,
				CASE 
					WHEN COND_INFO_AVLB = 1 THEN 1 
					ELSE 0 
				END AS CONDITION_INFORMATION_CONFIRMED
			,
				CASE 
					WHEN ALRGY_INFO_AVLB = 2 THEN 1 
					ELSE 0 
				END AS NO_ALLERGY_CONFIRMED
			,Count(CASE WHEN ELIGIBLE = 0 AND ALRGY_INFO_AVLB = 2 THEN 1 END ) Over (PARTITION BY CVS_ID) AS N_ACTIVE_RXC_IDS_W_CONFIRMED_ALLERGY
			,CASE WHEN N_ACTIVE_RXC_IDS_W_CONFIRMED_ALLERGY > 0 THEN 1 ELSE 0 END AS ACTIVE_RXC_ID_HAS_CONFIRMED_ALLERGY
			,CASE WHEN ACTIVE_RXC_ID_HAS_CONFIRMED_ALLERGY = 1 AND ALRGY_INFO_AVLB IN (1,3) THEN 1 ELSE 0 END AS HAS_CONFLICTING_ALLERGY_INFO
			,ZeroIfNull(has_vax) AS has_vax
			,
				CASE 
				    WHEN most_recent_pkup_cd = 2 THEN 1
					ELSE 0 
				END AS ACTIVE
			,
				CASE
				    WHEN most_recent_pkup_cd IN (2,3) THEN 0
					ELSE 1
				END AS ELIGIBLE
			,ZeroIfNull(IS_CAREGIVER_CAREGIVEE) AS IS_CAREGIVER_CAREGIVEE
			,ZeroIfNull(has_isp) AS has_isp
			,CASE WHEN (Current_Date - Cast(MOST_RECENT_FILL AS DATE)) DAY(4) <= 30 THEN 1 ELSE 0 END AS has_recent_fill
			,MOST_RECENT_FILL
			,ZeroIfNull(has_comment) AS has_comment
			,ZeroIfNull(IS_RX_TIED) AS is_rx_Tied,
	        ALRGY_INFO_AVLB
		FROM DUPES_W_LAST_UPDATE dupes_info
		JOIN
		(SELECT RXC_PTNT_ID,
		PTNT_DT_OF_BRTH,
		COND_INFO_AVLB,
		ALRGY_INFO_AVLB
		FROM
		IDW_RX_OPERATIONS_S_BC.SEM_DIM_ALL_PATIENT) PAT
		ON dupes_info.rxc_ptnt_id = pat.rxc_ptnt_id
	) 
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID)
		ON 
	COMMIT PRESERVE ROWS;
	COLLECT STATISTICS 	ON DUPES_ALL_INFO 
	PRIMARY INDEX (RXC_PTNT_ID);
	DROP TABLE DUPES_W_LAST_UPDATE;




	CREATE MULTISET VOLATILE TABLE PMP_COMMENTS AS ( 
	SELECT 
		  PTNT_ID AS RXC_PTNT_ID
		, Count(*) AS num_pmp_comments
	FROM IDW_RX_OPERATIONS_S_BC.NOTE 
	WHERE NOTE_TYP_CD = 'PMP NOTE' AND DSC IS NOT NULL
	GROUP BY PTNT_ID) 
	WITH DATA 
	PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS; 



	CREATE MULTISET VOLATILE TABLE ON_HOLD_SCRIPTS AS ( 
	SELECT DISTINCT
		  RXC_PTNT_ID 
		, 1 AS ON_HOLD_SCRIPTS 
	FROM IDW_RX_OPERATIONS_S_BC.SEM_FACT_ALL_SCRIPT_FILL 
	WHERE 
		FILL_DT > Current_Date - 365*3 
		AND RX_TYPE_ID = 4) 
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS; 




	CREATE MULTISET VOLATILE TABLE CONDITION_DIAGNOSIS AS ( 
	SELECT DISTINCT 
			PTY_ID AS RXC_PTNT_ID
		, 1 AS HAS_CONDITION
	FROM IDW_RX_OPERATIONS_S_BC.EVENT_PARTY_COND_DIAGNOSIS 
	WHERE DSC_TX IS NOT NULL) 
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS;

	 
	 
	 
	 CREATE MULTISET VOLATILE TABLE OBSOLETE AS ( 
	 SELECT DISTINCT
	 	  RXC_PTNT_ID 
		, 1 AS IS_OBSOLETE 
	FROM IDW_RX_OPERATIONS_S_BC.PATIENT 
	WHERE OBSLT_IND = 'Y') 
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS;




	CREATE MULTISET VOLATILE TABLE DEACTIVATE_CONDIDATES AS ( 
	SELECT 
	DUPES_ALL_INFO.*, 
	                ZeroIfNull(PMP_comments.num_pmp_comments) num_pmp_comments,
	                ZeroIfNull(on_hold_scripts.on_hold_scripts) has_on_hold_scripts,
	                ZeroIfNull(condition_diagnosis.has_condition) has_condition_IDW2,
	                ZeroIfNull(obsolete.is_obsolete) is_obsolete
	FROM DUPES_ALL_INFO LEFT JOIN PMP_comments
	            ON DUPES_ALL_INFO.RXC_PTNT_ID = PMP_comments.RXC_PTNT_ID
	LEFT JOIN on_hold_scripts 
	            ON DUPES_ALL_INFO.RXC_PTNT_ID = on_hold_scripts.RXC_PTNT_ID
	LEFT JOIN condition_DIAGNOSIS
	            ON DUPES_ALL_INFO.RXC_PTNT_ID = condition_DIAGNOSIS.RXC_PTNT_ID
	LEFT JOIN obsolete
	            ON DUPES_ALL_INFO.RXC_PTNT_ID = obsolete.RXC_PTNT_ID 
	) WITH DATA PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS;



	CREATE MULTISET VOLATILE TABLE DEACTIVATE_CANDIDIATES_STEP2 AS ( 
	SELECT deactivate_condidates.*,
	            CASE 
					WHEN ELIGIBLE = 1
			            AND IS_CAREGIVER_CAREGIVEE= 0
			            AND HAS_ISP = 0
			            AND	IS_MINOR = 0
			            AND HAS_RECENT_FILL = 0
			            AND ALLERGY_INFORMATION_CONFIRMED = 0
			            AND HAS_CONFLICTING_ALLERGY_INFO = 0
			            AND CONDITION_INFORMATION_CONFIRMED = 0
			            AND HAS_VAX = 0
			            AND HAS_COMMENT = 0
			            AND IS_RX_TIED = 0 
			            AND num_pmp_comments = 0
			            AND has_on_hold_scripts = 0 
			            AND has_condition_IDW2 = 0 
			            AND is_obsolete = 0 
	            THEN 1 
				ELSE 0 
				END AS DEACTIVATABLE,
	            Max(IS_RX_TIED) Over (PARTITION BY CVS_ID) AS HAS_RX_TIE,
	            Row_Number() Over (PARTITION BY CVS_ID ORDER BY DEACTIVATABLE ASC, MOST_RECENT_FILL DESC, LAST_UPD_DT DESC) AS RANK_WITHIN_IDS_FOR_ONE_PATIENT -- keep at least row 1
	        FROM deactivate_condidates )
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID)
	ON COMMIT PRESERVE ROWS;
	   
	   
	   

	--DROP TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP3;
	CREATE MULTISET VOLATILE TABLE DEACTIVATE_CANDIDATES_STEP3 AS ( 
	SELECT STEP2. *,
		   CASE 
		   		WHEN RANK_WITHIN_IDS_FOR_ONE_PATIENT = 1 THEN 1 
				ELSE 0
				END AS TRGT
		,  CASE 
				WHEN RANK_WITHIN_IDS_FOR_ONE_PATIENT > 1 AND DEACTIVATABLE IN (1) THEN 1 
				ELSE 0 
			END AS SRC
	FROM DEACTIVATE_CANDIDIATES_STEP2 AS STEP2
	WHERE 
		RANK_WITHIN_IDS_FOR_ONE_PATIENT = 1 
		OR (RANK_WITHIN_IDS_FOR_ONE_PATIENT > 1 AND DEACTIVATABLE IN (1))
	)WITH DATA PRIMARY INDEX (RXC_PTNT_ID)
	ON COMMIT PRESERVE ROWS
	; 
	
	
	/*CREATING THE FINAL TABLE IN THIS CASE*/
	DROP TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP4;
	CREATE MULTISET TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP4 AS ( 
	SELECT *
	FROM DEACTIVATE_CANDIDATES_STEP3 
	WHERE 
		(TRGT = 1 OR SRC = 1) 
	)WITH DATA PRIMARY INDEX (RXC_PTNT_ID);
	
	--creating the source profiles
	CREATE MULTISET VOLATILE TABLE DF_SOURCE AS ( 
		SELECT SRC.*
			,Cast(PTNT.PTNT_DT_OF_BRTH AS DATE) AS DOB_DT
		FROM RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP4 AS SRC
		INNER JOIN IDW_RX_OPERATIONS_S_BC.SEM_DIM_ALL_PATIENT AS PTNT
			ON Cast(SRC.RXC_PTNT_ID AS BIGINT) = Cast(PTNT.RXC_PTNT_ID AS BIGINT)
		WHERE SRC = 1) 
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID) 
	ON COMMIT PRESERVE ROWS; 

	--creating the target profiles
	CREATE MULTISET VOLATILE TABLE DF_TARGET AS ( 
	SELECT T1.*
		,Cast(PTNT.PTNT_DT_OF_BRTH AS DATE) AS DOB_DT
	FROM RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP4 AS T1
	INNER JOIN IDW_RX_OPERATIONS_S_BC.SEM_DIM_ALL_PATIENT AS PTNT
		ON Cast(T1.RXC_PTNT_ID AS BIGINT) = Cast(PTNT.RXC_PTNT_ID AS BIGINT)
	WHERE 
		TRGT = 1 
		AND T1.CVS_ID IN (SELECT DISTINCT CVS_ID FROM DF_SOURCE)
	)
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID)
	ON COMMIT PRESERVE ROWS; 
	
	--3,468,716
	
	--2,797,926	
	DROP TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5;
	CREATE MULTISET TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5 AS (
	SELECT DISTINCT DEACTIVATES.*
	FROM DF_SOURCE AS DEACTIVATES
	INNER JOIN DF_TARGET AS ACTIVES
		ON DEACTIVATES.CVS_ID=ACTIVES.CVS_ID
			AND DEACTIVATES.DOB_DT=ACTIVES.DOB_DT
	) 
	WITH DATA PRIMARY INDEX (RXC_PTNT_ID);
	COLLECT STATISTICS ON RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5 PRIMARY INDEX (RXC_PTNT_ID);
	COLLECT STATISTICS ON RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5 COLUMN (CVS_ID);
	
DROP TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_ALLERGY;
	CREATE MULTISET TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_ALLERGY AS ( 
	SELECT DISTINCT
		  ALRGY.RXC_PTNT_ID 
		, ALRGY_CD
	FROM RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5 AS STEP5
	JOIN IDW_RX_OPERATIONS_S_BC.RXC_PATIENT_ALLERGY AS ALRGY 
		ON Cast(STEP5.RXC_PTNT_ID AS BIGINT) = Cast(ALRGY.RXC_PTNT_ID AS BIGINT)
	)WITH DATA PRIMARY INDEX (RXC_PTNT_ID);
DROP TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_PROFILES;	
	CREATE MULTISET TABLE RXCOE_PMI.DEACTIVATE_CANDIDATES_PROFILES AS ( 
	SELECT 
		  STEP5.RXC_PTNT_ID
		, PTNT_FRST_NM
		, PTNT_LAST_NM
		, PTNT_DT_OF_BRTH
		, ADDR_LINE1
		, ADDR_LINE2
		, PO_BOX
		, CITY_NM
		, ST_CD
		, ZIP_CD
   FROM	RXCOE_PMI.DEACTIVATE_CANDIDATES_STEP5 AS STEP5
   JOIN IDW_RX_OPERATIONS_S_BC.SEM_DIM_ALL_PATIENT AS PTNT
   		ON Cast(STEP5.RXC_PTNT_ID AS BIGINT) = Cast(PTNT.RXC_PTNT_ID AS BIGINT)
	)WITH DATA PRIMARY INDEX (RXC_PTNT_ID); 

	
	
	SELECT * FROM RXCOE_PMI.DEACTIVATE_CANDIDATES_PROFILES;
	
