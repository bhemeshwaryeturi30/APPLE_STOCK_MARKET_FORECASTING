select 1;
-- Account has multiple RxC ID
-- No pickups in last 36 months (so some "inactive" patients are not considered)
-- Is not an active or pending caregiver or caregivee
-- No Specialty pickups in last 36 months (isp_ind == 'Y')
-- Patient must be 18 or older
-- Patient must not have any recent fill activity - 36 months
-- Patient does not have confirmed condition info
-- Patient does not have vaccination history
-- Patient does not have a patient note
-- Exception if that note is only something like "DO NOT USE" or "DUPLICATE PROFILE"
-- Account is not Rx-tied
-- DOB is the same for source and target profiles
-- Patient does not have any comments
-- Patient does not have any PMP Comments
-- No Prescriptions on hold in the last 36 months

-- NOTES LOGIC:
 
-- If the patient profile has any VALID documented patient note OR patient comment (even if there is more than one note and/or comment and only one is valid) DO NOT DEACTIVATE
-- Invalid patient notes/comments are defined as below:
-- If the note/comment is blank (no text)
-- If a note/comment exactly matches any of the following (not case sensitive):
-- Acquired Store medical condition listed as ICD-9please verify and reenter
-- Acquired Store medical condition listed as ICD-9R9please verify and reenter
-- DO NOT USE
-- OR  contains any of the following complete phrases (not case sensitive):
-- duplicate profile
-- USE OTHER PROFILE
-- Dup profile
-- Dupe profile
-- DO NOT USE THIS PROFILE
-- DO NOT USE THIS FILE
-- DO NOT USE THIS PROFILE
-- DO NOT USE SECOND PROFILE
-- DECEASED
-------------------------------------------------------------------------------------------------------
--VALIDATION OF REMAINING ITEMS
-------------------------------------------------------------------------------------------------------
 
-- Patient does not have any PMP Comments

SELECT COUNT(*) FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_TEST_SG;

    
--GATHERING THE RXITED PATIENTS IN THIS CASE.
CREATE OR REPLACE TEMPORARY TABLE RXTIED AS ( 
    SELECT DISTINCT
          RXC_PATIENT_ID 
    FROM CORE_RX.CURATED_PERSON.DIGITAL_USER_PROFILE 
    
    WHERE 
        PRIMARY_TIE_TS IS NOT NULL
        AND RXC_PATIENT_ID IS NOT NULL
);


--CAREGIVER INDICATOR 
CREATE OR REPLACE TEMPORARY TABLE CG_IND AS (
    SELECT DISTINCT RXC_PATIENT_ID
    FROM (
        SELECT CAREGIVER_RXC_PATIENT_ID AS RXC_PATIENT_ID
        FROM CORE_RX.CURATED_PERSON.CAREGIVING_RELATIONSHIP
        WHERE RXC_DIRTY_IND='N'
        UNION 
        SELECT CAREGIVEE_RXC_PATIENT_ID AS RXC_PATIENT_ID
        FROM CORE_RX.CURATED_PERSON.CAREGIVING_RELATIONSHIP
        WHERE RXC_DIRTY_IND='N'
    ) AS CG
);
    
    --PATIENT NOTE PART OF CODE, COUNTS THE NUMBER OF NOTES THAT A PATIENT HAS
CREATE OR REPLACE TEMPORARY TABLE PATIENT_NOTES AS ( 
    SELECT 
          RXC_PATIENT_ID 
        , COUNT(*) AS NUM_NOTES
    FROM
    (
        SELECT 
              RXC_PATIENT_ID 
            , NOTE_TXT
        FROM CORE_RX.CURATED_SCRIPT.PATIENT_NOTE
        WHERE 
            NOTE_TXT IS NOT NULL 
            AND UPPER(NOTE_TXT) <> 'DUPLICATE PROFILE'
            AND UPPER(NOTE_TXT) <> 'DO NOT USE'
            AND NOTE_TXT <> 'Acquired Store medical condition listed as ICD-9please verify and reenter'
            AND NOTE_TXT <> 'Acquired Store medical condition listed as ICD-9R9please verify and reenter'
            AND UPPER(NOTE_TXT) <> '%DECEASED%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�SECOND PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�THIS FILE%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�THIS PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DUPE PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DUP PROFILE%'
            AND UPPER(NOTE_TXT) <> '%USE OTHER PROFILE%'
            UNION
            SELECT 
              RXC_PATIENT_ID 
            , NOTE_TXT
        FROM CORE_RX.CURATED_SCRIPT.PATIENT_NOTE_HISTORY
        WHERE 
            NOTE_TXT IS NOT NULL 
            AND UPPER(NOTE_TXT) <> 'DUPLICATE PROFILE'
            AND UPPER(NOTE_TXT) <> 'DO NOT USE'
            AND NOTE_TXT <> 'Acquired Store medical condition listed as ICD-9please verify and reenter'
            AND NOTE_TXT <> 'Acquired Store medical condition listed as ICD-9R9please verify and reenter'
            AND UPPER(NOTE_TXT) <> '%DECEASED%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�SECOND PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�THIS FILE%'
            AND UPPER(NOTE_TXT) <> '%DO�NOT�USE�THIS PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DUPE PROFILE%'
            AND UPPER(NOTE_TXT) <> '%DUP PROFILE%'
            AND UPPER(NOTE_TXT) <> '%USE OTHER PROFILE%'
            ) AS T1
    GROUP BY 1
    );  

    --ALLERGY CODE 
CREATE OR REPLACE TEMPORARY TABLE ALLERGY_CHECK AS ( 
    SELECT 
          T1.RXC_PATIENT_ID 
        , COUNT(*) AS NUM_ALLERGY
    FROM (
        SELECT 
              RXC_PATIENT_ID 
            , ALLERGY_CD
        FROM CORE_RX.CURATED_PERSON.RXC_PATIENT_ALLERGY 
        WHERE 
            ALLERGY_CD IS NOT NULL 
            AND ALLERGY_CD NOT IN ('143')
            ) AS T1
    GROUP BY 1
);


    
--COUNTING THE NUMBER OF CONDITIONS 
CREATE OR REPLACE TEMPORARY TABLE CONDITION AS ( 
    SELECT 
           RXC_PATIENT_ID 
         , COUNT(*) AS NUM_COND
    FROM (
        SELECT 
              RXC_PATIENT_ID 
            , ICD_CD
        FROM CORE_RX.CURATED_PERSON.RXC_PATIENT_CONDITION 
        WHERE 
            ICD_CD IS NOT NULL 
        ) AS T1
     GROUP BY 1
);

CREATE OR REPLACE TEMPORARY TABLE IMMUNIZATION_COUNT AS (
    SELECT DISTINCT
      T1.RXC_PATIENT_ID, 
      1 AS HAS_VAX2
      FROM (
      SELECT 
              RXC_PATIENT_ID 
            , PF.NDC
            , PICKUP_TS
            , FILL_STATUS_CD
            , PRESCRIPTION_FILL_TS
            , DISPENSE_TS
            , IMMUNIZATION_ADMIN_TYPE_CD
      FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF 
      JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.IER_RECALL_EXCLUSION_NDC AS NDC 
        ON PF.NDC = NDC.NDC
      WHERE 
        FILL_STATUS_CD IN (7)
        AND PICKUP_TS IS NOT NULL
        AND PRESCRIPTION_FILL_TS IS NOT NULL 
        AND RXC_PATIENT_ID IS NOT NULL
        ) AS T1
       --NEED TO JOIN THIS BACK ON THE PATIENT TABLE 
    GROUP BY 1
);

CREATE OR REPLACE TEMPORARY TABLE REC_ACTV AS (
    SELECT DISTINCT PF.RXC_PATIENT_ID
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_ACTIVITY AS ACTV
    INNER JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL_XREF AS X
        ON ACTV.RXC_PRESCRIPTION_FILL_ID=X.RXC_PRESCRIPTION_FILL_ID
    INNER JOIN CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF
        ON X.STORE_NBR=PF.STORE_NBR
            AND X.RX_NBR=PF.RX_NBR
            AND X.FILL_NBR=PF.FILL_NBR
    INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_TEST_SG AS BASE
        ON BASE.RXC_PTNT_ID=PF.RXC_PATIENT_ID
            WHERE EFFECTIVE_TS::DATE=CURRENT_DATE-(365*3)
);

CREATE OR REPLACE TEMPORARY TABLE REC_FILLS AS (
    SELECT DISTINCT PF.RXC_PATIENT_ID
    FROM CORE_RX.CURATED_SCRIPT.PRESCRIPTION_FILL AS PF
    INNER JOIN DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_TEST_SG AS BASE
            ON BASE.RXC_PTNT_ID=PF.RXC_PATIENT_ID
    WHERE LAST_UPDATED_TS::DATE>=CURRENT_DATE-(365*3)
        OR POS_TXN_TS::DATE>=CURRENT_DATE-(365*3)
);

--CREATE OR REPLACE TEMPORARY TABLE MINOR AS ();

CREATE OR REPLACE TABLE DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_FINAL_SG AS (
    SELECT 
          BASE.RXC_PTNT_ID
        , CASE 
            WHEN RXT.RXC_PATIENT_ID IS NOT NULL THEN TRUE
            ELSE NULL 
          END AS RX_TIED 
        , NOTES.NUM_NOTES 
        , ALG.NUM_ALLERGY 
        , CND.NUM_COND 
        , IMZ.HAS_VAX2
        , CASE 
            WHEN CG.RXC_PATIENT_ID IS NOT NULL THEN TRUE
            ELSE NULL 
          END AS CG_IND
        , CASE WHEN ACTV.RXC_PATIENT_ID IS NOT NULL THEN TRUE
            ELSE NULL
        END AS RECENT_ACTV
        , CASE WHEN FILL.RXC_PATIENT_ID IS NOT NULL THEN TRUE
            ELSE NULL
        END AS RECENT_FILL
    FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_TEST_SG AS BASE 
    LEFT JOIN RXTIED AS RXT 
        ON BASE.RXC_PTNT_ID = RXT.RXC_PATIENT_ID
    LEFT JOIN PATIENT_NOTES AS NOTES
        ON BASE.RXC_PTNT_ID = NOTES.RXC_PATIENT_ID 
    LEFT JOIN ALLERGY_CHECK AS ALG 
        ON BASE.RXC_PTNT_ID = ALG.RXC_PATIENT_ID 
    LEFT JOIN CONDITION AS CND 
        ON BASE.RXC_PTNT_ID = CND.RXC_PATIENT_ID 
    LEFT JOIN IMMUNIZATION_COUNT AS IMZ 
        ON BASE.RXC_PTNT_ID = IMZ.RXC_PATIENT_ID
    LEFT JOIN CG_IND AS CG
        ON BASE.RXC_PTNT_ID = CG.RXC_PATIENT_ID
    LEFT JOIN REC_ACTV AS ACTV
        ON BASE.RXC_PTNT_ID = ACTV.RXC_PATIENT_ID
    LEFT JOIN REC_FILLS AS FILL
        ON BASE.RXC_PTNT_ID = FILL.RXC_PATIENT_ID
    WHERE BASE.RXC_PTNT_ID NOT IN (SELECT DISTINCT RXC_PTNT_ID FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_FINAL_SG)
);

SELECT TOP 1000 * FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_FINAL_SG;
--CORE_RX.CURATED_SCRIPT.RXC_PRESCRIPTION_FILL_NOTE_HISTORY 
--194,304
SELECT COUNT(DISTINCT RXC_PTNT_ID)
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_FINAL_SG
WHERE RX_TIED IS NULL
    AND NUM_NOTES IS NULL
    AND NUM_ALLERGY IS NULL
    AND NUM_COND IS NULL
    AND HAS_VAX2 IS NULL
    AND CG_IND IS NULL
    AND RECENT_ACTV IS NULL
    AND RECENT_FILL IS NULL;

SELECT DISTINCT RXC_PTNT_ID
FROM DL_RX_OPERATION.RX_OPS_SANDBOX.PATIENT_DEACTIVATION_PROFILES_FINAL_SG
WHERE RX_TIED IS NULL
    AND NUM_NOTES IS NULL
    AND NUM_ALLERGY IS NULL
    AND NUM_COND IS NULL
    AND HAS_VAX2 IS NULL
    AND CG_IND IS NULL
    AND RECENT_ACTV IS NULL
    AND RECENT_FILL IS NULL;
