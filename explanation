

This repository contains both the Python ingestion script and the Snowflake SQL transformation logic used to create the Telepharmacy Executive Summary Dashboard.
The process integrates workforce, customer experience, and operational performance data from Teradata, Snowflake, and external Excel sources into an automated Snowflake data model.

⸻

Overview

The Telepharmacy Executive Summary Dashboard provides leadership-level insights into key performance indicators across telepharmacy stores.
It consolidates data from multiple systems to assess store performance, customer experience, and workforce alignment across the following metrics:
	•	NPS (Net Promoter Score)
	•	WeCare Score (Customer Satisfaction)
	•	OPI (Operational Performance Index)
	•	MPC (Mission Performance Composite)
	•	RPH AVD / TECH AVD (Actual vs. Demand Hours Ratios)

The workflow consists of two stages:
	1.	Python Pipeline: Extracts, cleans, and uploads base data tables (TELEPHARMACY_STORE, TELEPHARMACY_STORE_WEEK, TELEPHARMACY_STORE_MONTH, TELEPHARMACY_STORE_YEAR) into Snowflake.
	2.	Snowflake SQL Scripts: Builds the final analytical tables — TELEPHARMACY_EXECUTIVE_SUMMARY and TELEPHARMACY_STORE_VIEW — used for dashboard visualization.

⸻

Workflow Summary

External Excel File (Telepharmacy Store Status)
        ↓
Python ETL Script
        ↓
Teradata (AVD_RX_FS)
        ↓
Snowflake Base Tables (TELEPHARMACY_STORE*, WECARE_METRICS, AVD)
        ↓
telepharmacyExecutiveSummary.sql
        ↓
Final Analytical Tables
    ├── TELEPHARMACY_EXECUTIVE_SUMMARY
    └── TELEPHARMACY_STORE_VIEW
        ↓
Tableau / Power BI Dashboard


⸻

Setup and Connection Details

Before executing, ensure the following configurations are set up correctly:

Snowflake Context

USE DATABASE DL_RX_OPERATION;
USE SCHEMA RX_OPS_SANDBOX;
USE WAREHOUSE WH_RX_QUERY_RXANALYTICS_01;

Teradata Connection (Python)

cnxn = teradatasql.connect(
    host="teredwpd.cvs.com",
    user=user_id,
    password=pw
)

Snowflake Connection (Python)

ctx = snowflake.connector.connect(
    authenticator='externalbrowser',
    user='pooja.sankharva@cvshealth.com',
    account='cvs-cvsretailprod.privatelink',
    warehouse='WH_RX_QUERY_RXANALYTICS_01',
    database='DL_RX_OPERATION',
    schema='RX_OPS_SANDBOX',
    role='GRP-CN-SNOWFLK-PROD-RX-ANALYTICS-BI-SE'
)


⸻

Step 1: Python Ingestion Pipeline

File: telepharmacy_ingestion.py

Purpose

Fetches the latest Telepharmacy Store Status Excel from Azure Logic App, filters valid stores, extracts performance data from Teradata, and uploads formatted data into Snowflake.

Key Processes

1. Data Retrieval from Azure
	•	Triggers an Azure Logic App URL to pull the Excel file (Telepharmacy Store Status - Group 0 - 2a.xlsx).
	•	Decodes the Base64 response and writes it locally.

2. Data Cleaning
	•	Filters out stores with status Descoped or Closed.
	•	Renames key columns (2024 Div → DIV, 2024 Reg → REG, 2024 Dist → DIST).
	•	Converts Last Status Change to datetime and ensures consistent casing.

3. Data Extraction (Teradata)

Runs SQL on RXCOE_WFM.AVD_RX_FS to pull:
	•	Fiscal week number
	•	Store number
	•	Pharmacist and Technician Actual vs. Demand hours (RPH/TECH AVD)

4. Data Integration (Snowflake)
	•	Uploads clean datasets into DL_RX_OPERATION.RX_OPS_SANDBOX tables:
	•	TELEPHARMACY_STORE
	•	TELEPHARMACY_STORE_WEEK
	•	TELEPHARMACY_STORE_MONTH
	•	TELEPHARMACY_STORE_YEAR
	•	Fetches complementary data from Snowflake sources:
	•	WECARE_EXCLUSIONS
	•	WECARE_METRIC_PDF_V2
	•	Harmonizes column names for consistency using the format_columns_upload_data() function.

Output

Base data tables in Snowflake ready for use by downstream SQL transformations.

⸻

Step 2: Snowflake Transformation Layer

File: telepharmacyExecutiveSummary.sql

Purpose

Generates two final analytical tables:
	1.	TELEPHARMACY_EXECUTIVE_SUMMARY — Aggregated, multi-metric executive summary by fiscal week, month, and YTD.
	2.	TELEPHARMACY_STORE_VIEW — Detailed store-level operational view across NPS, WeCare, OPI, MPC, and workforce KPIs.

⸻

1. TELEPHARMACY_EXECUTIVE_SUMMARY

Objective:
Integrate weekly, monthly, and YTD metrics into a unified performance summary across telepharmacy models and chains.

Key Components:

CTE	Description
STORE_MODEL	Maps store numbers to their operational models.
STR_FW	Calculates weekly trends (NPS, WeCare, RPH/TECH AVD).
AVD_MONTH, AVD_YTD	Aggregates monthly and YTD actual vs. demand hours.
MPC_CHAIN, OPI_CHAIN, WECARE_CHAIN, NPS_CHAIN, AVD_CHAIN	Computes chain-level benchmarks for each KPI.
STR_FM, STR_FY	Derives month and year trends for each store.
FINAL_DF	Combines all metrics and computes goal attainment flags.

Final Output:

The table merges all KPIs using UNION blocks, creating one standardized structure with columns such as:

Column	Description
STORE_NBR	Store identifier
MODEL	Telepharmacy store model
METRIC_NAME	Metric category (NPS, WECARE, OPI, MPC, RPH AVD, TECH AVD)
FW_VALUE, MTH_VALUE, YTD_VALUE	Weekly, monthly, and YTD scores
GOAL	Binary goal attainment flag
CHAIN_NUM, CHAIN_DEN	Chain-level KPI benchmarks


⸻

2. TELEPHARMACY_STORE_VIEW

Objective:
Provides a simplified store-level dataset for operational deep dives.

Highlights:
	•	Builds on weekly and monthly telepharmacy tables (TELEPHARMACY_STORE_WEEK, TELEPHARMACY_STORE_MONTH).
	•	Includes lag functions to calculate previous-period comparisons.
	•	Calculates goal attainment for NPS, WeCare, OPI, and MPC metrics.
	•	Produces store-by-store KPIs for regional or model-based comparisons.


⸻

Execution Order
	1.	Run Python Script:

python telepharmacy_ingestion.py

	•	Downloads, cleans, and uploads base data tables into Snowflake.

	2.	Run Snowflake SQL Script:

-- Execute telepharmacyExecutiveSummary.sql
CREATE OR REPLACE TABLE TELEPHARMACY_EXECUTIVE_SUMMARY AS (...);
CREATE OR REPLACE TABLE TELEPHARMACY_STORE_VIEW AS (...);


	3.	Validate Outputs:

SELECT COUNT(*) FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_EXECUTIVE_SUMMARY;
SELECT COUNT(*) FROM DL_RX_OPERATION.RX_OPS_SANDBOX.TELEPHARMACY_STORE_VIEW;



⸻
